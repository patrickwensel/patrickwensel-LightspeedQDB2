// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using QBD2.Data;

#nullable disable

namespace QBD2.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20220725152128_Add_Build_Station_Failure_Code")]
    partial class Add_Build_Station_Failure_Code
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityRole");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUserRole<string>");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("QBD2.Entities.Alert", b =>
                {
                    b.Property<int>("AlertId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AlertId"), 1L, 1);

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ExpirationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("MasterPartId")
                        .HasColumnType("int");

                    b.Property<string>("ReasonforManufacturingDeviation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AlertId");

                    b.HasIndex("MasterPartId");

                    b.ToTable("Alerts");
                });

            modelBuilder.Entity("QBD2.Entities.BuildStation", b =>
                {
                    b.Property<int>("BuildStationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BuildStationId"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BuildStationId");

                    b.ToTable("BuildStations");
                });

            modelBuilder.Entity("QBD2.Entities.BuildStationFailureCode", b =>
                {
                    b.Property<int>("BuildStationFailureCodeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BuildStationFailureCodeId"), 1L, 1);

                    b.Property<int>("BuildStationId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BuildStationFailureCodeId");

                    b.HasIndex("BuildStationId");

                    b.ToTable("BuildStationFailureCodes");
                });

            modelBuilder.Entity("QBD2.Entities.BuildTemplate", b =>
                {
                    b.Property<int>("BuildTemplateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BuildTemplateId"), 1L, 1);

                    b.Property<int>("MasterPartId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BuildTemplateId");

                    b.HasIndex("MasterPartId");

                    b.ToTable("BuildTemplates");
                });

            modelBuilder.Entity("QBD2.Entities.BuildTemplatePart", b =>
                {
                    b.Property<int>("BuildTemplatePartId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BuildTemplatePartId"), 1L, 1);

                    b.Property<int>("BuildStationId")
                        .HasColumnType("int");

                    b.Property<int>("BuildTemplateId")
                        .HasColumnType("int");

                    b.Property<int>("MasterPartId")
                        .HasColumnType("int");

                    b.Property<bool>("SerialNumberRequired")
                        .HasColumnType("bit");

                    b.HasKey("BuildTemplatePartId");

                    b.HasIndex("BuildStationId");

                    b.HasIndex("BuildTemplateId");

                    b.HasIndex("MasterPartId");

                    b.ToTable("BuildTemplateParts");
                });

            modelBuilder.Entity("QBD2.Entities.Deviation", b =>
                {
                    b.Property<int>("DeviationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DeviationId"), 1L, 1);

                    b.Property<string>("CommentCorrectiveAction")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("ECONumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("ECORequired")
                        .HasColumnType("bit");

                    b.Property<string>("LSA2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LSAFGI")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LSASEVE")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LSASVPART")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LSAWIP")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MasterPartId")
                        .HasColumnType("int");

                    b.Property<string>("Originator")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PartId")
                        .HasColumnType("int");

                    b.Property<string>("ReasonforManufacturingDeviation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Vendor2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Vendor3FGI")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VendorSEVE")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VendorSVPART")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VendorWIP")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DeviationId");

                    b.HasIndex("MasterPartId");

                    b.HasIndex("PartId");

                    b.ToTable("Deviations");
                });

            modelBuilder.Entity("QBD2.Entities.FailureCode", b =>
                {
                    b.Property<int>("FailureCodeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FailureCodeId"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("FailureCodeId");

                    b.ToTable("FailureCodes");

                    b.HasData(
                        new
                        {
                            FailureCodeId = 1,
                            Name = "Battery Box"
                        },
                        new
                        {
                            FailureCodeId = 2,
                            Name = "Active, Comm Audio"
                        },
                        new
                        {
                            FailureCodeId = 3,
                            Name = "Cable"
                        },
                        new
                        {
                            FailureCodeId = 4,
                            Name = "Other Noise"
                        },
                        new
                        {
                            FailureCodeId = 5,
                            Name = "Headband Sliders"
                        });
                });

            modelBuilder.Entity("QBD2.Entities.FailureType", b =>
                {
                    b.Property<int>("FailureTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FailureTypeId"), 1L, 1);

                    b.Property<int>("FailureTypePrimaryId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("FailureTypeId");

                    b.HasIndex("FailureTypePrimaryId");

                    b.ToTable("FailureTypes");

                    b.HasData(
                        new
                        {
                            FailureTypeId = 1,
                            FailureTypePrimaryId = 1,
                            Name = "Color"
                        });
                });

            modelBuilder.Entity("QBD2.Entities.FailureTypePrimary", b =>
                {
                    b.Property<int>("FailureTypePrimaryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FailureTypePrimaryId"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("FailureTypePrimaryId");

                    b.ToTable("FailureTypePrimaries");

                    b.HasData(
                        new
                        {
                            FailureTypePrimaryId = 1,
                            Name = "Cosmetic"
                        },
                        new
                        {
                            FailureTypePrimaryId = 2,
                            Name = "Mechanical"
                        },
                        new
                        {
                            FailureTypePrimaryId = 3,
                            Name = "Power"
                        },
                        new
                        {
                            FailureTypePrimaryId = 4,
                            Name = "ANR"
                        },
                        new
                        {
                            FailureTypePrimaryId = 5,
                            Name = "Comms / Audio / BT"
                        });
                });

            modelBuilder.Entity("QBD2.Entities.GLCode", b =>
                {
                    b.Property<int>("GLCodeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GLCodeId"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("GLCodeId");

                    b.ToTable("GLCodes");

                    b.HasData(
                        new
                        {
                            GLCodeId = 1,
                            Name = "5471 - Refurbish Parts"
                        },
                        new
                        {
                            GLCodeId = 2,
                            Name = "5490 - Cost of Service Parts"
                        },
                        new
                        {
                            GLCodeId = 3,
                            Name = "5493 - Conversion Costs"
                        });
                });

            modelBuilder.Entity("QBD2.Entities.Inspection", b =>
                {
                    b.Property<int>("InspectionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("InspectionId"), 1L, 1);

                    b.Property<string>("GeneralComments")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PartId")
                        .HasColumnType("int");

                    b.Property<bool>("Pass")
                        .HasColumnType("bit");

                    b.Property<int>("StationId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("InspectionId");

                    b.HasIndex("PartId");

                    b.HasIndex("StationId");

                    b.ToTable("Inspections");
                });

            modelBuilder.Entity("QBD2.Entities.InspectionFailure", b =>
                {
                    b.Property<int>("InspectionFailureId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("InspectionFailureId"), 1L, 1);

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FailureTypeId")
                        .HasColumnType("int");

                    b.Property<int>("InspectionId")
                        .HasColumnType("int");

                    b.HasKey("InspectionFailureId");

                    b.HasIndex("FailureTypeId");

                    b.HasIndex("InspectionId");

                    b.ToTable("InspectionFailures");
                });

            modelBuilder.Entity("QBD2.Entities.MasterPart", b =>
                {
                    b.Property<int>("MasterPartId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MasterPartId"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Itemno")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PartNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ProductFamilyId")
                        .HasColumnType("int");

                    b.HasKey("MasterPartId");

                    b.HasIndex("ProductFamilyId");

                    b.ToTable("MasterParts");
                });

            modelBuilder.Entity("QBD2.Entities.Part", b =>
                {
                    b.Property<int>("PartId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PartId"), 1L, 1);

                    b.Property<int?>("BuildStationId")
                        .HasColumnType("int");

                    b.Property<int>("MasterPartId")
                        .HasColumnType("int");

                    b.Property<int?>("ParentPartId")
                        .HasColumnType("int");

                    b.Property<int>("PartStatusId")
                        .HasColumnType("int");

                    b.Property<string>("SerialNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("SerialNumberRequired")
                        .HasColumnType("bit");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("PartId");

                    b.HasIndex("BuildStationId");

                    b.HasIndex("MasterPartId");

                    b.HasIndex("ParentPartId");

                    b.HasIndex("PartStatusId");

                    b.ToTable("Parts");
                });

            modelBuilder.Entity("QBD2.Entities.PartAlert", b =>
                {
                    b.Property<int>("PartAlertId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PartAlertId"), 1L, 1);

                    b.Property<int>("AlertId")
                        .HasColumnType("int");

                    b.Property<int>("PartId")
                        .HasColumnType("int");

                    b.HasKey("PartAlertId");

                    b.HasIndex("AlertId");

                    b.HasIndex("PartId");

                    b.ToTable("PartAlerts");
                });

            modelBuilder.Entity("QBD2.Entities.PartDeviation", b =>
                {
                    b.Property<int>("PartDeviationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PartDeviationId"), 1L, 1);

                    b.Property<int>("DeviationId")
                        .HasColumnType("int");

                    b.Property<int>("PartId")
                        .HasColumnType("int");

                    b.HasKey("PartDeviationId");

                    b.HasIndex("DeviationId");

                    b.HasIndex("PartId");

                    b.ToTable("PartDeviations");
                });

            modelBuilder.Entity("QBD2.Entities.PartStatus", b =>
                {
                    b.Property<int>("PartStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PartStatusId"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PartStatusId");

                    b.ToTable("PartStatuses");

                    b.HasData(
                        new
                        {
                            PartStatusId = 1,
                            Name = "Active"
                        },
                        new
                        {
                            PartStatusId = 2,
                            Name = "Removed"
                        });
                });

            modelBuilder.Entity("QBD2.Entities.ProductFamily", b =>
                {
                    b.Property<int>("ProductFamilyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductFamilyId"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProductFamilyId");

                    b.ToTable("ProductFamilies");

                    b.HasData(
                        new
                        {
                            ProductFamilyId = 1,
                            Name = "Delta Zulu"
                        });
                });

            modelBuilder.Entity("QBD2.Entities.Repair", b =>
                {
                    b.Property<int>("RepairId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RepairId"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FailureCodeId")
                        .HasColumnType("int");

                    b.Property<int>("GLCodeId")
                        .HasColumnType("int");

                    b.Property<int>("PartId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("RepairId");

                    b.HasIndex("FailureCodeId");

                    b.HasIndex("GLCodeId");

                    b.HasIndex("PartId");

                    b.ToTable("Repairs");
                });

            modelBuilder.Entity("QBD2.Entities.ScarCar", b =>
                {
                    b.Property<int>("ScarCarId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ScarCarId"), 1L, 1);

                    b.Property<string>("ApplicationUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Containment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("OpenDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("RootCause")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ScarCarCategoryId")
                        .HasColumnType("int");

                    b.Property<int>("ScarCarImpactId")
                        .HasColumnType("int");

                    b.Property<int>("ScarCarPriorityId")
                        .HasColumnType("int");

                    b.Property<int>("ScarCarProjectId")
                        .HasColumnType("int");

                    b.Property<int>("ScarCarResolutionId")
                        .HasColumnType("int");

                    b.Property<int>("ScarCarStatusId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ScarCarId");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("ScarCarCategoryId");

                    b.HasIndex("ScarCarImpactId");

                    b.HasIndex("ScarCarPriorityId");

                    b.HasIndex("ScarCarProjectId");

                    b.HasIndex("ScarCarResolutionId");

                    b.HasIndex("ScarCarStatusId");

                    b.ToTable("ScarCar");
                });

            modelBuilder.Entity("QBD2.Entities.ScarCarAttachment", b =>
                {
                    b.Property<int>("ScarCarAttachmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ScarCarAttachmentId"), 1L, 1);

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ScarCarId")
                        .HasColumnType("int");

                    b.HasKey("ScarCarAttachmentId");

                    b.HasIndex("ScarCarId");

                    b.ToTable("ScarCarAttachments");
                });

            modelBuilder.Entity("QBD2.Entities.ScarCarCategory", b =>
                {
                    b.Property<int>("ScarCarCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ScarCarCategoryId"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ScarCarCategoryId");

                    b.ToTable("ScarCarCategories");

                    b.HasData(
                        new
                        {
                            ScarCarCategoryId = 1,
                            Name = "CIA"
                        },
                        new
                        {
                            ScarCarCategoryId = 2,
                            Name = "CAR - Minor"
                        },
                        new
                        {
                            ScarCarCategoryId = 3,
                            Name = "CAR - Major"
                        },
                        new
                        {
                            ScarCarCategoryId = 4,
                            Name = "SCAR"
                        },
                        new
                        {
                            ScarCarCategoryId = 5,
                            Name = "IAR"
                        });
                });

            modelBuilder.Entity("QBD2.Entities.ScarCarImpact", b =>
                {
                    b.Property<int>("ScarCarImpactId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ScarCarImpactId"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ScarCarImpactId");

                    b.ToTable("ScarCarImpacts");

                    b.HasData(
                        new
                        {
                            ScarCarImpactId = 1,
                            Name = "Low"
                        },
                        new
                        {
                            ScarCarImpactId = 2,
                            Name = "Medium"
                        },
                        new
                        {
                            ScarCarImpactId = 3,
                            Name = "High"
                        });
                });

            modelBuilder.Entity("QBD2.Entities.ScarCarNote", b =>
                {
                    b.Property<int>("ScarCarProjectId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ScarCarProjectId"), 1L, 1);

                    b.Property<DateTime>("AddedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ApplicationUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ScarCarId")
                        .HasColumnType("int");

                    b.HasKey("ScarCarProjectId");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("ScarCarId");

                    b.ToTable("ScarCarNotes");
                });

            modelBuilder.Entity("QBD2.Entities.ScarCarPriority", b =>
                {
                    b.Property<int>("ScarCarPriorityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ScarCarPriorityId"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ScarCarPriorityId");

                    b.ToTable("ScarCarPriorities");

                    b.HasData(
                        new
                        {
                            ScarCarPriorityId = 1,
                            Name = "1"
                        },
                        new
                        {
                            ScarCarPriorityId = 2,
                            Name = "2"
                        },
                        new
                        {
                            ScarCarPriorityId = 3,
                            Name = "3"
                        },
                        new
                        {
                            ScarCarPriorityId = 4,
                            Name = "4"
                        },
                        new
                        {
                            ScarCarPriorityId = 5,
                            Name = "5"
                        },
                        new
                        {
                            ScarCarPriorityId = 6,
                            Name = "6"
                        },
                        new
                        {
                            ScarCarPriorityId = 7,
                            Name = "7"
                        },
                        new
                        {
                            ScarCarPriorityId = 8,
                            Name = "8"
                        },
                        new
                        {
                            ScarCarPriorityId = 9,
                            Name = "9"
                        },
                        new
                        {
                            ScarCarPriorityId = 10,
                            Name = "10"
                        });
                });

            modelBuilder.Entity("QBD2.Entities.ScarCarProject", b =>
                {
                    b.Property<int>("ScarCarProjectId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ScarCarProjectId"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ScarCarProjectId");

                    b.ToTable("ScarCarProjects");

                    b.HasData(
                        new
                        {
                            ScarCarProjectId = 1,
                            Name = "Process"
                        },
                        new
                        {
                            ScarCarProjectId = 2,
                            Name = "Performance"
                        },
                        new
                        {
                            ScarCarProjectId = 3,
                            Name = "Manufacturability"
                        },
                        new
                        {
                            ScarCarProjectId = 4,
                            Name = "Test"
                        });
                });

            modelBuilder.Entity("QBD2.Entities.ScarCarResolution", b =>
                {
                    b.Property<int>("ScarCarResolutionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ScarCarResolutionId"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ScarCarResolutionId");

                    b.ToTable("ScarCarResolutions");
                });

            modelBuilder.Entity("QBD2.Entities.ScarCarStatus", b =>
                {
                    b.Property<int>("ScarCarStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ScarCarStatusId"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ScarCarStatusId");

                    b.ToTable("ScarCarStatuses");

                    b.HasData(
                        new
                        {
                            ScarCarStatusId = 1,
                            Name = "Active"
                        },
                        new
                        {
                            ScarCarStatusId = 2,
                            Name = "New"
                        },
                        new
                        {
                            ScarCarStatusId = 3,
                            Name = "Resolved"
                        },
                        new
                        {
                            ScarCarStatusId = 4,
                            Name = "Closed"
                        },
                        new
                        {
                            ScarCarStatusId = 5,
                            Name = "Deferred"
                        });
                });

            modelBuilder.Entity("QBD2.Entities.Station", b =>
                {
                    b.Property<int>("StationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StationId"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("StationId");

                    b.ToTable("Stations");

                    b.HasData(
                        new
                        {
                            StationId = 1,
                            Name = "Final Inspection"
                        },
                        new
                        {
                            StationId = 2,
                            Name = "Seveco"
                        });
                });

            modelBuilder.Entity("QBD2.Entities.WorkOrder", b =>
                {
                    b.Property<int>("WorkOrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("WorkOrderId"), 1L, 1);

                    b.Property<int>("BuildTemplateId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("WorkOrderPriorityID")
                        .HasColumnType("int");

                    b.Property<int>("WorkOrderStatusId")
                        .HasColumnType("int");

                    b.Property<int>("WorkOrderTypeId")
                        .HasColumnType("int");

                    b.HasKey("WorkOrderId");

                    b.HasIndex("BuildTemplateId");

                    b.HasIndex("WorkOrderPriorityID");

                    b.HasIndex("WorkOrderStatusId");

                    b.HasIndex("WorkOrderTypeId");

                    b.ToTable("WorkOrders");
                });

            modelBuilder.Entity("QBD2.Entities.WorkOrderPart", b =>
                {
                    b.Property<int>("WorkOrderPartId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("WorkOrderPartId"), 1L, 1);

                    b.Property<int>("PartId")
                        .HasColumnType("int");

                    b.Property<int>("WorkOrderId")
                        .HasColumnType("int");

                    b.HasKey("WorkOrderPartId");

                    b.HasIndex("PartId");

                    b.HasIndex("WorkOrderId");

                    b.ToTable("WorkOrderParts");
                });

            modelBuilder.Entity("QBD2.Entities.WorkOrderPriority", b =>
                {
                    b.Property<int>("WorkOrderPriorityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("WorkOrderPriorityId"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("WorkOrderPriorityId");

                    b.ToTable("WorkOrderPriorities");
                });

            modelBuilder.Entity("QBD2.Entities.WorkOrderStatus", b =>
                {
                    b.Property<int>("WorkOrderStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("WorkOrderStatusId"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("WorkOrderStatusId");

                    b.ToTable("WorkOrderStatuses");
                });

            modelBuilder.Entity("QBD2.Entities.WorkOrderType", b =>
                {
                    b.Property<int>("WorkOrderTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("WorkOrderTypeId"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("WorkOrderTypeId");

                    b.ToTable("WorkOrderTypes");
                });

            modelBuilder.Entity("QBD2.Entities.ApplicationRole", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityRole");

                    b.HasDiscriminator().HasValue("ApplicationRole");

                    b.HasData(
                        new
                        {
                            Id = "22b3bff1-cfd2-4075-a90f-827380656873",
                            ConcurrencyStamp = "12936357-7ce4-4b98-acf1-7d56301a3c14",
                            Name = "User",
                            NormalizedName = "USER"
                        },
                        new
                        {
                            Id = "e4e7188b-6ecb-4278-aeee-17271f20d7ce",
                            ConcurrencyStamp = "5b467704-f348-48c0-9efd-04b6f786d3e0",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        });
                });

            modelBuilder.Entity("QBD2.Entities.ApplicationUser", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<string>("ADLogin")
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("ApplicationUser");

                    b.HasData(
                        new
                        {
                            Id = "2e97b939-49c0-4e1e-8376-cb98348103bb",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "917b6ad9-34c4-4731-ae30-4f8f074359f5",
                            Email = "pwensel@hotmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "PWENSEL@HOTMAIL.COM",
                            NormalizedUserName = "PWENSEL@HOTMAIL.COM",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f4f2f6ff-5565-4ef2-ac52-29336d1f6b1a",
                            TwoFactorEnabled = false,
                            UserName = "pwensel@hotmail.com",
                            ADLogin = "DESKTOP-1HVSAG6\\pwens"
                        });
                });

            modelBuilder.Entity("QBD2.Entities.ApplicationUserRole", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUserRole<string>");

                    b.HasDiscriminator().HasValue("ApplicationUserRole");

                    b.HasData(
                        new
                        {
                            UserId = "2e97b939-49c0-4e1e-8376-cb98348103bb",
                            RoleId = "e4e7188b-6ecb-4278-aeee-17271f20d7ce"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("QBD2.Entities.Alert", b =>
                {
                    b.HasOne("QBD2.Entities.MasterPart", "MasterPart")
                        .WithMany("Alerts")
                        .HasForeignKey("MasterPartId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("MasterPart");
                });

            modelBuilder.Entity("QBD2.Entities.BuildStationFailureCode", b =>
                {
                    b.HasOne("QBD2.Entities.BuildStation", "BuildStation")
                        .WithMany()
                        .HasForeignKey("BuildStationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BuildStation");
                });

            modelBuilder.Entity("QBD2.Entities.BuildTemplate", b =>
                {
                    b.HasOne("QBD2.Entities.MasterPart", "MasterPart")
                        .WithMany()
                        .HasForeignKey("MasterPartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MasterPart");
                });

            modelBuilder.Entity("QBD2.Entities.BuildTemplatePart", b =>
                {
                    b.HasOne("QBD2.Entities.BuildStation", "BuildStation")
                        .WithMany()
                        .HasForeignKey("BuildStationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QBD2.Entities.BuildTemplate", "BuildTemplate")
                        .WithMany()
                        .HasForeignKey("BuildTemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QBD2.Entities.MasterPart", "MasterPart")
                        .WithMany("BuildTemplateParts")
                        .HasForeignKey("MasterPartId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("BuildStation");

                    b.Navigation("BuildTemplate");

                    b.Navigation("MasterPart");
                });

            modelBuilder.Entity("QBD2.Entities.Deviation", b =>
                {
                    b.HasOne("QBD2.Entities.MasterPart", "MasterPart")
                        .WithMany("Deviations")
                        .HasForeignKey("MasterPartId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("QBD2.Entities.Part", null)
                        .WithMany("Deviations")
                        .HasForeignKey("PartId");

                    b.Navigation("MasterPart");
                });

            modelBuilder.Entity("QBD2.Entities.FailureType", b =>
                {
                    b.HasOne("QBD2.Entities.FailureTypePrimary", "FailureTypePrimary")
                        .WithMany()
                        .HasForeignKey("FailureTypePrimaryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FailureTypePrimary");
                });

            modelBuilder.Entity("QBD2.Entities.Inspection", b =>
                {
                    b.HasOne("QBD2.Entities.Part", "Part")
                        .WithMany()
                        .HasForeignKey("PartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QBD2.Entities.Station", "Station")
                        .WithMany()
                        .HasForeignKey("StationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Part");

                    b.Navigation("Station");
                });

            modelBuilder.Entity("QBD2.Entities.InspectionFailure", b =>
                {
                    b.HasOne("QBD2.Entities.FailureType", "FailureType")
                        .WithMany()
                        .HasForeignKey("FailureTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QBD2.Entities.Inspection", "Inspection")
                        .WithMany("InspectionFailures")
                        .HasForeignKey("InspectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FailureType");

                    b.Navigation("Inspection");
                });

            modelBuilder.Entity("QBD2.Entities.MasterPart", b =>
                {
                    b.HasOne("QBD2.Entities.ProductFamily", "ProductFamily")
                        .WithMany()
                        .HasForeignKey("ProductFamilyId");

                    b.Navigation("ProductFamily");
                });

            modelBuilder.Entity("QBD2.Entities.Part", b =>
                {
                    b.HasOne("QBD2.Entities.BuildStation", "BuildStation")
                        .WithMany()
                        .HasForeignKey("BuildStationId");

                    b.HasOne("QBD2.Entities.MasterPart", "MasterPart")
                        .WithMany()
                        .HasForeignKey("MasterPartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QBD2.Entities.Part", "ParentPart")
                        .WithMany()
                        .HasForeignKey("ParentPartId");

                    b.HasOne("QBD2.Entities.PartStatus", "PartStatus")
                        .WithMany("Parts")
                        .HasForeignKey("PartStatusId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("BuildStation");

                    b.Navigation("MasterPart");

                    b.Navigation("ParentPart");

                    b.Navigation("PartStatus");
                });

            modelBuilder.Entity("QBD2.Entities.PartAlert", b =>
                {
                    b.HasOne("QBD2.Entities.Alert", "Alert")
                        .WithMany("PartAlerts")
                        .HasForeignKey("AlertId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QBD2.Entities.Part", "Part")
                        .WithMany()
                        .HasForeignKey("PartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Alert");

                    b.Navigation("Part");
                });

            modelBuilder.Entity("QBD2.Entities.PartDeviation", b =>
                {
                    b.HasOne("QBD2.Entities.Deviation", "Deviation")
                        .WithMany("PartDeviations")
                        .HasForeignKey("DeviationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QBD2.Entities.Part", "Part")
                        .WithMany()
                        .HasForeignKey("PartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Deviation");

                    b.Navigation("Part");
                });

            modelBuilder.Entity("QBD2.Entities.Repair", b =>
                {
                    b.HasOne("QBD2.Entities.FailureCode", "FailureCode")
                        .WithMany()
                        .HasForeignKey("FailureCodeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QBD2.Entities.GLCode", "GLCode")
                        .WithMany()
                        .HasForeignKey("GLCodeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QBD2.Entities.Part", "Part")
                        .WithMany()
                        .HasForeignKey("PartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FailureCode");

                    b.Navigation("GLCode");

                    b.Navigation("Part");
                });

            modelBuilder.Entity("QBD2.Entities.ScarCar", b =>
                {
                    b.HasOne("QBD2.Entities.ApplicationUser", "AssignedUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QBD2.Entities.ScarCarCategory", "ScarCarCategory")
                        .WithMany()
                        .HasForeignKey("ScarCarCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QBD2.Entities.ScarCarImpact", "ScarCarImpact")
                        .WithMany()
                        .HasForeignKey("ScarCarImpactId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QBD2.Entities.ScarCarPriority", "ScarCarPriority")
                        .WithMany()
                        .HasForeignKey("ScarCarPriorityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QBD2.Entities.ScarCarProject", "ScarCarProject")
                        .WithMany()
                        .HasForeignKey("ScarCarProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QBD2.Entities.ScarCarResolution", "ScarCarResolution")
                        .WithMany()
                        .HasForeignKey("ScarCarResolutionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QBD2.Entities.ScarCarStatus", "ScarCarStatus")
                        .WithMany()
                        .HasForeignKey("ScarCarStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AssignedUser");

                    b.Navigation("ScarCarCategory");

                    b.Navigation("ScarCarImpact");

                    b.Navigation("ScarCarPriority");

                    b.Navigation("ScarCarProject");

                    b.Navigation("ScarCarResolution");

                    b.Navigation("ScarCarStatus");
                });

            modelBuilder.Entity("QBD2.Entities.ScarCarAttachment", b =>
                {
                    b.HasOne("QBD2.Entities.ScarCar", "ScarCar")
                        .WithMany("ScarCarAttachments")
                        .HasForeignKey("ScarCarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ScarCar");
                });

            modelBuilder.Entity("QBD2.Entities.ScarCarNote", b =>
                {
                    b.HasOne("QBD2.Entities.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QBD2.Entities.ScarCar", "ScarCar")
                        .WithMany("ScarCarNotes")
                        .HasForeignKey("ScarCarId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("ScarCar");

                    b.Navigation("User");
                });

            modelBuilder.Entity("QBD2.Entities.WorkOrder", b =>
                {
                    b.HasOne("QBD2.Entities.BuildTemplate", "BuildTemplate")
                        .WithMany()
                        .HasForeignKey("BuildTemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QBD2.Entities.WorkOrderPriority", "WorkOrderPriority")
                        .WithMany()
                        .HasForeignKey("WorkOrderPriorityID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QBD2.Entities.WorkOrderStatus", "WorkOrderStatus")
                        .WithMany()
                        .HasForeignKey("WorkOrderStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QBD2.Entities.WorkOrderType", "WorkOrderType")
                        .WithMany()
                        .HasForeignKey("WorkOrderTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BuildTemplate");

                    b.Navigation("WorkOrderPriority");

                    b.Navigation("WorkOrderStatus");

                    b.Navigation("WorkOrderType");
                });

            modelBuilder.Entity("QBD2.Entities.WorkOrderPart", b =>
                {
                    b.HasOne("QBD2.Entities.Part", "Part")
                        .WithMany()
                        .HasForeignKey("PartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QBD2.Entities.WorkOrder", "WorkOrder")
                        .WithMany("WorkOrderParts")
                        .HasForeignKey("WorkOrderId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Part");

                    b.Navigation("WorkOrder");
                });

            modelBuilder.Entity("QBD2.Entities.ApplicationUserRole", b =>
                {
                    b.HasOne("QBD2.Entities.ApplicationRole", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QBD2.Entities.ApplicationUser", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("QBD2.Entities.Alert", b =>
                {
                    b.Navigation("PartAlerts");
                });

            modelBuilder.Entity("QBD2.Entities.Deviation", b =>
                {
                    b.Navigation("PartDeviations");
                });

            modelBuilder.Entity("QBD2.Entities.Inspection", b =>
                {
                    b.Navigation("InspectionFailures");
                });

            modelBuilder.Entity("QBD2.Entities.MasterPart", b =>
                {
                    b.Navigation("Alerts");

                    b.Navigation("BuildTemplateParts");

                    b.Navigation("Deviations");
                });

            modelBuilder.Entity("QBD2.Entities.Part", b =>
                {
                    b.Navigation("Deviations");
                });

            modelBuilder.Entity("QBD2.Entities.PartStatus", b =>
                {
                    b.Navigation("Parts");
                });

            modelBuilder.Entity("QBD2.Entities.ScarCar", b =>
                {
                    b.Navigation("ScarCarAttachments");

                    b.Navigation("ScarCarNotes");
                });

            modelBuilder.Entity("QBD2.Entities.WorkOrder", b =>
                {
                    b.Navigation("WorkOrderParts");
                });

            modelBuilder.Entity("QBD2.Entities.ApplicationRole", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("QBD2.Entities.ApplicationUser", b =>
                {
                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
