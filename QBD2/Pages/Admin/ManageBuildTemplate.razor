@page "/managebuildtemplate"
@*@attribute [Authorize(Roles = "Admin")]*@
@using QBD2.Services
@using QBD2.Entities
@using QBD2.Models
@inject BuildTemplateService BuildTemplateService
@inject MasterPartService MasterPartService
@inject IJSRuntime JSRuntime
@inject IToastService toastService
@inject BuildStationService BuildStationService

<style>
    .k-dialog-wrapper {
    position: inherit;   
}
.k-centered {
    transform: translate(5%, -300%);
    width: 500px;
}
.k-window-titlebar.k-dialog-titlebar.k-header {
    border-top-left-radius: 0;
    border-top-right-radius: 0;
    padding: 10px 10px 20px 10px;
}
.k-window-content.k-dialog-content {
    border-radius: 0;
}
label.k-form-label {
    margin-right: 15px;
}
.k-form .k-form-field, .k-form .k-form-field-wrap {
    display: inline-flex;
    width: 100%;
}
.k-actions-start {
    float: right;
}
.k-window-actions span {
    color: #fff;
}
</style>

<div class="row alerts-row">
    <div class="col-md-9">
        <h3 class="alert-title"><i class="fa fa-gift" aria-hidden="true"></i>&nbsp;&nbsp;Build Template</h3>
    </div>
    <div class="col-md-3 add-alrert-btn">
         @if (AddEditBuildTemplateModel == null)
         {
              <TelerikButton Icon="add" OnClick="(() => SelectRecord(null))">Add New Build Template</TelerikButton>
         }
   </div>
</div>
<hr />

 <h3 class="alert-table-title">Listed Build Templates</h3> 
 <div class="al-table">
<TelerikGrid Data="@MyData1"
          Pageable="true"
          Sortable="true"
          FilterMode="@GridFilterMode.FilterRow">
          <DetailTemplate Context="context">
              @{
                  var buildTemplateModel = context as Models.BuildTemplateModel;
                  <TelerikGrid Data="buildTemplateModel.BuildTemplatePartList" Pageable="true" PageSize="5">
                      <GridColumns>
                          <GridColumn Field="MasterPart.PartNumber" Title="Number">
                          <Template Context="myContext">
                          @{
                                var buildTemplatePart = myContext as BuildTemplatePart;
                                if (buildTemplatePart != null && buildTemplatePart.MasterPart != null)
                                {
                                      <lable>@buildTemplatePart.MasterPart.PartNumber</lable>
                                }
                           }
                          </Template>
                          </GridColumn>
                          <GridColumn Field="BuildStation.Name>" Title="Build Station">
                          <Template Context="myContext">
                          @{
                                var buildTemplatePart = myContext as BuildTemplatePart;
                                if (buildTemplatePart != null && buildTemplatePart.BuildStation != null)
                                {
                                      <lable>@buildTemplatePart.BuildStation.Name</lable>
                                }
                           }
                          </Template>
                          </GridColumn>
                          <GridColumn Field="SerialNumberRequired>" Title="Serial Number Required">
                          <Template Context="myContext">
                          @{
                               var buildTemplatePart = myContext as BuildTemplatePart;
                               if (buildTemplatePart != null && buildTemplatePart.SerialNumberRequired == true)
                               {
                                   <lable style="color:green">Yes</lable>
                               }
                               else
                               {
                                   <lable style="color:red;">No</lable>
                               }
                           }   
                          </Template>
                          </GridColumn>
                      </GridColumns>
                  </TelerikGrid>
              }
           </DetailTemplate>
    <GridColumns>
     <GridColumn Field="@(nameof(Models.BuildTemplateModel.Name))" Title="Name" Groupable="false" Filterable="true"/>
     <GridColumn Field="MasterPart.PartNumber"  Title="Number" Groupable="false" />
      @*<GridColumn Field="BuildTemplatePart.SerialNumberRequired" Title="Serial Number Required" Groupable="false" Sortable="true" Filterable="false" Width="200px">
         <Template>
               @{
                   var buildTemplateModel = context as Models.BuildTemplateModel;
                   if (buildTemplateModel != null && buildTemplateModel.BuildTemplatePart.SerialNumberRequired == true)
                   {
                         <lable style="color:green">Yes</lable>
                   }
                   else
                   {
                         <lable style="color:red;">No</lable>
                   }
                 }
         </Template>
     </GridColumn>*@
    @* <GridCommandColumn Width="100px">
         <GridCommandButton Class="edit-btn bgb-none" Icon="" OnClick="@((args)=> SelectRecord(args.Item as Models.BuildTemplateModel))"><i class="fal fa-edit"></i></GridCommandButton>
         <GridCommandButton Class="del-btn bgb-none" Command="Delete" Icon="delete" OnClick="@((args)=> DeleteRecord(args.Item as Models.BuildTemplateModel))"></GridCommandButton>
     </GridCommandColumn>*@
 </GridColumns>
</TelerikGrid>
</div>

<TelerikWindow Visible="@(AddEditBuildTemplateModel != null)" Modal="true" Width="600px" Draggable="false">
	<WindowTitle>
		@{
			if (AddEditBuildTemplateModel.BuildTemplateId == 0)
			{
				<strong>Add new Build Template</strong>
			}
			else
			{
				<strong>Edit Build Template</strong>
			}
		}
	</WindowTitle>
	<WindowContent>
		<EditForm Model="@AddEditBuildTemplateModel" OnValidSubmit="@HandleValidSubmit">
			<DataAnnotationsValidator />

            <div class="row">
					<div class="col-md-12">
						<div class="form-group row">
							<label for="Name" class="col-sm-4 col-form-label">Name </label>
								<div class="col-sm-8">
                                    <TelerikTextBox @bind-Value="@AddEditBuildTemplateModel.Name" Class="form-control"></TelerikTextBox>
								    <ValidationMessage For="@(() => AddEditBuildTemplateModel.Name)" style="width:unset!important;"></ValidationMessage>
								</div>
						</div>
					</div>
		    </div>

             <div class="row">
					<div class="col-md-12">
						<div class="form-group row">
							<label for="MasterPartId" class="col-sm-4 col-form-label">Part </label>
								<div class="col-sm-8">
                                     <TelerikAutoComplete Data="@MasterParts" @bind-Value="@selectedMasterPart" Class="form-control"
                                        ValueField="@(nameof(MasterPart.PartNumber))"
                                        Filterable="true" MinLength="3"
                                        OnChange="@MyOnChangeHandler"
                                        ClearButton="true"/>
								    <ValidationMessage For="@(() => AddEditBuildTemplateModel.MasterPartId)" style="width:unset!important;"></ValidationMessage>
								</div>
						</div>
					</div>
				</div>

                <div class="row">
					<div class="col-md-12">
						<div class="form-group row">
							<label for="BuildStationId" class="col-sm-4 col-form-label">Build Station </label>
								<div class="col-sm-8">
									<TelerikDropDownList @bind-Value="@AddEditBuildTemplateModel.BuildStationId" Width="100%"
								                         DefaultText="-select-" Data="@dataBuildStationDropdown" TextField="DropText" ValueField="DropValue" Class="form-control" Enabled="true">
								    </TelerikDropDownList>
								    <ValidationMessage For="@(() => AddEditBuildTemplateModel.BuildStationId)" style="width:unset!important;"></ValidationMessage>
								</div>
						</div>
					</div>
				</div>

                <div class="row">
					<div class="col-md-12">
						<div class="form-group row">
							<label for="SerialNumberRequired" class="col-sm-4 col-form-label">Serial Number Required </label>
								<div class="col-sm-8">
                                    <ul class="switch-btn dev">
                                        <li class="@AddActiveCssClass" @onclick="(() => OnSerialNumberRequiredChangeHandler(true))"> Yes</li>
                                        <li class="@AddInActiveCssClass" @onclick="(() => OnSerialNumberRequiredChangeHandler(false))"> No</li>
                                    </ul>
								    <ValidationMessage For="@(() => AddEditBuildTemplateModel.SerialNumberRequired)" style="width:unset!important;"></ValidationMessage>
								</div>
						</div>
					</div>
				</div>

				<br/>

				<div class="form-row">
					@{
						if (AddEditBuildTemplateModel.BuildTemplateId == 0)
						{
							<TelerikButton Icon="save" ButtonType="@ButtonType.Submit">Save</TelerikButton>
						}
						else
						{
							<TelerikButton Icon="save" ButtonType="@ButtonType.Submit">Update</TelerikButton>
						}
					}
					&nbsp;
					<TelerikButton Icon="cancel" OnClick="(() => btnCancelBuildTemplateOnClick())" ButtonType="@ButtonType.Button">Cancel</TelerikButton>
				</div>
		</EditForm>
	</WindowContent>
</TelerikWindow>

@code {

    List<BuildTemplate> MyData { get; set; }

    List<Models.BuildTemplateModel> MyData1 { get; set; }

    IEnumerable<MasterPart> MasterParts { get; set; }

    List<Models.DropDownBind> dataBuildStationDropdown { get; set; }

    string selectedMasterPart { get; set; }

    AddEditBuildTemplateModel AddEditBuildTemplateModel { get; set; }

    Models.BuildTemplateModel OriginalRecord { get; set; }

    EditContext ECAddEditBuildTemplate { get; set; }

    string AddActiveCssClass { get; set; } = "active";

    string AddInActiveCssClass { get; set; } 

    protected override async Task OnInitializedAsync()
    {
        await GetGridData();
    }

    async Task GetDropDownData()
    {
        MasterParts = MasterPartService.GetAllMasterParts();
        dataBuildStationDropdown = BuildStationService.DropDownData();
    }

    async Task GetGridData()
    {
        await GetDropDownData();
        MyData1 = await BuildTemplateService.ReadBuildTemplate();
        MyData = await BuildTemplateService.Read();
    }

    async Task UpdateHandler(GridCommandEventArgs args)
    {
        BuildTemplate item = (BuildTemplate)args.Item;

        await BuildTemplateService.Update(item);

        await GetGridData();
    }

    async Task DeleteHandler(GridCommandEventArgs args)
    {
        BuildTemplate item = (BuildTemplate)args.Item;

        await BuildTemplateService.Delete(item);

        await GetGridData();
    }

    async Task CreateHandler(GridCommandEventArgs args)
    {
        BuildTemplate item = (BuildTemplate)args.Item;

        await BuildTemplateService.Create(item);

        await GetGridData();
    }

    async Task CancelHandler(GridCommandEventArgs args)
    {
        BuildTemplate item = (BuildTemplate)args.Item;
    }


    public async Task SelectRecord(Models.BuildTemplateModel buildTemplatePartModel)
    {
        await JSRuntime.InvokeVoidAsync("ModelBodyOverflowShown");
        await GetDropDownData();
        OriginalRecord = null;
        if (buildTemplatePartModel != null)
        {
            OriginalRecord = buildTemplatePartModel;
            AddEditBuildTemplateModel = new AddEditBuildTemplateModel()
            {
                BuildTemplateId = OriginalRecord.BuildTemplateId,
                Name = OriginalRecord.Name,
                MasterPartId = OriginalRecord.MasterPartId,
                BuildTemplatePartId = OriginalRecord.BuildTemplatePartId,
                BuildStationId = OriginalRecord.BuildTemplatePart.BuildStationId,
                SerialNumberRequired = OriginalRecord.BuildTemplatePart.SerialNumberRequired
            };
        }
        else
        {
            AddEditBuildTemplateModel = new AddEditBuildTemplateModel();
            AddEditBuildTemplateModel.BuildTemplateId = 0;
        }

        if (AddEditBuildTemplateModel.SerialNumberRequired == true)
        {
            AddActiveCssClass = "active";
            AddInActiveCssClass = string.Empty;
        }
        else if(AddEditBuildTemplateModel.SerialNumberRequired == false)
        { 
            AddActiveCssClass = string.Empty;
            AddInActiveCssClass = "active";
        }

        if (AddEditBuildTemplateModel != null)
        {
            ECAddEditBuildTemplate = new EditContext(AddEditBuildTemplateModel);
        }
        StateHasChanged();
    }

    public async Task HandleValidSubmit()
    {
        if (AddEditBuildTemplateModel != null)
        {
            if (AddEditBuildTemplateModel.MasterPartId == 0)
            {
                toastService.ShowError("Please Select Master Part", "Error");
                return;
            }

            var result = await BuildTemplateService.Save(AddEditBuildTemplateModel);
            if (result != null)
            {
                if (result != null && result.Success)
                {
                    toastService.ShowInfo(result.Message, "Info");
                    await btnCancelBuildTemplateOnClick();
                    await GetGridData();
                    StateHasChanged();
                }
                else
                {
                    toastService.ShowError(result.Message, "Error");
                }
            }
        }
    }

    public async Task DeleteRecord(Models.BuildTemplateModel item)
    {
        //if (item != null)
        //{
        //    await BuildTemplatePartService.Delete(item);
        //    await GetBuildTemplatePartGridData();
        //}
    }

    public async Task btnCancelBuildTemplateOnClick()
    {
        AddEditBuildTemplateModel = null;
        selectedMasterPart = null;
        await JSRuntime.InvokeVoidAsync("ModelBodyOverflowHidden");
         await GetGridData();
         StateHasChanged();
    }

    public async void OnSerialNumberRequiredChangeHandler(bool value)
    {
        if (value == true)
        {
            AddEditBuildTemplateModel.SerialNumberRequired = true;
            AddActiveCssClass = "active";
            AddInActiveCssClass = string.Empty;
        }
        else if(value == false)
        { 
            AddEditBuildTemplateModel.SerialNumberRequired = false;
            AddActiveCssClass = string.Empty;
            AddInActiveCssClass = "active";
        }
    }

    private void MyOnChangeHandler(object theUserChoice)
    {
        var result = string.Format("The user confirmed: {0}", (string)theUserChoice);

        MasterPart selectedMasterPart = MasterParts.Where(x => x.PartNumber == (string)theUserChoice).FirstOrDefault();
        if(selectedMasterPart != null)
        {
            if (AddEditBuildTemplateModel == null)
            {
                AddEditBuildTemplateModel = new AddEditBuildTemplateModel();
            }
            AddEditBuildTemplateModel.MasterPartId = selectedMasterPart.MasterPartId;
            StateHasChanged();
        }
    }
}