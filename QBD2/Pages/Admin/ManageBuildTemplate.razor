@page "/managebuildtemplate"
@*@attribute [Authorize(Roles = "Admin")]*@
@using QBD2.Services
@using QBD2.Entities
@using QBD2.Models
@inject BuildTemplateService BuildTemplateService
@inject MasterPartService MasterPartService
@inject IJSRuntime JSRuntime
@inject IToastService toastService
@inject BuildStationService BuildStationService
<style>

    .btn-width {
        width: auto !important;
    }
</style>
@if (AddEditBuildTemplateModel == null)
{
    <div class="row alerts-row">
        <div class="col-md-9">
            <h3 class="alert-title"><i class="fa fa-gift" aria-hidden="true"></i>&nbsp;&nbsp;Build Template</h3>
        </div>
        <div class="col-md-3 add-alrert-btn">
            <TelerikButton Icon="add" OnClick="(() => OnAddEditBuildTemplate())">Add New Build Template</TelerikButton>
        </div>
    </div>
    <hr />
    <h3 class="alert-table-title">Build Templates</h3>
    <div class="al-table">
        <TelerikGrid Data="@BuildTemplatesGridData" Pageable="true" Sortable="true" FilterMode="@GridFilterMode.FilterRow">
            <DetailTemplate Context="context">
                @{
                    var buildTemplateModel = context as Models.BuildTemplateModel;
                     <TelerikGrid Data="buildTemplateModel.BuildTemplateStationList" Pageable="true" PageSize="5">
                        <GridColumns>
                            <GridColumn Field="BuildStation.Name" Title="Build Station" />
                            <GridColumn Field="OrderNumber" Title="Order/Sequence" />
                        </GridColumns>
                    </TelerikGrid>

                    <TelerikGrid Data="buildTemplateModel.BuildTemplatePartList" Pageable="true" PageSize="5">
                        <GridColumns>
                            <GridColumn Field="MasterPart.PartNumber" Title="Number" />
                            <GridColumn Field="BuildStation.Name" Title="Build Station" />
                            <GridColumn Field="SerialNumberRequired" Title="Serial Number Required" TextAlign="ColumnTextAlign.Left">
                                <Template Context="childContext">
                                    @{
                                        var buildTemplatePart = childContext as BuildTemplatePart;
                                        <lable style="color:@(buildTemplatePart.SerialNumberRequired?"green":"red")">@(buildTemplatePart.SerialNumberRequired ? "Yes" : "No")</lable>
                                    }
                                </Template>
                            </GridColumn>
                        </GridColumns>
                    </TelerikGrid>
                }
            </DetailTemplate>
            <GridColumns>
                <GridColumn Field="Name" Title="Name" Groupable="false" />
                <GridColumn Field="MasterPart.PartNumber" Title="Number" Groupable="false" />
                <GridColumn Field="BuildStation.Name" Title="Build Station" Groupable="false" TextAlign="ColumnTextAlign.Left" />
            </GridColumns>
        </TelerikGrid>
    </div>
}
else
{
    <div class="row alerts-row">
        <div class="col-md-9">
            <h3 class="alert-title"><label @onclick="(()=> OnCancelAddEditBuildTemplate(false))" style="cursor:pointer;"><i class="fas fa-chevron-left"></i>&nbsp;&nbsp;</label><i class="fa fa-edit" aria-hidden="true"></i>&nbsp;&nbsp;Add New Build Template</h3>
        </div>
    </div>
    <hr />
    <div class="form-group">
        <div class="col-sm-9">
            <EditForm EditContext="@ECAddEditBuildTemplate">
                <DataAnnotationsValidator />
                <div class="row m-tb">
                    <label for="Name" class="col-sm-3 col-form-label">Name</label>
                    <div class="col-sm-9">
                        <TelerikTextBox @bind-Value="@AddEditBuildTemplateModel.Name" Class="form-control"></TelerikTextBox>
                        <ValidationMessage For="@(() => AddEditBuildTemplateModel.Name)"></ValidationMessage>
                    </div>
                </div>
                <div class="row m-tb">
                    <label for="PartNumber" class="col-sm-3 col-form-label">Part Number</label>
                    <div class="col-sm-9">
                        <TelerikAutoComplete Data="@MasterPartDropdownData" @bind-Value="@AddEditBuildTemplateModel.MasterPartNumber"
                                         ValueField="@(nameof(MasterPart.PartNumber))" ItemHeight="35" ScrollMode="@DropDownScrollMode.Virtual"
                                         PageSize="10" Filterable="true" MinLength="3" ClearButton="true"
                                         Placeholder="Type Part Number And Select Part" />
                        <ValidationMessage For="@(() => AddEditBuildTemplateModel.MasterPartNumber)"></ValidationMessage>
                    </div>
                </div>
                <div class="row m-tb">
                    <label for="PartNumber" class="col-sm-3 col-form-label">Build Station</label>
                    <div class="col-sm-9">
                        <TelerikDropDownList @bind-Value="@AddEditBuildTemplateModel.BuildStationId" DefaultText="Select Build Station"
                                         Data="@BuildStationDropdownData" TextField="DropText" ValueField="DropValue">
                        </TelerikDropDownList>
                        <ValidationMessage For="@(() => AddEditBuildTemplateModel.BuildStationId)"></ValidationMessage>
                    </div>
                </div>
            </EditForm>

            <div class="row m-tb">
                <div class="col-sm-12">
                    <TelerikGrid Data="@AddEditBuildTemplateModel.AddEditBuildTemplateStationModels"
                             Sortable="true"
                             Pageable="true"
                             EditMode="Telerik.Blazor.GridEditMode.Inline"
                             OnDelete=@OnDeleteStation
                             OnUpdate="@OnUpdateStation"
                             OnEdit="@OnEditStation"
                             OnCreate="@OnCreateStation"
                             OnAdd="@OnAddStation">
                        <GridToolBar>
                            <GridCommandButton Command="Add" Icon="add">Add Build Station</GridCommandButton>
                        </GridToolBar>
                        <GridColumns>
                            <GridColumn Field="BuildStationName" Title="Build Station" Groupable="false">
                                <EditorTemplate>
                                    @{
                                        var station = context as AddEditBuildTemplateStationModel;
                                        <TelerikDropDownList @bind-Value="@station.BuildStationId" DefaultText="Select Build Station"
                                                     Data="@BuildStationDropdownData" TextField="DropText" ValueField="DropValue">
                                        </TelerikDropDownList>
                                    }
                                </EditorTemplate>
                            </GridColumn>
                            <GridColumn Field="OrderNumber" Title="Order/Sequence" Groupable="false" Width="200px">
                                <Template>
                                    @{
                                        var station = context as AddEditBuildTemplateStationModel;
                                        <lable>@station.OrderNumber</lable>
                                    }
                                </Template>
                                <EditorTemplate>
                                    @{
                                        var station = context as AddEditBuildTemplateStationModel;
                                        <TelerikNumericTextBox @bind-Value="@station.OrderNumber" Placeholder="Enter order number" Decimals="0" Min="0"></TelerikNumericTextBox>
                                    }
                                </EditorTemplate>
                            </GridColumn>
                            <GridCommandColumn Width="200px">
                                <GridCommandButton Command="Save" Icon="save" ShowInEdit="true">Update</GridCommandButton>
                                <GridCommandButton Command="Edit" Icon="edit">Edit</GridCommandButton>
                                <GridCommandButton Command="Delete" Icon="delete">Delete</GridCommandButton>
                                <GridCommandButton Command="Cancel" Icon="cancel" ShowInEdit="true">Cancel</GridCommandButton>
                            </GridCommandColumn>
                        </GridColumns>
                    </TelerikGrid>
                </div>
            </div>
            <div class="row m-tb">
                <div class="col-sm-12">
                    <TelerikGrid Data="@AddEditBuildTemplateModel.AddEditBuildTemplatePartModels"
                             Sortable="true"
                             Pageable="true"
                             EditMode="Telerik.Blazor.GridEditMode.Inline"
                             OnDelete=@OnDeleteChildPart
                             OnUpdate="@OnUpdateChildPart"
                             OnEdit="@OnEditChildPart"
                             OnCreate="@OnCreateChildPart"
                             OnAdd="@OnAddChildPart">
                        <GridToolBar>
                            <GridCommandButton Command="Add" Icon="add">Add Part</GridCommandButton>
                        </GridToolBar>
                        <GridColumns>
                            <GridColumn Field="MasterPartNumber" Title="Part Number" Groupable="false">
                                <EditorTemplate>
                                    @{
                                        var childPart = context as AddEditBuildTemplatePartModel;
                                        <TelerikAutoComplete Data="@MasterPartDropdownData" @bind-Value="@childPart.MasterPartNumber"
                                                     ValueField="@(nameof(MasterPart.PartNumber))" ItemHeight="35"
                                                     ScrollMode="@DropDownScrollMode.Virtual" PageSize="10" Filterable="true"
                                                     MinLength="3" ClearButton="true" Placeholder="Type Part Number And Select Part">
                                        </TelerikAutoComplete>
                                    }
                                </EditorTemplate>
                            </GridColumn>
                            <GridColumn Field="BuildStationName" Title="Build Station" Groupable="false">
                                <EditorTemplate>
                                    @{
                                        var childPart = context as AddEditBuildTemplatePartModel;
                                        <TelerikDropDownList @bind-Value="@childPart.BuildStationId" DefaultText="Select Build Station"
                                                     Data="@BuildStationDropdownData" TextField="DropText" ValueField="DropValue">
                                        </TelerikDropDownList>
                                    }
                                </EditorTemplate>
                            </GridColumn>
                            <GridColumn Field="SerialNumberRequired" Title="Serial Number Required" Groupable="false" Width="180px">
                                <Template>
                                    @{
                                        var childPart = context as AddEditBuildTemplatePartModel;
                                        <lable style="color:@(childPart.SerialNumberRequired?"green":"red")">@(childPart.SerialNumberRequired ? "Yes" : "No")</lable>
                                    }
                                </Template>
                                <EditorTemplate>
                                    @{
                                        var childPart = context as AddEditBuildTemplatePartModel;
                                        <ul class="switch-btn">
                                            <li class="@(childPart.SerialNumberRequired?"active":"")" @onclick="(() => {childPart.SerialNumberRequired=true;})"><i class="fa-regular fa-circle-check"></i> Yes</li>
                                            <li class="failed @(childPart.SerialNumberRequired?"":"active")" @onclick="(() => {childPart.SerialNumberRequired=false;})"><i class="fa-light fa-circle-xmark"></i> No</li>
                                        </ul>
                                    }
                                </EditorTemplate>
                            </GridColumn>
                            <GridCommandColumn Width="200px">
                                <GridCommandButton Command="Save" Icon="save" ShowInEdit="true">Update</GridCommandButton>
                                <GridCommandButton Command="Edit" Icon="edit">Edit</GridCommandButton>
                                <GridCommandButton Command="Delete" Icon="delete">Delete</GridCommandButton>
                                <GridCommandButton Command="Cancel" Icon="cancel" ShowInEdit="true">Cancel</GridCommandButton>
                            </GridCommandColumn>
                        </GridColumns>
                    </TelerikGrid>
                </div>
            </div>
            <hr style="margin-top: 60px;" />
            <div class="row m-tb">
                <div class="col-sm-12 add-alrert-btn">
                    <TelerikButton Icon="save" Class="btn-width" Enabled=@(!isSaveClick) OnClick="(() => OnSaveBuldTemplate())">Save</TelerikButton>
                    <TelerikButton Icon="cancel" Class="btn-width" OnClick="(() => OnCancelAddEditBuildTemplate(false))">Cancel</TelerikButton>
                </div>
            </div>
        </div>
    </div>
}

@code
{
    List<Models.BuildTemplateModel> BuildTemplatesGridData { get; set; }
    AddEditBuildTemplateModel AddEditBuildTemplateModel { get; set; }
    IEnumerable<MasterPart> MasterPartDropdownData { get; set; }
    List<Models.DropDownBind> BuildStationDropdownData { get; set; }
    AddEditBuildTemplatePartModel SelectedChildPart { get; set; }
    AddEditBuildTemplateStationModel SelectedStation { get; set; }
    EditContext ECAddEditBuildTemplate { get; set; }
    bool isSaveClick { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await GetBuildTemplatesGridData();
    }

    protected async Task GetBuildTemplatesGridData()
    {
        BuildTemplatesGridData = await BuildTemplateService.Read();
    }

    protected async Task OnAddEditBuildTemplate()
    {
        AddEditBuildTemplateModel = new AddEditBuildTemplateModel();
        ECAddEditBuildTemplate = new EditContext(AddEditBuildTemplateModel);
        BuildStationDropdownData = await BuildStationService.DropDownData();
        MasterPartDropdownData = MasterPartService.GetAllMasterParts();
    }

    protected async Task OnCancelAddEditBuildTemplate(bool isSave)
    {
        AddEditBuildTemplateModel = null;
        if (isSave)
        {
            await GetBuildTemplatesGridData();
        }
    }

    protected void OnAddChildPart(GridCommandEventArgs args)
    {
        Models.AddEditBuildTemplatePartModel item = (Models.AddEditBuildTemplatePartModel)args.Item;
        var lastItem = AddEditBuildTemplateModel.AddEditBuildTemplatePartModels.LastOrDefault();
        if (lastItem != null)
        {
            item.BuildStationId = lastItem.BuildStationId;
            item.SerialNumberRequired = lastItem.SerialNumberRequired;
        }
        else if (AddEditBuildTemplateModel.BuildStationId > 0)
        {
            item.BuildStationId = AddEditBuildTemplateModel.BuildStationId;
        }
    }

    protected void OnDeleteChildPart(GridCommandEventArgs args)
    {
        Models.AddEditBuildTemplatePartModel item = (Models.AddEditBuildTemplatePartModel)args.Item;
        AddEditBuildTemplateModel.AddEditBuildTemplatePartModels.Remove(item);
    }

    protected void OnUpdateChildPart(GridCommandEventArgs args)
    {
        Models.AddEditBuildTemplatePartModel item = (Models.AddEditBuildTemplatePartModel)args.Item;
        MasterPart selectedMasterPart = MasterPartDropdownData.FirstOrDefault(x => x.PartNumber == item.MasterPartNumber);
        if (selectedMasterPart == null)
        {
            toastService.ShowError("Please Select Valid Part Number.", "Error");
            args.IsCancelled = true;
            return;
        }

        item.BuildStationName = BuildStationDropdownData.FirstOrDefault(x => x.DropValue == item.BuildStationId.Value)?.DropText;
        item.MasterPartId = selectedMasterPart.MasterPartId;

        int index = AddEditBuildTemplateModel.AddEditBuildTemplatePartModels.IndexOf(SelectedChildPart);
        if (index == -1)
        {
            toastService.ShowError("Record Not Found.", "Error");
            args.IsCancelled = true;
            return;
        }

        AddEditBuildTemplateModel.AddEditBuildTemplatePartModels[index] = item;
    }

    protected void OnEditChildPart(GridCommandEventArgs args)
    {
        SelectedChildPart = (Models.AddEditBuildTemplatePartModel)args.Item;
    }

    protected void OnCreateChildPart(GridCommandEventArgs args)
    {
        Models.AddEditBuildTemplatePartModel item = (Models.AddEditBuildTemplatePartModel)args.Item;
        MasterPart selectedMasterPart = MasterPartDropdownData.FirstOrDefault(x => x.PartNumber == item.MasterPartNumber);
        if (selectedMasterPart == null)
        {
            toastService.ShowError("Please Select Valid Part Number.", "Error");
            args.IsCancelled = true;
            return;
        }

        item.BuildStationName = BuildStationDropdownData.FirstOrDefault(x => x.DropValue == item.BuildStationId.Value)?.DropText;
        item.MasterPartId = selectedMasterPart.MasterPartId;

        AddEditBuildTemplateModel.AddEditBuildTemplatePartModels.Add(item);
    }

    protected void OnAddStation(GridCommandEventArgs args)
    {

    }

    protected void OnDeleteStation(GridCommandEventArgs args)
    {
        Models.AddEditBuildTemplateStationModel item = (Models.AddEditBuildTemplateStationModel)args.Item;
        AddEditBuildTemplateModel.AddEditBuildTemplateStationModels.Remove(item);
    }

    protected void OnUpdateStation(GridCommandEventArgs args)
    {
        Models.AddEditBuildTemplateStationModel item = (Models.AddEditBuildTemplateStationModel)args.Item;
        if (AddEditBuildTemplateModel.AddEditBuildTemplateStationModels.Any(x => x.BuildStationId == item.BuildStationId && x.BuildStationId != SelectedStation.BuildStationId))
        {
            toastService.ShowError("Build station already exists.", "Error");
            args.IsCancelled = true;
            return;
        }

        item.BuildStationName = BuildStationDropdownData.FirstOrDefault(x => x.DropValue == item.BuildStationId.Value)?.DropText;

        int index = AddEditBuildTemplateModel.AddEditBuildTemplateStationModels.IndexOf(SelectedStation);
        if (index == -1)
        {
            toastService.ShowError("Record Not Found.", "Error");
            args.IsCancelled = true;
            return;
        }

        AddEditBuildTemplateModel.AddEditBuildTemplateStationModels[index] = item;
    }

    protected void OnEditStation(GridCommandEventArgs args)
    {
        SelectedStation = (Models.AddEditBuildTemplateStationModel)args.Item;
    }

    protected void OnCreateStation(GridCommandEventArgs args)
    {
        Models.AddEditBuildTemplateStationModel item = (Models.AddEditBuildTemplateStationModel)args.Item;

        if (AddEditBuildTemplateModel.AddEditBuildTemplateStationModels.Any(x => x.BuildStationId == item.BuildStationId))
        {
            toastService.ShowError("Build station already exists.", "Error");
            args.IsCancelled = true;
            return;
        }

        item.BuildStationName = BuildStationDropdownData.FirstOrDefault(x => x.DropValue == item.BuildStationId.Value)?.DropText;

        AddEditBuildTemplateModel.AddEditBuildTemplateStationModels.Add(item);
    }

    protected async Task OnSaveBuldTemplate()
    {
        if (!string.IsNullOrWhiteSpace(AddEditBuildTemplateModel.MasterPartNumber))
        {
            MasterPart selectedMasterPart = MasterPartDropdownData.FirstOrDefault(x => x.PartNumber == AddEditBuildTemplateModel.MasterPartNumber);
            if (selectedMasterPart == null)
            {
                toastService.ShowError("Please Select Valid Part Number.", "Error");
                return;
            }
            AddEditBuildTemplateModel.MasterPartId = selectedMasterPart.MasterPartId;
        }

        var isValid = ECAddEditBuildTemplate.Validate();
        if (isValid)
        {
            try
            {
                if (isSaveClick)
                    return;

                isSaveClick = true;
                var result = await BuildTemplateService.Save(AddEditBuildTemplateModel);
                if (result != null)
                {
                    if (result.Success)
                    {
                        toastService.ShowSuccess(result.Message, "Success");
                        await OnCancelAddEditBuildTemplate(true);
                    }
                    else
                    {
                        toastService.ShowError(result.Message, "Error");
                    }
                }
            }
            catch
            {
                toastService.ShowError("Error while saving Build Template.", "Error");
            }
            finally
            {
                isSaveClick = false;
                StateHasChanged();
            }
        }
    }
}