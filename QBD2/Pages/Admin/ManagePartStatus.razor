@page "/managepartstatus"
@attribute [Authorize(Roles = "Admin")]
@using QBD2.Services
@using QBD2.Entities
@inject PartStatusService PartStatusService

<style>
    .k-dialog-wrapper {
    position: inherit;   
}
.k-centered {
    transform: translate(5%, -300%);
    width: 320px;
}
.k-window-titlebar.k-dialog-titlebar.k-header {
    border-top-left-radius: 0;
    border-top-right-radius: 0;
    padding: 10px 10px 20px 10px;
}
.k-window-content.k-dialog-content {
    border-radius: 0;
}
label.k-form-label {
    margin-right: 15px;
}
.k-form .k-form-field, .k-form .k-form-field-wrap {
    display: inline-flex;
    width: 100%;
}
.k-actions-start {
    float: right;
}
.k-window-actions span {
    color: #fff;
}
</style>

<h3>Part Status</h3>

<TelerikGrid Data="@MyData" 
             Pageable="true" Sortable="true" FilterMode="Telerik.Blazor.GridFilterMode.FilterRow"
             Resizable="true" 
             EditMode="Telerik.Blazor.GridEditMode.Popup"
             OnUpdate=@UpdateHandler
             OnDelete=@DeleteHandler
             OnCreate=@CreateHandler>
             <GridToolBar>
                <GridCommandButton Command="Add" Icon="add">Add a Part Status</GridCommandButton>
            </GridToolBar>
            <GridColumns>
                <GridColumn Field="@(nameof(PartStatus.Name))" Title="Name" Groupable="false" />
                        <GridCommandColumn>
                    <GridCommandButton Command="Save" Icon="save" ShowInEdit="true">Update</GridCommandButton>
                    <GridCommandButton Command="Edit" Icon="edit">Edit</GridCommandButton>
                    <GridCommandButton Command="Delete" Icon="delete">Delete</GridCommandButton>
                    <GridCommandButton Command="Cancel" Icon="cancel" ShowInEdit="true">Cancel</GridCommandButton>
                </GridCommandColumn>
            </GridColumns>
</TelerikGrid>

@code {

    List<PartStatus> MyData { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await GetGridData();
    }

    async Task GetGridData()
    {
        MyData = await PartStatusService.Read();
    }

    async Task UpdateHandler(GridCommandEventArgs args)
    {
        PartStatus item = (PartStatus)args.Item;

        await PartStatusService.Update(item);

        await GetGridData();
    }

    async Task DeleteHandler(GridCommandEventArgs args)
    {
        PartStatus item = (PartStatus)args.Item;

        await PartStatusService.Delete(item);

        await GetGridData();
    }

    async Task CreateHandler(GridCommandEventArgs args)
    {
        PartStatus item = (PartStatus)args.Item;

        await PartStatusService.Create(item);

        await GetGridData();
    }

    async Task CancelHandler(GridCommandEventArgs args)
    {
        PartStatus item = (PartStatus)args.Item;
    }
}