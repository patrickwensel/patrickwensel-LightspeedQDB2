@page "/manageproductfamily"
@using QBD2.Services
@using QBD2.Entities
@inject ProductFamilyService ProductFamilyService

<h3>Product Family</h3>

<TelerikGrid Data="@MyData" Height="400px"
             Pageable="true" Sortable="true" FilterMode="Telerik.Blazor.GridFilterMode.FilterRow"
             Resizable="true" 
             EditMode="Telerik.Blazor.GridEditMode.Popup"
             OnUpdate=@UpdateHandler
             OnDelete=@DeleteHandler
             OnCreate=@CreateHandler
                >
                 <GridToolBar>
        <GridCommandButton Command="Add" Icon="add">Add a Product Family</GridCommandButton>
    </GridToolBar>
    <GridColumns>
        <GridColumn Field="@(nameof(ProductFamily.Name))" Title="Name" Groupable="false" />
                <GridCommandColumn>
            <GridCommandButton Command="Save" Icon="save" ShowInEdit="true">Update</GridCommandButton>
            <GridCommandButton Command="Edit" Icon="edit">Edit</GridCommandButton>
            <GridCommandButton Command="Delete" Icon="delete">Delete</GridCommandButton>
            <GridCommandButton Command="Cancel" Icon="cancel" ShowInEdit="true">Cancel</GridCommandButton>
        </GridCommandColumn>
    </GridColumns>
</TelerikGrid>

@code {

    List<ProductFamily> MyData { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await GetGridData();
    }

    async Task GetGridData()
    {
        MyData = await ProductFamilyService.Read();
    }

    async Task UpdateHandler(GridCommandEventArgs args)
    {
        ProductFamily item = (ProductFamily)args.Item;

        await ProductFamilyService.Update(item);

        await GetGridData();
    }

    async Task DeleteHandler(GridCommandEventArgs args)
    {
        ProductFamily item = (ProductFamily)args.Item;

        await ProductFamilyService.Delete(item);

        await GetGridData();
    }

    async Task CreateHandler(GridCommandEventArgs args)
    {
        ProductFamily item = (ProductFamily)args.Item;

        await ProductFamilyService.Create(item);

        await GetGridData();
    }

    async Task CancelHandler(GridCommandEventArgs args)
    {
        ProductFamily item = (ProductFamily)args.Item;

        await Task.Delay(1000); //simulate actual long running async operation
    }


}
