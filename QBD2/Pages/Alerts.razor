@page "/alerts"
@using QBD2.Services
@using QBD2.Entities
@using QBD2.Models
@inject AlertService AlertService
@inject MasterPartService MasterPartService
@inject PartService PartService
@inject ExcelUploadService ExcelUploadService
@inject IToastService toastService
@inject NavigationManager NavigationManager
@inject BlobService BlobService
@inject IJSRuntime JSRuntime

<style>
    table, th, td {
        border: 2px solid;
    }

    .RightButton {
        height: 38px;
        width: 75px;
        margin-left: -32px;
    }

    .Width200 {
        width: 200px;
        left: 117px;
    }

    .SaveButton {
        float: right;
        width: 100px;
        left: 72%;
    }
</style>
<div class="row alerts-row">
    <div class="col-md-8">
        <h3 class="alert-title"><i class="fas fa-chevron-left"></i> <i class="fa fa-bell" aria-hidden="true"></i>
            @if (AddEditAlert != null && AddEditAlert.AlertId == 0)
            {
                <text> Add New Alert</text>
            }
            else if(AddEditAlert != null && AddEditAlert.AlertId > 0)
            {
                <text> Edit Alert</text>
            }
            else
            {
                 <text> Alerts</text>
            }
        </h3>
    </div>
    <div class="col-md-4 add-alrert-btn">
         @if (AddEditAlert == null)
         {
             <TelerikButton Icon="add" @onclick="(() => SelectRecord(null))">Add new Alert</TelerikButton>
         }
    </div>
</div>

<hr />

@if (AddEditAlert == null)
{
    <h3 class="alert-table-title">Listed Alerts</h3>
    <div class="al-table">
    <TelerikGrid Data="@GridData"
             Pageable="true"
             Sortable="true"
             FilterMode="@GridFilterMode.FilterRow">
        
         
             <GridColumns>
            <GridColumn Field="@(nameof(Alert.DateCreated))" Title="Date Created" DisplayFormat="{0:dd-MM-yyyy}"/>
            <GridColumn Field="@(nameof(Alert.Title))" Title="Title" Filterable="false"/>
            <GridColumn Field="@(nameof(Alert.MasterPartNumber))" Title="Part Number" Filterable="false"/>
            <GridColumn Field="@(nameof(Alert.MasterPartDescription))" Title="Description" Filterable="false"/>
            <GridCommandColumn Width="100px">
                 <GridCommandButton Class="edit-btn bgb-none" Icon="" OnClick="@((args)=> SelectRecord(args.Item as Alert))"><i class="fal fa-edit"></i></GridCommandButton>
                 <GridCommandButton Class="del-btn bgb-none" Command="Delete" Icon="delete"></GridCommandButton>
            </GridCommandColumn>
        </GridColumns>
    </TelerikGrid>
    </div>
}

@if (AddEditAlert != null)
{
    <br />
    <TelerikAutoComplete Data="@MasterParts" @bind-Value="@selectedMasterPart"
                     ValueField="@( nameof(MasterPart.PartNumber) )"
                     Filterable="true" MinLength="3"
                     OnChange="@MyOnChangeHandler"
                     ClearButton="true" />

    <EditForm EditContext="@ECAddEditAlert">
        <DataAnnotationsValidator />

        <div class="form-group row">
            <label for="PortDescription" class="col-sm-2 col-form-label">Part Description</label>
            <div class="col-md-10">
                <label style="padding-top:10px;">@selectedMasterPartDescription</label>
            </div>
        </div>

         <div class="form-group row">
          <div class="col-md-6">
            <div class="row">
            <label for="Title" class="col-md-3 col-form-label">Title </label>
            <div class="col-md-9">
            <TelerikTextBox @bind-Value="@AddEditAlert.Title" Class="form-control"></TelerikTextBox>
            <ValidationMessage For="@(() => AddEditAlert.Title)"></ValidationMessage></div>
            </div>
          </div>

          <div class="col-md-6">
          <div class="row">
            <label for="ExpirationDate" class="col-md-4 col-form-label">Expiration Date </label>
            <div class="col-md-8">
            <TelerikDatePicker @bind-Value="@AddEditAlert.ExpirationDate" Class="form-control" @ref="theDatePickerExpirationDate" Format="dd/MM/yyyy"></TelerikDatePicker>
            <ValidationMessage For="@(() => AddEditAlert.ExpirationDate)"></ValidationMessage></div>
          </div>
            </div>
         </div>
            
        

        <div class="form-group row">          
            <label for="ReasonforManufacturingDeviation" class="col-md-3 col-form-label">Reason for Manufacturing Deviation</label>
            <div class="col-md-9">
            <textarea @bind-value="AddEditAlert.ReasonforManufacturingDeviation" class="form-control" rows="8" @bind-value:event="oninput"></textarea>
            <ValidationMessage For="@(() => AddEditAlert.ReasonforManufacturingDeviation)"></ValidationMessage>
            </div>
        </div>
       

        <br />
        <div class="row">
            <div class="col-md-12">
                <hr>
                <h5>Affected Serial Numbers</h5>
                
            </div>
        </div>

        <div class="row">
            <div class="col-md-6">
                 <TelerikTabStrip @bind-ActiveTabIndex="@ActiveTabIndex" @ref="mySerialNumberTabStrip">
                    <TabStripTab Title="Manually">
                        @if (RangeAddPartsToAlertError != null && RangeAddPartsToAlertError.Count() > 0)
                        {
                            <div class="row">
                                @foreach(var item in RangeAddPartsToAlertError)
                                {
                                    <label class="text-danger">@item.Error</label><br />
                                }
                            </div>
                        }
                        <div class="row">
                            <div class="col-md-10">
                                <input type="text" class="form-control numeric" @bind-value="@SerialNumber" placeholder="ADD SERIAL NUMBER"/>
                            </div>
                            <div class="col-md-2">
                                <TelerikButton Class="RightButton" @onclick="(()=> btnAddFindSerailNumberOnClick())" Icon="add">Add</TelerikButton>
                            </div>
                         </div>
                    </TabStripTab>
                    <TabStripTab Title="Range">
                       <form Model="@serialNumberRange" @onsubmit="OnSubmitRange">
                            @if (RangeAddPartsToAlertError != null && RangeAddPartsToAlertError.Count() > 0)
                            {
                                <div class="row">
                                    @foreach(var item in RangeAddPartsToAlertError)
                                    {
                                        <label class="text-danger">@item.Error</label><br />
                                    }
                                </div>
                             }
                            <DataAnnotationsValidator />
                            <ValidationSummary />
                            <div class="form-group row">
                                <label for="startSerialNumber" class="col-md-5 col-form-label">Start Serial Number</label>
                                <div class="col-sm-5">
                                    <TelerikTextBox @bind-Value="@serialNumberRange.StartSerialNumber" Class="form-control numeric" PlaceHolder="Type in a serial number"></TelerikTextBox>
                                
                                </div>
                            </div>
                            <div class="form-group row" style="margin-top:15px;">
                                <label for="endSerialNumber" class="col-md-5 col-form-label">End Serial Number</label>
                                <div class="col-sm-5">
                                    <TelerikTextBox @bind-Value="@serialNumberRange.EndSerialNumber" Class="form-control numeric" PlaceHolder="Type in a serial number"></TelerikTextBox>
                                </div>
                            </div>
                            <div class="form-group row" style="margin-top:15px;">
                                <TelerikButton Class="SaveButton">Add Range</TelerikButton>
                            </div>
                        </form>
                    </TabStripTab>
                    <TabStripTab Title="Upload Excel">
                        @if (ExcelAddPartsToAlertError != null && ExcelAddPartsToAlertError.Count() > 0)
                        {
                            <div class="row">
                                @foreach(var item in ExcelAddPartsToAlertError)
                                {
                                    <label class="text-danger">@item.Error</label><br />
                                }
                            </div>
                        }
                        <br />
                        <form @onsubmit="OnSubmitExcelFile">
                            <div class="form-group row">
                                <InputFile OnChange="OnInputFileChange" />
                            </div>
                             <div class="form-group row">
                               <TelerikButton Class="SaveButton" Icon="upload">Upload Selected File</TelerikButton>
                            </div>
                        </form>
                    </TabStripTab>
                </TelerikTabStrip>
            </div>
             <div class="col-md-6">
                 <br/>
                 <div class="form-group row" style="margin-left: 0px;">
                    <TelerikGrid Data=@GridParts Sortable="true" Pageable="false">
                         <GridColumns>
                             <GridColumn Field=@nameof(Part.SerialNumber) Title="Serial Number" Filterable="false">
                             </GridColumn>
                         </GridColumns>
                         <NoDataTemplate>
                             <text>No Records Available</text>
                         </NoDataTemplate>
                    </TelerikGrid>
                </div>
            </div>
        </div>
        
        <br />
        <div class="row">
            <TelerikButton Class="SaveButton" OnClick="(()=>HandleValidSubmit())">Save</TelerikButton>
        </div>
        <br />
    </EditForm>
}

@code {

    public int ActiveTabIndex { get; set; } = 0;

    Telerik.Blazor.Components.TelerikTabStrip mySerialNumberTabStrip;

    string selectedMasterPart { get; set; }

    string selectedMasterPartDescription { get; set; }

    string SerialNumber { get; set; }

    public IEnumerable<MasterPart> MasterParts { get; set; }

    List<Alert> GridData { get; set; }

    Alert OriginalRecord { get; set; }

    Alert AddEditAlert { get; set; }

    EditContext ECAddEditAlert { get; set; }

    List<Part> GridParts { get; set; } = new List<Part>();

    List<AddPartsToAlertError> RangeAddPartsToAlertError { get; set; }

    List<AddPartsToAlertError> ExcelAddPartsToAlertError { get; set; }

    public Telerik.Blazor.Components.TelerikDatePicker<DateTime?> theDatePickerExpirationDate;

    protected override async Task OnInitializedAsync()
    {
        GridData = await AlertService.ReadAlerts();
        MasterParts = MasterPartService.GetAllMasterParts();
        base.OnInitialized();
    }

    public async Task SelectRecord(Alert alert)
    {
        await JSRuntime.InvokeVoidAsync("onlyAllowNumbers");
        GridParts.Clear();
        OriginalRecord = null;
        if (alert != null)
        {
            OriginalRecord = alert;
            AddEditAlert = new Alert()
            {
                AlertId = OriginalRecord.AlertId,
                DateCreated = OriginalRecord.DateCreated,
                MasterPartId =  OriginalRecord.MasterPartId,
                ReasonforManufacturingDeviation = OriginalRecord.ReasonforManufacturingDeviation,
                Title = OriginalRecord.Title,
                ExpirationDate = OriginalRecord.ExpirationDate
            };

            if (AddEditAlert.ExpirationDate.Equals(DateTime.MinValue))
            {
                AddEditAlert.ExpirationDate = null;
            }

            selectedMasterPartDescription = OriginalRecord.MasterPart.Description;
            selectedMasterPart = OriginalRecord.MasterPart.PartNumber;

            if (OriginalRecord.PartAlerts != null && OriginalRecord.PartAlerts.Count() > 0)
            {
                List<Part> partLists = new List<Part>();
                foreach (var part in OriginalRecord.PartAlerts)
                {
                    if (part.PartId > 0 && !partLists.Any(x => x.PartId == part.PartId))
                    {
                        Part parts = new Part();
                        parts.PartId = part.PartId;
                        parts.SerialNumber = part.Part.SerialNumber;
                        parts.PartStatusId = part.Part.PartStatusId;
                        partLists.Add(parts);
                    }
                }
                GridParts.AddRange(partLists);
                GridParts = new List<Part>(GridParts.Distinct().ToList());
            }
        }
        else
        {
            AddEditAlert = new Alert();
            AddEditAlert.AlertId = 0;
        }

        if (AddEditAlert != null)
        {
            ECAddEditAlert = new EditContext(AddEditAlert);
        }
        StateHasChanged();
    }

    string Message = "No file(s) selected";
    IReadOnlyList<IBrowserFile> selectedFiles;

    private void OnInputFileChange(InputFileChangeEventArgs e)
    {
        selectedFiles = e.GetMultipleFiles();
        Message = $"{selectedFiles.Count} file(s) selected";
        this.StateHasChanged();
    }

    private async void OnSubmitExcelFile()
    {
        if (AddEditAlert.MasterPartId == 0)
        {
            toastService.ShowError("Please Select Master Part", "Error");
            return;
        }

        foreach (var file in selectedFiles)
        {
            var path = await BlobService.UploadBlob(file);
            MasterPart selectedMasterPart = MasterParts.Where(x => x.MasterPartId == AddEditAlert.MasterPartId).FirstOrDefault();

            var errors = await ExcelUploadService.AlertProcessSerialNumberExcelFile(path, selectedMasterPart);
            if (errors != null && errors.Parts != null && errors.Parts.Count() > 0 && GridParts != null)
            {
                GridParts.AddRange(errors.Parts);
                GridParts = new List<Part>(GridParts.Distinct().ToList());
            }

            if (errors != null && errors.AddPartsToAlertError != null && errors.AddPartsToAlertError.Count() > 0)
            {
                ExcelAddPartsToAlertError = errors.AddPartsToAlertError;
            }
            else
            {
                ExcelAddPartsToAlertError = null;
            }
        }
        Message = $"{selectedFiles.Count} file(s) uploaded on server";
        this.StateHasChanged();
    }

    SerialNumberRange serialNumberRange = new();
    private async void OnSubmitRange()
    {
        if (AddEditAlert.MasterPartId == 0)
        {
            toastService.ShowError("Please Select Master Part", "Error");
            return;
        }

        if (string.IsNullOrEmpty(serialNumberRange.StartSerialNumber))
        {
            toastService.ShowError("Please Enter Start Serial Number", "Error");
            return;
        }

        if (string.IsNullOrEmpty(serialNumberRange.EndSerialNumber))
        {
            toastService.ShowError("Please Enter End Serial Number", "Error");
            return;
        }

        if (!string.IsNullOrWhiteSpace(serialNumberRange.StartSerialNumber) && !string.IsNullOrWhiteSpace(serialNumberRange.EndSerialNumber))
        {
            try
            {
                if (long.Parse(serialNumberRange.StartSerialNumber) > long.Parse(serialNumberRange.EndSerialNumber))
                {
                    toastService.ShowError("Start serial number lower than end serial number.", "Error");
                    return;
                }
            }
            catch(Exception ex)
            {
                toastService.ShowError("Please enter valid serial number.", "Error");
                return;
            }

            MasterPart selectedMasterPart = MasterParts.Where(x => x.MasterPartId == AddEditAlert.MasterPartId).FirstOrDefault();
            var x = serialNumberRange;
            var errors = await PartService.AddPartsToAlertByStartEnd(selectedMasterPart, long.Parse(serialNumberRange.StartSerialNumber), long.Parse(serialNumberRange.EndSerialNumber));

            if (errors != null && errors.Parts != null && errors.Parts.Count() > 0 && GridParts != null)
            {
                GridParts.AddRange(errors.Parts);
                GridParts = new List<Part>(GridParts.Distinct().ToList());
            }

            if (errors != null && errors.AddPartsToAlertError != null && errors.AddPartsToAlertError.Count() > 0)
            {
                RangeAddPartsToAlertError = errors.AddPartsToAlertError;

            }
            else
            {
                RangeAddPartsToAlertError = null;
            }

            StateHasChanged();
        }
    }

    private async Task HandleValidSubmit()
    {
        if (AddEditAlert != null)
        { 
            if (AddEditAlert.MasterPartId == 0)
            {
                toastService.ShowError("Please Select Master Part", "Error");
                return;
            }

            if (GridParts != null && GridParts.Count() > 0)
            {
                List<PartAlert> partAlerts = new List<PartAlert>();  
                foreach(var part in GridParts)
                {
                    if (part.PartId > 0 && !partAlerts.Any(x=>x.PartId == part.PartId))
                    {
                        PartAlert partAlert = new PartAlert();
                        partAlert.PartId = part.PartId;
                        partAlerts.Add(partAlert);
                    }
                }
                AddEditAlert.PartAlerts = partAlerts;
            }

            var resultAlert = await AlertService.CreateAlertAsync(AddEditAlert);
            if (resultAlert != null && resultAlert.AlertId > 0)
            {
                toastService.ShowInfo("Record Saved Successfully", "Info");
                SerialNumber = string.Empty;
                GridParts.Clear();
                NavigationManager.NavigateTo("alerts",true);
                StateHasChanged();
            }
            else
            {
                toastService.ShowError("Record Not Saved ! Something Worng", "Error");
            }
        }
    }

    private void MyOnChangeHandler(object theUserChoice)
    {
        var result = string.Format("The user confirmed: {0}", (string)theUserChoice);

        MasterPart selectedMasterPart = MasterParts.Where(x => x.PartNumber == (string)theUserChoice).FirstOrDefault();
        if(selectedMasterPart != null)
        {
            selectedMasterPartDescription = selectedMasterPart.Description;
            if (AddEditAlert == null)
            {
                AddEditAlert = new Alert();
            }
            AddEditAlert.MasterPart = selectedMasterPart;
            AddEditAlert.MasterPartId = selectedMasterPart.MasterPartId;
            StateHasChanged();
        }
    }

    private async Task btnAddFindSerailNumberOnClick()
    {
        if (string.IsNullOrEmpty(SerialNumber))
        {
            toastService.ShowError("Please Enter Serial Number", "Error");
            return;
        }

        if (AddEditAlert.MasterPartId == 0)
        {
            toastService.ShowError("Please Select Master Part", "Error");
            return;
        }

        MasterPart selectedMasterPart = MasterParts.Where(x => x.MasterPartId == AddEditAlert.MasterPartId).FirstOrDefault();
        AddPartsToAlertModel errors = null;
        var x = serialNumberRange;

        try
        { 
            errors = await PartService.AddPartsToAlertByStartEnd(selectedMasterPart, long.Parse(SerialNumber), long.Parse(SerialNumber));
        }
        catch(Exception ex)
        {
             toastService.ShowError("Please enter valid serial number.", "Error");
             return;
        }

        if (errors != null && errors.Parts != null && errors.Parts.Count() > 0 && GridParts != null)
        {
            GridParts.AddRange(errors.Parts);
            GridParts = new List<Part>(GridParts.Distinct().ToList());
        }

        if (errors != null && errors.AddPartsToAlertError != null && errors.AddPartsToAlertError.Count() > 0)
        {
            RangeAddPartsToAlertError = errors.AddPartsToAlertError;

        }
        else
        {
            RangeAddPartsToAlertError = null;
        }

        StateHasChanged();
    }
}
