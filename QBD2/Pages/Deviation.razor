@page "/deviations"
@using QBD2.Services
@using QBD2.Entities
@using QBD2.Models
@inject MasterPartService MasterPartService
@inject DeviationService DeviationService

<style>
    table, th, td {
        border: 2px solid;
    }

    .RightButton {
        height: 38px;
        width: 75px;
        margin-left: -32px;
    }

    .Width200 {
        width: 200px;
        left: 117px;
    }

    .SaveButton {
        float: right;
        width: 100px;
        left: 72%;
    }
</style>


<h3>Deviations</h3>
@if (AddEditDeviation == null)
{
    <TelerikGrid Data="@GridData"
             Pageable="true"
             Sortable="true"
             FilterMode="@GridFilterMode.FilterRow">
        <GridToolBar>
            <TelerikButton Icon="add" @onclick="(() => SelectRecord(null))">Add new Deviation</TelerikButton>
        </GridToolBar>
        <GridColumns>
            <GridColumn Field="@(nameof(QBD2.Entities.Deviation.DateCreated))" Title="Date Created" />
            <GridColumn Field="@(nameof(QBD2.Entities.Deviation.Item))" Title="Item" />
            <GridColumn Field="@(nameof(QBD2.Entities.Deviation.Originator))" Title="Originator" />
            <GridCommandColumn Width="150px">
                <GridCommandButton Command="Save" Icon="eye"></GridCommandButton>
                <GridCommandButton Command="Edit" Icon="edit"></GridCommandButton>
                <GridCommandButton Command="Delete" Icon="print"></GridCommandButton>
            </GridCommandColumn>
        </GridColumns>
    </TelerikGrid>
}

@if (AddEditDeviation != null)
{
    <br />
    @* <div class="row">
        <div class="col-md-12">
        <h5><i class="fa-regular fa-plus"></i> Manage Deviation</h5><br />
        </div>
        </div>*@

    <EditForm EditContext="@ECAddEditDeviation">
        <DataAnnotationsValidator />

        <div class="form-group row">
            <label for="ItemPortNumber" class="col-sm-2 col-form-label">Item Number</label>
            <div class="col-md-11">
@*                <TelerikDropDownList Data="@MasterParts"
                                 @bind-Value="SelectedMasterPartId"
                                 TextField="PartNumber"
                                 ValueField="MasterPartId"
                                 DefaultText=""
                                 Id="masterPart"
                                 Width="100%">
                    <DropDownListSettings>
                        <DropDownListPopupSettings Height="auto"></DropDownListPopupSettings>
                    </DropDownListSettings>
                </TelerikDropDownList>*@

Selected value: @selectedValue
<br />
@*
<TelerikDropDownList Data="@masterPartsList" TextField="PartNumber" ValueField="MasterPartId" @bind-Value="selectedValue">
</TelerikDropDownList>*@


            </div>
        </div>

        <div class="form-group row">
            <label for="PortDescription" class="col-sm-2 col-form-label">Part Description</label>
            <div class="col-md-10">
                @if(@SelectedMasterPart != null){
                    <label>@SelectedMasterPart.Description</label>
                }
            </div>
        </div>

        <div class="form-group row">
            <div class="row">
                <label for="ReasonforManufacturingDeviation" class="col-sm-8 col-form-label">Reason for Manufacturing Deviation</label>
            </div>
            <div class="row">
                <div class="col-md-11">
                    <textarea @bind-value="AddEditDeviation.ReasonforManufacturingDeviation" class="form-control" rows="8" @bind-value:event="oninput"></textarea>
                    <ValidationMessage For="@(() => AddEditDeviation.ReasonforManufacturingDeviation)"></ValidationMessage>
                </div>
            </div>
        </div>

        <div class="form-group row">
            <div class="row">
                <label class="col-md-6 col-form-label">Location</label>
            </div>
            <div class="form-group row">
                <div class="col-md-12">
                    <table>
                        <thead>
                            <tr>
                                <th width="25%"></th>
                                <th width="15%">SVRART</th>
                                <th width="15%">SEVE</th>
                                <th width="15%">2</th>
                                <th width="15%">WIP</th>
                                <th width="15%">3(FGI)</th>
                            </tr>
                        </thead>
                        <tbody>
                            <tr>
                                <td>Vendor</td>
                                <td><input type="text" class="form-control" /></td>
                                <td><input type="text" class="form-control" /></td>
                                <td><input type="text" class="form-control" /></td>
                                <td><input type="text" class="form-control" /></td>
                                <td><input type="text" class="form-control" /></td>
                            </tr>
                            <tr>
                                <td>LSA</td>
                                <td><input type="text" class="form-control" /></td>
                                <td><input type="text" class="form-control" /></td>
                                <td><input type="text" class="form-control" /></td>
                                <td><input type="text" class="form-control" /></td>
                                <td><input type="text" class="form-control" /></td>
                            </tr>
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
        <br />
        <div class="form-group row">
            <label for="ECORequired" class="col-sm-2 col-form-label">ECO Required</label>
            <div class="col-sm-7">
                <InputRadioGroup Name="ECORequired" @bind-Value="AddEditDeviation.ECORequired">
                    <InputRadio Name="ECORequired" Value="@(true)" /> Yes
                    <InputRadio Name="ECORequired" Value="@(false)" /> No
                </InputRadioGroup>
                <ValidationMessage For="@(() => AddEditDeviation.ECORequired)"></ValidationMessage>
            </div>
        </div>

        @if (AddEditDeviation.ECORequired)
        {
            <div class="form-group row">
                <label for="ECONumber" class="col-sm-2 col-form-label">ECO Number</label>
                <div class="col-md-11">
                    <TelerikTextBox @bind-Value="@AddEditDeviation.ECONumber" Class="form-control"></TelerikTextBox>
                    <ValidationMessage For="@(() => AddEditDeviation.ECONumber)"></ValidationMessage>
                </div>
            </div>
        }

        <div class="form-group row">
            <div class="col-md-11">
                <label for="ReasonforManufacturingDeviation">Comment Corrective Action</label><br>
                <textarea @bind-value="AddEditDeviation.CommentCorrectiveAction" class="form-control" rows="4" @bind-value:event="oninput"></textarea>
                <ValidationMessage For="@(() => AddEditDeviation.CommentCorrectiveAction)"></ValidationMessage>
            </div>

        </div>

        <br />
        <div class="row">
            <div class="col-md-12">
                <h5>Affected Serial Numbers</h5>
                <hr>
            </div>
        </div>

        <div class="row">
            <div class="col-md-2">
<TelerikGrid Data="@PartDeviationGridData" Height="400px"
             Pageable="true" Sortable="true" FilterMode="Telerik.Blazor.GridFilterMode.FilterRow"
             Resizable="true" 
             EditMode="Telerik.Blazor.GridEditMode.Inline"
             OnUpdate=@PartDeviationUpdateHandler
             OnDelete=@PartDeviationDeleteHandler
             OnCreate=@PartDeviationCreateHandler
                >
                 <GridToolBar>
        <GridCommandButton Command="Add" Icon="add">Add a Serial Number</GridCommandButton>
    </GridToolBar>
    <GridColumns>
        <GridColumn Field="@(nameof(PartDeviation.PartDeviationId))" Title="Name" Groupable="false" />
@*                <GridCommandColumn>
            <GridCommandButton Command="SavePartDeviation" Icon="save" ShowInEdit="true">Update</GridCommandButton>
            <GridCommandButton Command="EditPartDeviation" Icon="edit">Edit</GridCommandButton>
            <GridCommandButton Command="DeletePartDeviation" Icon="delete">Delete</GridCommandButton>
            <GridCommandButton Command="CancelPartDeviation" Icon="cancel" ShowInEdit="true">Cancel</GridCommandButton>
        </GridCommandColumn>*@
    </GridColumns>
</TelerikGrid>




            </div>
            <div class="col-md-1" style="text-align:center;margin-top:82px;">OR</div>
            <div class="col-md-3">
                <div class="row">
                    <label class="form-label">Range</label>
                </div>
                <div class="form-group row">
                    <label for="startSerialNumber" class="col-md-5 col-form-label">Start Serial Number</label>
                    <div class="col-sm-5">
                        <input type="text" class="form-control" id="startSerialNumber" />
                    </div>
                </div>
                <div class="form-group row" style="margin-top:15px;">
                    <label for="endSerialNumber" class="col-md-5 col-form-label">End Serial Number</label>
                    <div class="col-sm-5">
                        <input type="text" class="form-control" id="endSerialNumber" />
                    </div>
                </div>
                <div class="form-group row" style="margin-top:15px;">
                    <TelerikButton Class="Width200">Add Serial Numbers</TelerikButton>
                </div>
            </div>
            <div class="col-md-1" style="text-align:center;margin-top:82px;">OR</div>
            <div class="col-md-3">
                <div class="row">
                    <label class="form-label">Upload Excel file with Serial Number List</label>
                </div>
                <br />
                <div class="row">
                    <InputFile OnChange="OnInputFileChange" />
                </div>
            </div>
        </div>
        <br />
        <div class="row">
            <TelerikButton Class="SaveButton">Save</TelerikButton>
        </div>
        <br />
    </EditForm>
}

@code {


    public class MyDdlModel
    {
        public int MyValueField { get; set; }
        public string MyTextField { get; set; }
    }

    int selectedValue { get; set; }

    IEnumerable<MyDdlModel> myDdlData = Enumerable.Range(1, 20).Select(x => new MyDdlModel { MyTextField = "item " + x, MyValueField = x });

    //IEnumerable<MasterPart> masterPartsList = MasterPartService.GetAllMasterParts();

    public MasterPart SelectedMasterPart { get; set; }

    public IEnumerable<MasterPart> MasterParts { get; set; }

    List<QBD2.Entities.Deviation> GridData { get; set; }
    List<PartDeviation> PartDeviationGridData { get; set; }

    QBD2.Entities.Deviation OriginalRecord { get; set; }

    QBD2.Entities.Deviation AddEditDeviation { get; set; }

    EditContext ECAddEditDeviation { get; set; }



    protected override async void OnInitialized()
    {
        await GetGridData();
        //await GetPartDeviationGridData();

        

        base.OnInitialized();
    }

    async Task GetGridData()
    {
        GridData = await DeviationService.ReadDeviations();
    }

    public async Task SelectRecord(QBD2.Entities.Deviation deviation)
    {
        OriginalRecord = null;
        if (deviation != null)
        {
            OriginalRecord = deviation;
            AddEditDeviation = new QBD2.Entities.Deviation()
            {
                //Id = OriginalRecord.Id,
                //DateCreated = OriginalRecord.DateCreated,
                //Item = OriginalRecord.Item,
                //Originator = OriginalRecord.Originator
            };
        }
        else
        {
            AddEditDeviation = new QBD2.Entities.Deviation();
        }

        if (AddEditDeviation != null)
        {
            ECAddEditDeviation = new EditContext(AddEditDeviation);
        }
        StateHasChanged();
    }

        private void MyOnChangeHandler(object theUserInput)
    {
        // the handler receives an object that you may need to cast to the type of the component
        // if you do not provide a Value, you must provide the Type parameter to the component


    }

    private void OnInputFileChange(InputFileChangeEventArgs e)
    {
        this.StateHasChanged();
    }
    int _selectedMasterPartId;
    int SelectedMasterPartId
    {
        get
        {
            return _selectedMasterPartId;
        }
        set
        {
            _selectedMasterPartId = value;
            SelectedMasterPart = MasterParts.FirstOrDefault(o => o.MasterPartId == value);
        }
    }

    async Task GetPartDeviationGridData()
    {
        PartDeviationGridData = await DeviationService.ReadPartDeviation();
    }

    async Task PartDeviationUpdateHandler(GridCommandEventArgs args)
    {
        PartDeviation item = (PartDeviation)args.Item;

        await DeviationService.UpdatePartDeviation(item);

        await GetGridData();
    }

    async Task PartDeviationDeleteHandler(GridCommandEventArgs args)
    {
        PartDeviation item = (PartDeviation)args.Item;

        await DeviationService.DeletePartDeviation(item);

        await GetGridData();
    }

    async Task PartDeviationCreateHandler(GridCommandEventArgs args)
    {
        PartDeviation item = (PartDeviation)args.Item;
        
        await DeviationService.CreatePartDeviation(item);

        await GetGridData();
    }

    async Task PartDeviationCancelHandler(GridCommandEventArgs args)
    {
        PartDeviation item = (PartDeviation)args.Item;
    }
}