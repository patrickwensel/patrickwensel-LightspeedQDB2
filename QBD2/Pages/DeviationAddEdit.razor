@page "/deviation"
@using QBD2.Services
@using QBD2.Entities
@using QBD2.Models
@inject DeviationService DeviationService
@inject MasterPartService MasterPartService
@inject PartService PartService
@inject IWebHostEnvironment env
@inject ExcelUploadService ExcelUploadService
@inject IToastService toastService
@inject NavigationManager NavigationManager
@inject BlobService BlobService
@inject IJSRuntime JSRuntime

<style>
    table, th, td {
        /*border: 2px solid;*/
    } 
    .RightButton {
        height: 38px;
        width: 75px;
        margin-left: -32px;
    }

    .Width200 {
        width: 200px;
        left: 117px;
    }

    .SaveButton {
        float: right;
        width: 100px;
    }
</style>

<div class="row alerts-row">
    <div class="col-md-9">
           @if (AddEditDeviation != null && AddEditDeviation.DeviationId == 0)
           {
               <h3 class="alert-title"><label @onclick="(()=> btnCancelDeviationOnClick())" style="cursor:pointer;"><i class="fas fa-chevron-left"></i>&nbsp;&nbsp;</label><i class="fa fa-plus" aria-hidden="true"></i>&nbsp;&nbsp;Add new Deviation</h3>
           }
           else if(AddEditDeviation != null && AddEditDeviation.DeviationId > 0)
           {
               <h3 class="alert-title"><label @onclick="(()=> btnCancelDeviationOnClick())" style="cursor:pointer;"><i class="fas fa-chevron-left"></i>&nbsp;&nbsp;</label><i class="fa fa-edit" aria-hidden="true"></i>&nbsp;&nbsp;Edit Deviation</h3>
           }
           else
           {
                <h3 class="alert-title"><i class="fa fa-car" aria-hidden="true"></i>&nbsp;&nbsp;Deviations</h3>
           }
    </div>
    <div class="col-md-3 add-alrert-btn">
    @if (AddEditDeviation == null)
    {
        <TelerikButton Icon="add" @onclick="(() => SelectRecord(null))">Add new Deviation</TelerikButton>
    }
 </div>
</div>

<hr />

@if (AddEditDeviation == null)
{
    <h3 class="alert-table-title">Listed Deviations</h3>
     <div class="al-table">
    <TelerikGrid Data="@GridData"
             Pageable="true"
             Sortable="true"
             FilterMode="@GridFilterMode.FilterRow">
        
        <GridColumns>
            <GridColumn Field="@(nameof(Deviation.DateCreated))" Title="Date Created" DisplayFormat="{0:dd-MM-yyyy}" />
            <GridColumn Field="@(nameof(Deviation.MasterPartNumber))" Title="Part Number" Filterable="false" />
            <GridColumn Field="@(nameof(Deviation.MasterPartDescription))" Title="Description" Filterable="false" />
            <GridCommandColumn Width="100px">
                @*<GridCommandButton Command="Save" Icon="eye"></GridCommandButton>*@
                <GridCommandButton Class="edit-btn bgb-none" Icon="" OnClick="@((args)=> SelectRecord(args.Item as Deviation))"><i class="fal fa-edit"></i></GridCommandButton>
                <GridCommandButton Class="del-btn bgb-none" Command="Delete" Icon="delete"></GridCommandButton>
            </GridCommandColumn>
        </GridColumns>
    </TelerikGrid>
    </div>
}

@if (AddEditDeviation != null)
{
    @* <div class="row">
        <div class="col-md-12">
        <h5><i class="fa-regular fa-plus"></i> Manage Deviation</h5><br />
        </div>
        </div>*@
    <div class="alert-edit-page">
        <div class="form-group row m-tb">
            <label for="PartNumber" class="col-sm-2 col-form-label">Part Number</label>
            <div class="col-md-10 bg-w">
                <TelerikAutoComplete Data="@MasterParts" @bind-Value="@selectedMasterPart"
                     ValueField="@( nameof(MasterPart.PartNumber) )"
                     Filterable="true" MinLength="3"
                     OnChange="@MyOnChangeHandler"
                     ClearButton="true" 
                     Placeholder="Type Part Number And Select Part"
                     />
            </div>
        </div>

    <EditForm EditContext="@ECAddEditDeviation">
        <DataAnnotationsValidator />


        @*                <div class="form-group row">
            <label for="ItemPortNumber" class="col-sm-2 col-form-label">Item Number</label>
            <div class="col-md-11">
            <TelerikTextBox @bind-Value="@AddEditDeviation.MasterPart." Class="form-control"></TelerikTextBox>
            <ValidationMessage For="@(() => AddEditDeviation.ItemPortNumber)"></ValidationMessage>
            </div>
            </div>*@

         <div class="form-group row m-tb">
            <label for="PortDescription" class="col-sm-2 col-form-label">Part Description</label>
            <div class="col-md-10 bg-w">
                <label style="padding-top:10px;">@selectedMasterPartDescription</label>
            </div>
        </div>

        <div class="form-group row m-tb">
           <label for="Title" class="col-sm-2 col-form-label">Title</label>
           <div class="col-md-10">
            <TelerikTextBox @bind-Value="@AddEditDeviation.Title" Class="form-control"></TelerikTextBox>
           <ValidationMessage For="@(() => AddEditDeviation.Title)"></ValidationMessage>
                
            </div>
        </div>

        <div class="form-group row m-tb">
           <label for="ReasonforManufacturingDeviation" class="col-sm-2 col-form-label">Reason for Manufacturing Deviation</label>
           <div class="col-md-10">
           <textarea @bind-value="AddEditDeviation.ReasonforManufacturingDeviation" class="form-control" rows="8" @bind-value:event="oninput"></textarea>
           <ValidationMessage For="@(() => AddEditDeviation.ReasonforManufacturingDeviation)"></ValidationMessage>
           </div>
        </div>

        
            <div class="form-group row location-section-dev">
                <div class="col-md-12">
                    <table>
                        <thead>
                            <tr>
                                <th width="25%">Location</th>
                                <th width="15%">SVRART</th>
                                <th width="15%">SEVE</th>
                                <th width="15%">2</th>
                                <th width="15%">WIP</th>
                                <th width="15%">3(FGI)</th>
                            </tr>
                        </thead>
                        <tbody>
                            <tr>
                                <td>Vendor</td>
                                <td><input type="text" class="form-control" @bind-value="AddEditDeviation.VendorSVPART" /></td>
                                <td><input type="text" class="form-control" @bind-value="AddEditDeviation.VendorSEVE" /></td>
                                <td><input type="text" class="form-control" @bind-value="AddEditDeviation.Vendor2" /></td>
                                <td><input type="text" class="form-control" @bind-value="AddEditDeviation.VendorWIP" /></td>
                                <td><input type="text" class="form-control" @bind-value="AddEditDeviation.Vendor3FGI" /></td>
                            </tr>
                            <tr>
                                <td>LSA</td>
                                <td><input type="text" class="form-control" @bind-value="AddEditDeviation.LSASVPART" /></td>
                                <td><input type="text" class="form-control" @bind-value="AddEditDeviation.LSASEVE" /></td>
                                <td><input type="text" class="form-control" @bind-value="AddEditDeviation.LSA2" /></td>
                                <td><input type="text" class="form-control" @bind-value="AddEditDeviation.LSAWIP" /></td>
                                <td><input type="text" class="form-control" @bind-value="AddEditDeviation.LSAFGI" /></td>
                            </tr>
                        </tbody>
                    </table>
                </div>
            </div>
        
        
        <div class="form-group row m-tb">
            <label for="ECORequired" class="col-sm-2 col-form-label">ECO Required</label>
            <div class="col-sm-7">
                @*<InputRadioGroup Name="ECORequired" @bind-Value="AddEditDeviation.ECORequired">
                    <InputRadio Name="ECORequired" Value="@(true)" /> Yes
                    <InputRadio Name="ECORequired" Value="@(false)" /> No
                </InputRadioGroup>*@
                <ul class="switch-btn dev">
                   <li class="@AddActiveCssClass" @onclick="(() => OnECORequiredChangeHandler(true))"> Yes</li>
                   <li class="@AddInActiveCssClass" @onclick="(() => OnECORequiredChangeHandler(false))"> No</li>
                </ul>
                <ValidationMessage For="@(() => AddEditDeviation.ECORequired)"></ValidationMessage>
            </div>
        </div>

        @if (AddEditDeviation.ECORequired)
        {
            <div class="form-group row m-tb">
                <label for="ECONumber" class="col-sm-2 col-form-label">ECO Number</label>
                <div class="col-md-2 h-40">
                    <TelerikTextBox @bind-Value="@AddEditDeviation.ECONumber" Class="form-control"></TelerikTextBox>
                    <ValidationMessage For="@(() => AddEditDeviation.ECONumber)"></ValidationMessage>
                </div>
                <div class="col-md-8"></div>
            </div>
        }

        <div class="form-group row m-tb">
            
                <label class="col-sm-2 col-form-label" for="ReasonforManufacturingDeviation">Comment <br>Corrective <br>Action</label><br>
                <div class="col-md-10">
                <textarea @bind-value="AddEditDeviation.CommentCorrectiveAction" class="form-control" rows="4" @bind-value:event="oninput"></textarea>
                <ValidationMessage For="@(() => AddEditDeviation.CommentCorrectiveAction)"></ValidationMessage>
            </div>

        </div>

        <br />
        <div class="row">
            <div class="col-md-12">
                 <hr>
                <h5>Affected Serial Numbers</h5>
            </div>
        </div>

        <div class="row">
             <div class="col-md-6">
                 <TelerikTabStrip @bind-ActiveTabIndex="@ActiveTabIndex">
                        <TabStripTab Title="Manually">
                            @if (RangeAddPartsToDeviationError != null && RangeAddPartsToDeviationError.Count() > 0)
                            {
                                <div class="row">
                                    <label class="text-danger">Total&nbsp;@RangeAddPartsToDeviationError.Count()&nbsp;Serial Number was not listed in Stage.&nbsp;<br/><a href="javascript:void(0)" @onclick="(() => ViewErrorSerialNumberDetail())">Click here for more details</a></label>
                                    @if (IsDisplayRangeTextArea)
                                    {
                                        string errorSerialNumber = string.Join(", ", RangeAddPartsToDeviationError.Select(x=>x.SerialNumber));
                                        <textarea @bind-value="errorSerialNumber" class="form-control" rows="4" @bind-value:event="oninput" style="width: 56%;margin-left: 12px;margin-bottom: 20px;"></textarea>
                                    }
                                </div>
                            }
                            <div class="row">
                                <div class="col-md-10">
                                    <input type="text" class="form-control numeric" @bind-value="@SerialNumber" placeholder="ADD SERIAL NUMBER"/>
                                </div>
                                <div class="col-md-2">
                                    <TelerikButton Class="RightButton" @onclick="(()=> btnAddFindSerailNumberOnClick())">Add</TelerikButton>
                                </div>
                            </div>
                        </TabStripTab>
                        <TabStripTab Title="Range">
                           <form Model="@serialNumberRange" @onsubmit="OnSubmitRange">
                                @*<DataAnnotationsValidator />*@
                                <ValidationSummary />
                                @if (RangeAddPartsToDeviationError != null && RangeAddPartsToDeviationError.Count() > 0)
                                {
                                    <div class="row">
                                        @if(!string.IsNullOrWhiteSpace(serialNumberRange.StartSerialNumber) && !string.IsNullOrWhiteSpace(serialNumberRange.EndSerialNumber))
                                        {
                                            <label class="text-danger">Total&nbsp;@RangeAddPartsToDeviationError.Count()&nbsp;Serial Number was not listed in Stage.&nbsp;<br/><a href="javascript:void(0)" @onclick="(() => ViewErrorSerialNumberDetail())">Click here for more details</a></label>
                                            @if (IsDisplayRangeTextArea)
                                            {
                                                string errorSerialNumber = string.Join(", ", RangeAddPartsToDeviationError.Select(x=>x.SerialNumber));
                                                <textarea @bind-value="errorSerialNumber" class="form-control" rows="4" @bind-value:event="oninput" style="width: 56%;margin-left: 12px;"></textarea>
                                            }
                                        }
                                        else
                                        {
                                            RangeAddPartsToDeviationError = new List<AddPartsToDeviationError>();
                                        }
                                    </div>
                                }
                                <div class="form-group row">
                                    <label for="startSerialNumber" class="col-md-10 col-form-label h-40 input-label postion-top">
                                        <span class="title-u">Start Serial Number</span> 
                                        <TelerikTextBox @bind-Value="@serialNumberRange.StartSerialNumber" Class="form-control numeric" PlaceHolder="Type in a serial number"></TelerikTextBox>
                                    </label>
                                     <div class="col-sm-2"></div>
                                </div>
                                <div class="row">
                                    <div class="col-md-1 m-left"><img src="images/line-dash.png"></div>
                                </div>
                                <div class="form-group row">
                                    <label for="endSerialNumber" class="col-md-10 col-form-label h-40 input-label postion-bottom">
                                        <span class="title-u">End Serial Number</span> 
                                        <TelerikTextBox @bind-Value="@serialNumberRange.EndSerialNumber" Class="form-control numeric" PlaceHolder="Type in a serial number"></TelerikTextBox></label>
                                    <div class="col-sm-2"></div>
                                </div>
                                <div class="form-group row" style="margin-top:15px;">
                               
                                    <div class="col-md-12">
                                        <div class="range-add"><TelerikButton Class="SaveButton">+ Add Range</TelerikButton></div>
                                    </div>
                                </div>
                            </form>
                        </TabStripTab>
                        <TabStripTab Title="Upload Excel">
                            @if (ExcelAddPartsToDeviationError != null && ExcelAddPartsToDeviationError.Count() > 0)
                            {
                                <div class="row">
                                    <label class="text-danger">Total&nbsp;@ExcelAddPartsToDeviationError.Count()&nbsp;Serial Number was not listed in Stage.&nbsp;<br/><a href="javascript:void(0)" @onclick="(() => ViewErrorSerialNumberDetail())">Click here for more details</a></label>
                                    @if (IsDisplayRangeTextArea)
                                    {
                                        string errorSerialNumber = string.Join(", ", ExcelAddPartsToDeviationError.Select(x=>x.SerialNumber));
                                        <textarea @bind-value="errorSerialNumber" class="form-control" rows="4" @bind-value:event="oninput" style="width: 56%;margin-left: 12px;margin-bottom: 20px;"></textarea>
                                    }
                                </div>
                            }
                            <form @onsubmit="OnSubmitExcelFile">
                                <div class="form-group row">
                                    <div class="uplaod-box">
                                <span>Select an Excel File to upload...</span>
                                    <InputFile OnChange="OnInputFileChange" />
                                    </div>
                                </div>
                                 <div class="form-group row">
                                   <div class="col-md-12"><TelerikButton Class="UploadexlButton" Icon="upload">Upload Selected File</TelerikButton></div>
                                </div>
                            </form>

                        </TabStripTab>
                </TelerikTabStrip>
             </div>
             <div class="col-md-6">
                 <br/>
                  <div class="form-group row affects-p">
                      <h3 class="affect-p">Affected Parts</h3>
                        <TelerikGrid Data=@GridParts Sortable="true" Pageable="false">
                            <GridColumns>
                                <GridColumn Field=@nameof(Part.SerialNumber) Title="Serial Number" Filterable="false">
                                </GridColumn>
                            </GridColumns>
                            <NoDataTemplate>
                                <text>No Records Available</text>
                            </NoDataTemplate>
                        </TelerikGrid>
                    </div>
             </div>
        </div>
        <br />
        <div class="row">
            <TelerikButton Class="SaveButton" OnClick="(()=>HandleValidSubmit())">Save</TelerikButton>
        </div>
        <br />
    </EditForm>
    </div>
}

@code {

    public int ActiveTabIndex { get; set; } = 0;

    Telerik.Blazor.Components.TelerikTabStrip mySerialNumberTabStrip;

    string selectedMasterPart { get; set; }
    string selectedMasterPartDescription { get; set; }
    public IEnumerable<MasterPart> MasterParts { get; set; }
    List<Deviation> GridData { get; set; }
    Deviation OriginalRecord { get; set; }
    Deviation AddEditDeviation { get; set; }
    EditContext ECAddEditDeviation { get; set; }
    List<Part> GridParts { get; set; } = new List<Part>();
    string SerialNumber { get; set; }
    List<AddPartsToDeviationError> RangeAddPartsToDeviationError { get; set; }
    List<AddPartsToDeviationError> ExcelAddPartsToDeviationError { get; set; }
    SerialNumberRange serialNumberRange = new();

    public string AddActiveCssClass { get; set; } = "active";

    public string AddInActiveCssClass { get; set; }
    
    public bool IsDisplayRangeTextArea = false;

    protected override async Task OnInitializedAsync()
    {
        GridData = await DeviationService.ReadDeviations();
        MasterParts = MasterPartService.GetAllMasterParts();
        base.OnInitialized();
    }

    public async Task SelectRecord(Deviation deviation)
    {
        await JSRuntime.InvokeVoidAsync("onlyAllowNumbers");
        GridParts.Clear();
        OriginalRecord = null;
        if (deviation != null)
        {
            OriginalRecord = deviation;
            AddEditDeviation = new Deviation()
                {
                    DeviationId = OriginalRecord.DeviationId,
                    Title = OriginalRecord.Title,
                    DateCreated = OriginalRecord.DateCreated,
                    MasterPartId = OriginalRecord.MasterPartId,
                    Originator = OriginalRecord.Originator,
                    ReasonforManufacturingDeviation = OriginalRecord.ReasonforManufacturingDeviation,
                    ECORequired = OriginalRecord.ECORequired,
                    ECONumber = OriginalRecord.ECONumber,
                    CommentCorrectiveAction = OriginalRecord.CommentCorrectiveAction,
                    VendorSVPART = OriginalRecord.VendorSVPART,
                    VendorSEVE = OriginalRecord.VendorSEVE,
                    Vendor2 = OriginalRecord.Vendor2,
                    VendorWIP = OriginalRecord.VendorWIP,
                    Vendor3FGI = OriginalRecord.Vendor3FGI,
                    LSASVPART = OriginalRecord.LSASVPART,
                    LSASEVE = OriginalRecord.LSASEVE,
                    LSA2 = OriginalRecord.LSA2,
                    LSAWIP = OriginalRecord.LSAWIP,
                    LSAFGI = OriginalRecord.LSAFGI
                };
            selectedMasterPartDescription = OriginalRecord.MasterPart.Description;
            selectedMasterPart = OriginalRecord.MasterPart.PartNumber;


            if (OriginalRecord.PartDeviations != null && OriginalRecord.PartDeviations.Count() > 0)
            {
                List<Part> partLists = new List<Part>();
                foreach (var part in OriginalRecord.PartDeviations)
                {
                    if (part.PartId > 0 && !partLists.Any(x => x.PartId == part.PartId))
                    {
                        Part parts = new Part();
                        parts.PartId = part.PartId;
                        parts.SerialNumber = part.Part.SerialNumber;
                        partLists.Add(parts);
                    }
                }
                GridParts.AddRange(partLists);
                GridParts = new List<Part>(GridParts.Distinct().ToList());
            }
        }
        else
        {
            AddEditDeviation = new Deviation();
            AddEditDeviation.DeviationId = 0;
        }

        if (AddEditDeviation.ECORequired == true)
        {
                AddActiveCssClass = "active";
                AddInActiveCssClass = string.Empty;
        }
        else if(AddEditDeviation.ECORequired == false)
        { 
                AddActiveCssClass = string.Empty;
                AddInActiveCssClass = "active";
        }

        if (AddEditDeviation != null)
        {
            ECAddEditDeviation = new EditContext(AddEditDeviation);
        }
        StateHasChanged();
    }
    string Message = "No file(s) selected";
    IReadOnlyList<IBrowserFile> selectedFiles;

    private void OnInputFileChange(InputFileChangeEventArgs e)
    {
        selectedFiles = e.GetMultipleFiles();
        Message = $"{selectedFiles.Count} file(s) selected";
        this.StateHasChanged();
    }

    private async void OnSubmitExcelFile()
    {
        if (AddEditDeviation.MasterPartId == 0)
        {
            toastService.ShowError("Please Select Master Part", "Error");
            return;
        }

        foreach (var file in selectedFiles)
        {
            var path = await BlobService.UploadBlob(file);

            MasterPart selectedMasterPart = MasterParts.Where(x => x.MasterPartId == AddEditDeviation.MasterPartId).FirstOrDefault();

            var errors = await ExcelUploadService.ProcessSerialNumberExcelFile(path, selectedMasterPart);
            if (errors != null && errors.Parts != null && errors.Parts.Count() > 0 && GridParts != null)
            {
                GridParts.AddRange(errors.Parts);
                GridParts = new List<Part>(GridParts.Distinct().ToList());
            }

            if (errors != null && errors.AddPartsToDeviationError != null && errors.AddPartsToDeviationError.Count() > 0)
            {
                ExcelAddPartsToDeviationError = errors.AddPartsToDeviationError;
            }
            else
            {
                ExcelAddPartsToDeviationError = null;
            }
        }
        Message = $"{selectedFiles.Count} file(s) uploaded on server";
        this.StateHasChanged();
    }

    private async void OnSubmitRange()
    {
        if (AddEditDeviation.MasterPartId == 0)
        {
            toastService.ShowError("Please Select Master Part", "Error");
            return;
        }

        if (string.IsNullOrEmpty(serialNumberRange.StartSerialNumber))
        {
            toastService.ShowError("Please Enter Start Serial Number", "Error");
            return;
        }

        if (string.IsNullOrEmpty(serialNumberRange.EndSerialNumber))
        {
            toastService.ShowError("Please Enter End Serial Number", "Error");
            return;
        }

        if (!string.IsNullOrWhiteSpace(serialNumberRange.StartSerialNumber) && !string.IsNullOrWhiteSpace(serialNumberRange.EndSerialNumber))
        {
            try
            {
                if (long.Parse(serialNumberRange.StartSerialNumber) > long.Parse(serialNumberRange.EndSerialNumber) )
                {
                    toastService.ShowError("Start serial number lower than end serial number.", "Error");
                    return;
                }
            }
            catch(Exception ex)
            {
                toastService.ShowError("Please enter valid serial number.", "Error");
                return;
            }

            MasterPart selectedMasterPart = MasterParts.Where(x => x.MasterPartId == AddEditDeviation.MasterPartId).FirstOrDefault();

            var errors = await PartService.AddPartsToDeviationByStartEnd(selectedMasterPart, long.Parse(serialNumberRange.StartSerialNumber),long.Parse(serialNumberRange.EndSerialNumber));
            if (errors != null && errors.Parts != null && errors.Parts.Count() > 0 && GridParts != null)
            {
                GridParts.AddRange(errors.Parts);
                GridParts = new List<Part>(GridParts.Distinct().ToList());
            }

            if (errors != null && errors.AddPartsToDeviationError != null && errors.AddPartsToDeviationError.Count() > 0)
            {
                RangeAddPartsToDeviationError = errors.AddPartsToDeviationError;

            }
            else
            {
                RangeAddPartsToDeviationError = null;
            }

            StateHasChanged();
        }
    }

    private async Task btnAddFindSerailNumberOnClick()
    {
        if (string.IsNullOrEmpty(SerialNumber))
        {
            toastService.ShowError("Please Enter Serial Number", "Error");
            return;
        }

        if (AddEditDeviation.MasterPartId == 0)
        {
            toastService.ShowError("Please Select Master Part", "Error");
            return;
        }

        MasterPart selectedMasterPart = MasterParts.Where(x => x.MasterPartId == AddEditDeviation.MasterPartId).FirstOrDefault();
        AddPartsToDeviationModel errors = null;

        try
        {
            errors = await PartService.AddPartsToDeviationByStartEnd(selectedMasterPart, long.Parse(SerialNumber), long.Parse(SerialNumber));
        }
        catch (Exception ex)
        {
            toastService.ShowError("Please enter valid serial number.", "Error");
            return;
        }

        if (errors != null && errors.Parts != null && errors.Parts.Count() > 0 && GridParts != null)
        {
            GridParts.AddRange(errors.Parts);
            GridParts = new List<Part>(GridParts.Distinct().ToList());
        }

        if (errors != null && errors.AddPartsToDeviationError != null && errors.AddPartsToDeviationError.Count() > 0)
        {
            RangeAddPartsToDeviationError = errors.AddPartsToDeviationError;

        }
        else
        {
            RangeAddPartsToDeviationError = null;
        }

        StateHasChanged();
    }

    private async Task HandleValidSubmit()
    {
        // Process the valid form
        if (AddEditDeviation != null)
        {
            if (AddEditDeviation.MasterPartId == 0)
            {
                toastService.ShowError("Please Select Master Part", "Error");
                return;
            }

            if (GridParts != null && GridParts.Count() > 0)
            {
                List<PartDeviation> PartDeviations = new List<PartDeviation>();
                foreach (var part in GridParts)
                {
                    if (part.PartId > 0 && !PartDeviations.Any(x => x.PartId == part.PartId))
                    {
                        PartDeviation partDeviation = new PartDeviation();
                        partDeviation.PartId = part.PartId;
                        PartDeviations.Add(partDeviation);
                    }
                }
                AddEditDeviation.PartDeviations = PartDeviations;
            }

            var resultDeviation = await DeviationService.CreateDeviationAsync(AddEditDeviation);
            if (resultDeviation != null && resultDeviation.DeviationId > 0)
            {
                toastService.ShowInfo("Record Saved Successfully", "Info");
                SerialNumber = string.Empty;
                GridParts.Clear();
                NavigationManager.NavigateTo("deviation", true);
                StateHasChanged();
            }
            else
            {
                toastService.ShowError("Record Not Saved ! Something Worng", "Error");
            }
        }
    }

    private void MyOnChangeHandler(object theUserChoice)
    {
        var result = string.Format("The user confirmed: {0}", (string)theUserChoice);

        MasterPart selectedMasterPart = MasterParts.Where(x => x.PartNumber == (string)theUserChoice).FirstOrDefault();
        if (selectedMasterPart != null)
        {
            selectedMasterPartDescription = selectedMasterPart.Description;
            if (AddEditDeviation == null)
            {
                AddEditDeviation = new Deviation();
            }
            AddEditDeviation.MasterPart = selectedMasterPart;
            AddEditDeviation.MasterPartId = selectedMasterPart.MasterPartId;
            StateHasChanged();
        }
    }

    public async void OnECORequiredChangeHandler(bool value)
    {
        if (value == true)
        {
            AddEditDeviation.ECORequired = true;
            AddActiveCssClass = "active";
            AddInActiveCssClass = string.Empty;
        }
        else if(value == false)
        { 
            AddEditDeviation.ECORequired = false;
            AddActiveCssClass = string.Empty;
            AddInActiveCssClass = "active";
        }
    }

    public async Task btnCancelDeviationOnClick()
    {
         AddEditDeviation = null;
         await this.OnInitializedAsync();
         StateHasChanged();
    }

    public async Task ViewErrorSerialNumberDetail()
    {
        IsDisplayRangeTextArea = true;
    }
}