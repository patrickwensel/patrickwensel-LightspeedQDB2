@page "/deviation"
@using QBD2.Services
@using QBD2.Entities
@using QBD2.Models
@inject DeviationService DeviationService
@inject MasterPartService MasterPartService
@inject PartService PartService
@inject IWebHostEnvironment env
@inject ExcelUploadService ExcelUploadService
@inject IToastService toastService
@inject NavigationManager NavigationManager
@inject BlobService BlobService

<style>
    table, th, td {
        border: 2px solid;
    }

    .RightButton {
        height: 38px;
        width: 75px;
        margin-left: -32px;
    }

    .Width200 {
        width: 200px;
        left: 117px;
    }

    .SaveButton {
        float: right;
        width: 100px;
        left: 72%;
    }
</style>


<h3>Deviations</h3>
@if (AddEditDeviation == null)
{
    <TelerikGrid Data="@GridData"
             Pageable="true"
             Sortable="true"
             FilterMode="@GridFilterMode.FilterRow">
        <GridToolBar>
            <TelerikButton Icon="add" @onclick="(() => SelectRecord(null))">Add new Deviation</TelerikButton>
        </GridToolBar>
        <GridColumns>
            <GridColumn Field="@(nameof(Deviation.DateCreated))" Title="Date Created" DisplayFormat="{0:dd-MM-yyyy}"/>
            <GridColumn Field="@(nameof(Deviation.MasterPartNumber))" Title="Part Number" Filterable="false"/>
            <GridColumn Field="@(nameof(Deviation.MasterPartDescription))" Title="Description" Filterable="false"/>
            <GridCommandColumn Width="150px">
                    @*<GridCommandButton Command="Save" Icon="eye"></GridCommandButton>*@
                    <GridCommandButton Icon="edit" OnClick="@((args)=> SelectRecord(args.Item as Deviation))"></GridCommandButton>
                    <GridCommandButton Command="Delete" Icon="delete"></GridCommandButton>
            </GridCommandColumn>
        </GridColumns>
    </TelerikGrid>
}

@if (AddEditDeviation != null)
{
    <br />
    @* <div class="row">
        <div class="col-md-12">
        <h5><i class="fa-regular fa-plus"></i> Manage Deviation</h5><br />
        </div>
        </div>*@

    <TelerikAutoComplete Data="@MasterParts" @bind-Value="@selectedMasterPart"
                     ValueField="@( nameof(MasterPart.PartNumber) )"
                     Filterable="true" MinLength="3"
                     OnChange="@MyOnChangeHandler"
                     ClearButton="true" />

    <EditForm EditContext="@ECAddEditDeviation">
        <DataAnnotationsValidator />


        @*                <div class="form-group row">
            <label for="ItemPortNumber" class="col-sm-2 col-form-label">Item Number</label>
            <div class="col-md-11">
            <TelerikTextBox @bind-Value="@AddEditDeviation.MasterPart." Class="form-control"></TelerikTextBox>
            <ValidationMessage For="@(() => AddEditDeviation.ItemPortNumber)"></ValidationMessage>
            </div>
            </div>*@

        <div class="form-group row">
            <label for="PortDescription" class="col-sm-2 col-form-label">Part Description</label>
            <div class="col-md-10">
                <label>@selectedMasterPartDescription</label>
            </div>
        </div>

        <div class="form-group row">
            <div class="row">
                <label for="ReasonforManufacturingDeviation" class="col-sm-8 col-form-label">Reason for Manufacturing Deviation</label>
            </div>
            <div class="row">
                <div class="col-md-11">
                    <textarea @bind-value="AddEditDeviation.ReasonforManufacturingDeviation" class="form-control" rows="8" @bind-value:event="oninput"></textarea>
                    <ValidationMessage For="@(() => AddEditDeviation.ReasonforManufacturingDeviation)"></ValidationMessage>
                </div>
            </div>
        </div>

        <div class="form-group row">
            <div class="row">
                <label class="col-md-6 col-form-label">Location</label>
            </div>
            <div class="form-group row">
                <div class="col-md-12">
                    <table>
                        <thead>
                            <tr>
                                <th width="25%"></th>
                                <th width="15%">SVRART</th>
                                <th width="15%">SEVE</th>
                                <th width="15%">2</th>
                                <th width="15%">WIP</th>
                                <th width="15%">3(FGI)</th>
                            </tr>
                        </thead>
                        <tbody>
                            <tr>
                                <td>Vendor</td>
                                <td><input type="text" class="form-control" @bind-value="AddEditDeviation.VendorSVPART"/></td>
                                <td><input type="text" class="form-control" @bind-value="AddEditDeviation.VendorSEVE"/></td>
                                <td><input type="text" class="form-control" @bind-value="AddEditDeviation.Vendor2"/></td>
                                <td><input type="text" class="form-control" @bind-value="AddEditDeviation.VendorWIP"/></td>
                                <td><input type="text" class="form-control" @bind-value="AddEditDeviation.Vendor3FGI"/></td>
                            </tr>
                            <tr>
                                <td>LSA</td>
                                <td><input type="text" class="form-control" @bind-value="AddEditDeviation.LSASVPART"/></td>
                                <td><input type="text" class="form-control" @bind-value="AddEditDeviation.LSASEVE" /></td>
                                <td><input type="text" class="form-control" @bind-value="AddEditDeviation.LSA2"/></td>
                                <td><input type="text" class="form-control" @bind-value="AddEditDeviation.LSAWIP"/></td>
                                <td><input type="text" class="form-control" @bind-value="AddEditDeviation.LSAFGI"/></td>
                            </tr>
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
        <br />
        <div class="form-group row">
            <label for="ECORequired" class="col-sm-2 col-form-label">ECO Required</label>
            <div class="col-sm-7">
                <InputRadioGroup Name="ECORequired" @bind-Value="AddEditDeviation.ECORequired">
                    <InputRadio Name="ECORequired" Value="@(true)" /> Yes
                    <InputRadio Name="ECORequired" Value="@(false)" /> No
                </InputRadioGroup>
                <ValidationMessage For="@(() => AddEditDeviation.ECORequired)"></ValidationMessage>
            </div>
        </div>

        @if (AddEditDeviation.ECORequired)
        {
            <div class="form-group row">
                <label for="ECONumber" class="col-sm-2 col-form-label">ECO Number</label>
                <div class="col-md-11">
                    <TelerikTextBox @bind-Value="@AddEditDeviation.ECONumber" Class="form-control"></TelerikTextBox>
                    <ValidationMessage For="@(() => AddEditDeviation.ECONumber)"></ValidationMessage>
                </div>
            </div>
        }

        <div class="form-group row">
            <div class="col-md-11">
                <label for="ReasonforManufacturingDeviation">Comment Corrective Action</label><br>
                <textarea @bind-value="AddEditDeviation.CommentCorrectiveAction" class="form-control" rows="4" @bind-value:event="oninput"></textarea>
                <ValidationMessage For="@(() => AddEditDeviation.CommentCorrectiveAction)"></ValidationMessage>
            </div>

        </div>

        <br />
        <div class="row">
            <div class="col-md-12">
                <h5>Affected Serial Numbers</h5>
                <hr>
            </div>
        </div>

        <div class="row">
            <div class="col-md-2">
                <div class="row">
                    <div class="col-md-10">
                        <input type="text" class="form-control" style="width:170px;" @bind-value="@SerialNumber"/>
                    </div>
                    <div class="col-md-2">
                        <TelerikButton Class="RightButton" @onclick="(()=> btnAddFindSerailNumberOnClick())">Add</TelerikButton>
                    </div>
                </div><br />
                <div class="form-group row" style="margin-left: 0px;">

                    @*<table>
                        <thead>
                            <tr>
                                <th>Serial Number</th>
                            </tr>
                        </thead>
                        <tbody>
                            <tr style="height:25px;background-color:lightgray">
                                <td></td>
                            </tr>
                            <tr style="height:25px;">
                                <td></td>
                            </tr>
                            <tr style="height:25px;background-color:lightgray">
                                <td></td>
                            </tr>
                        </tbody>
                    </table>*@

                    <TelerikGrid Data=@GridParts Sortable="true" Pageable="false">
                         <GridColumns>
                             <GridColumn Field=@nameof(Part.SerialNumber) Title="Serial Number" Filterable="false">
                             </GridColumn>
                         </GridColumns>
                         <NoDataTemplate>
                             <text>No Records Available</text>
                         </NoDataTemplate>
                    </TelerikGrid>

                </div>
            </div>
            <div class="col-md-1" style="text-align:center;margin-top:82px;">OR</div>
            <div class="col-md-3">
                <form Model="@serialNumberRange" @onsubmit="OnSubmitRange">
                    <div class="row">
                        <label class="form-label">Range</label>
                    </div>
                    @if (RangeAddPartsToDeviationError != null && RangeAddPartsToDeviationError.Count() > 0)
                    {
                        <div class="row">
                            @foreach(var item in RangeAddPartsToDeviationError)
                            {
                                <label class="text-danger">@item.Error</label><br />
                            }
                        </div>
                     }
                    <DataAnnotationsValidator />
                    <ValidationSummary />
                    <div class="form-group row">
                        <label for="startSerialNumber" class="col-md-5 col-form-label">Start Serial Number</label>
                        <div class="col-sm-5">
                            <TelerikTextBox @bind-Value="@serialNumberRange.StartSerialNumber" Class="form-control"></TelerikTextBox>

                        </div>
                    </div>
                    <div class="form-group row" style="margin-top:15px;">
                        <label for="endSerialNumber" class="col-md-5 col-form-label">End Serial Number</label>
                        <div class="col-sm-5">
                            <TelerikTextBox @bind-Value="@serialNumberRange.EndSerialNumber" Class="form-control"></TelerikTextBox>
                        </div>
                    </div>
                    <div class="form-group row" style="margin-top:15px;">
                        <TelerikButton Class="SaveButton">Add Range</TelerikButton>
                    </div>
                </form>
            </div>
            <div class="col-md-1" style="text-align:center;margin-top:82px;">OR</div>
            <div class="col-md-3">
                <div class="row">
                    <label class="form-label">Upload Excel file with Serial Number List</label>
                </div>
                @if (ExcelAddPartsToDeviationError != null && ExcelAddPartsToDeviationError.Count() > 0)
                {
                    <div class="row">
                        @foreach(var item in ExcelAddPartsToDeviationError)
                        {
                            <label class="text-danger">@item.Error</label><br />
                        }
                    </div>
                }
                <br />
                <div class="row">
                    <form @onsubmit="OnSubmitExcelFile">
                        <InputFile OnChange="OnInputFileChange" />
                        <br /><br />
                        <TelerikButton Class="SaveButton">Upload Selected File(s)</TelerikButton>
                    </form>
                </div>
            </div>
        </div>
        <br />
        <div class="row">
            <TelerikButton Class="SaveButton" OnClick="(()=>HandleValidSubmit())">Save</TelerikButton>
        </div>
        <br />
    </EditForm>
}

@code {

    string selectedMasterPart { get; set; }
    string selectedMasterPartDescription { get; set; }
    public IEnumerable<MasterPart> MasterParts { get; set; }

    List<Deviation> GridData { get; set; }

    Deviation OriginalRecord { get; set; }

    Deviation AddEditDeviation { get; set; }

    EditContext ECAddEditDeviation { get; set; }

    List<Part> GridParts { get; set; } = new List<Part>();

    string SerialNumber { get; set; }

    List<AddPartsToDeviationError> RangeAddPartsToDeviationError { get; set; }

    List<AddPartsToDeviationError> ExcelAddPartsToDeviationError { get; set; }

    protected override async Task OnInitializedAsync()
    {
        //GridData = Enumerable.Range(1, 30).Select(x => new Deviation
        //    {
        //        Id = x,
        //        Item = "Zulu 4 Upper PCBA",
        //        DateCreated = DateTime.Now.Date,
        //        Originator = "James Giltner"
        //    }).ToList();

        GridData = await DeviationService.ReadDeviations();
        MasterParts = MasterPartService.GetAllMasterParts();
        base.OnInitialized();
    }

    public async Task SelectRecord(Deviation deviation)
    {
        OriginalRecord = null;
        if (deviation != null)
        {
            OriginalRecord = deviation;
            AddEditDeviation = new Deviation()
            {
                DeviationId = OriginalRecord.DeviationId,
                DateCreated = OriginalRecord.DateCreated,
                MasterPartId =  OriginalRecord.MasterPartId,
                Originator = OriginalRecord.Originator,
                ReasonforManufacturingDeviation = OriginalRecord.ReasonforManufacturingDeviation,
                ECORequired = OriginalRecord.ECORequired,
                ECONumber = OriginalRecord.ECONumber,
                CommentCorrectiveAction = OriginalRecord.CommentCorrectiveAction,
                VendorSVPART = OriginalRecord.VendorSVPART,
                VendorSEVE = OriginalRecord.VendorSEVE,
                Vendor2 = OriginalRecord.Vendor2,
                VendorWIP = OriginalRecord.VendorWIP,
                Vendor3FGI = OriginalRecord.Vendor3FGI,
                LSASVPART = OriginalRecord.LSASVPART,
                LSASEVE = OriginalRecord.LSASEVE,
                LSA2 = OriginalRecord.LSA2,
                LSAWIP = OriginalRecord.LSAWIP,
                LSAFGI = OriginalRecord.LSAFGI
            };
            selectedMasterPartDescription = OriginalRecord.MasterPart.Description;
            selectedMasterPart = OriginalRecord.MasterPart.PartNumber;
        }
        else
        {
            AddEditDeviation = new Deviation();
            AddEditDeviation.DeviationId = 0;
        }

        if (AddEditDeviation != null)
        {
            ECAddEditDeviation = new EditContext(AddEditDeviation);
        }
        StateHasChanged();
    }
    string Message = "No file(s) selected";
    IReadOnlyList<IBrowserFile> selectedFiles;

    private void OnInputFileChange(InputFileChangeEventArgs e)
    {
        selectedFiles = e.GetMultipleFiles();
        Message = $"{selectedFiles.Count} file(s) selected";
        this.StateHasChanged();
    }

    private async void OnSubmitExcelFile()
    {
        if (AddEditDeviation.MasterPartId == 0)
        {
            toastService.ShowError("Please Select Master Part", "Error");
            return;
        }

        foreach (var file in selectedFiles)
        {
            //Stream stream = file.OpenReadStream();
            //var path = $"{env.WebRootPath}\\upload\\{file.Name}";
            //FileStream fs = File.Create(path);
            //await stream.CopyToAsync(fs);
            //stream.Close();
            //fs.Close();

            var path = await BlobService.UploadBlob(file);

            //Test Deviation

            //Deviation testDeviation = new Deviation
            //    {
            //        ECORequired = false,
            //        MasterPartId = 1796
            //    };

            //testDeviation = DeviationService.CreateDeviation(testDeviation);

            MasterPart selectedMasterPart = MasterParts.Where(x => x.MasterPartId == AddEditDeviation.MasterPartId).FirstOrDefault();

            var errors = await ExcelUploadService.ProcessSerialNumberExcelFile(path, selectedMasterPart);
            if (errors != null && errors.Parts != null && errors.Parts.Count() > 0 && GridParts != null)
            {
                GridParts.AddRange(errors.Parts);
                GridParts = new List<Part>(GridParts);
            }

            if (errors != null && errors.AddPartsToDeviationError != null && errors.AddPartsToDeviationError.Count() > 0)
            {
                ExcelAddPartsToDeviationError = errors.AddPartsToDeviationError;
            }
            else
            {
                ExcelAddPartsToDeviationError = null;
            }
        }
        Message = $"{selectedFiles.Count} file(s) uploaded on server";
        this.StateHasChanged();
    }
    SerialNumberRange serialNumberRange = new();
    private async void OnSubmitRange()
    {
        if (AddEditDeviation.MasterPartId == 0)
        {
            toastService.ShowError("Please Select Master Part", "Error");
            return;
        }

        MasterPart selectedMasterPart = MasterParts.Where(x => x.MasterPartId == AddEditDeviation.MasterPartId).FirstOrDefault();

        var x = serialNumberRange;

        //Deviation testDeviation = new Deviation
        //    {
        //        ECORequired = false,
        //        MasterPartId = 1796
        //    };

        //testDeviation = DeviationService.CreateDeviation(testDeviation);

        var errors = await PartService.AddPartsToDeviationByStartEnd(selectedMasterPart, Convert.ToInt32(serialNumberRange.StartSerialNumber), Convert.ToInt32(serialNumberRange.EndSerialNumber));
        if (errors != null && errors.Parts != null && errors.Parts.Count() > 0 && GridParts != null)
        {
            GridParts.AddRange(errors.Parts);
            GridParts = new List<Part>(GridParts);
        }

        if (errors != null && errors.AddPartsToDeviationError != null && errors.AddPartsToDeviationError.Count() > 0)
        {
            RangeAddPartsToDeviationError = errors.AddPartsToDeviationError;

        }
        else
        {
            RangeAddPartsToDeviationError = null;
        }

        StateHasChanged();
    }

    private async Task HandleValidSubmit()
    {
        var x = "test";
        // Process the valid form
        if (AddEditDeviation != null)
        { 
            if (AddEditDeviation.MasterPartId == 0)
            {
                toastService.ShowError("Please Select Master Part", "Error");
                return;
            }

            if (GridParts != null && GridParts.Count() > 0)
            {
                List<PartDeviation> PartDeviations = new List<PartDeviation>();  
                foreach(var part in GridParts)
                {
                    if (part.PartId > 0 && !PartDeviations.Any(x=>x.PartId == part.PartId))
                    {
                        PartDeviation partDeviation = new PartDeviation();
                        partDeviation.PartId = part.PartId;
                        PartDeviations.Add(partDeviation);
                    }
                }
                AddEditDeviation.PartDeviations = PartDeviations;
            }

            var resultDeviation = await DeviationService.CreateDeviationAsync(AddEditDeviation);
            if (resultDeviation != null && resultDeviation.DeviationId > 0)
            {
                toastService.ShowInfo("Record Saved Successfully", "Info");
                SerialNumber = string.Empty;
                GridParts.Clear();
                NavigationManager.NavigateTo("deviation",true);
                StateHasChanged();
            }
            else
            {
                toastService.ShowError("Record Not Saved ! Somwthing Worng", "Error");
            }
        }
    }

    private void MyOnChangeHandler(object theUserChoice)
    {
        var result = string.Format("The user confirmed: {0}", (string)theUserChoice);

        MasterPart selectedMasterPart = MasterParts.Where(x => x.PartNumber == (string)theUserChoice).FirstOrDefault();
        if(selectedMasterPart != null)
        {
            selectedMasterPartDescription = selectedMasterPart.Description;
            if (AddEditDeviation == null)
            {
                 AddEditDeviation = new Deviation();
            }
            AddEditDeviation.MasterPart = selectedMasterPart;
            AddEditDeviation.MasterPartId = selectedMasterPart.MasterPartId;
            StateHasChanged();
        }
        //HandleValidSubmit();

        //AddEditDeviation = DeviationService.CreateDeviation(AddEditDeviation);
    }

    private async Task btnAddFindSerailNumberOnClick()
    {
        if (string.IsNullOrEmpty(SerialNumber))
        {
            toastService.ShowError("Please Enter Serial Number", "Error");
            return;
        }

        if(AddEditDeviation != null && AddEditDeviation.MasterPartId > 0 && !string.IsNullOrWhiteSpace(SerialNumber))
        {
            var resultPart = await PartService.GetPartBySerialNumberAndMasterPart(SerialNumber.Trim(),AddEditDeviation.MasterPartId);
            if (resultPart == null || resultPart.PartId == 0)
            {
                toastService.ShowError("No Record Found ! Please Enter Valid Serial Number", "Error");
                return;
            }

            if (resultPart != null && resultPart.PartId > 0)
            {
                if(GridParts != null && GridParts.Count() > 0 && GridParts.Any(x => x.PartId == resultPart.PartId))
                {
                    toastService.ShowError("Serial Number already exists.");
                    return;
                }

                GridParts.Add(resultPart);
                GridParts = new List<Part>(GridParts);
            }
        }
    }
}