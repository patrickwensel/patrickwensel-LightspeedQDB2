@page "/inspection"
@using QBD2.Models
@using QBD2.Services
@using QBD2.Entities
@inject InspectionService InspectionService
@inject IToastService toastService
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@inject BuildStationFailureCodeService BuildStationFailureCodeService

<div class="row alerts-row">
    <div class="col-md-9">
        <h3 class="alert-title"><i class="fa fa-search"></i> Inspection</h3>
    </div>

    <div class="col-md-3 add-alrert-btn">
        <TelerikButton Icon="add" OnClick="@(()=> findInspectionsDetail(null))">Add New Inspection</TelerikButton>
    </div>
</div>
<hr />

<div class="row">
    <div class="current-inspection">
        <h3 class="alert-table-title">Current Inspections</h3>
        <div class="al-table">
            <TelerikGrid Data="@MyData"
                         Pageable="true"
                         Sortable="true"
                         Resizable="true"
                         FilterMode="@GridFilterMode.FilterRow"
            >

                <GridColumns>
                    <GridColumn Field="Part.SerialNumber" Title="Serial Number" Groupable="false" Filterable="true" Sortable="false">
                        <HeaderTemplate>
                            <span><i class="fa-solid fa-barcode" style="color: #11515E;"></i> Serial Number</span>
                        </HeaderTemplate>
                    </GridColumn>
                    <GridColumn Field="@(nameof(Entities.Inspection.UpdateDate))" Title="Update Date" Groupable="false" Sortable="true" Filterable="true">
                        <HeaderTemplate>
                            <span><i class="fa-solid fa-arrows-rotate" style="color: #11515E;"></i> Update Date</span>
                        </HeaderTemplate>
                    </GridColumn>
                    <GridColumn Field="@(nameof(Entities.Inspection.Status))" Title="Status" Groupable="false" Sortable="true" Filterable="true">
                        <HeaderTemplate>
                            <span><i class="fa-duotone fa-wave-pulse" style="color: #11515E;"></i> Status</span>
                        </HeaderTemplate>
                        <Template>
                            @{
                                var inspection = context as Entities.Inspection;
                                if (inspection != null && inspection.Pass == true)
                                {
                                    <lable style="color:green">@inspection.Status</lable>
                                }
                                else
                                {
                                    <lable style="color:red;">@inspection.Status</lable>
                                }
                            }
                        </Template>
                    </GridColumn>

                    <GridColumn Field="Station.Name" Title="Station" Groupable="false" Filterable="true" Sortable="false">
                        <HeaderTemplate>
                            <span><i class="fa-solid fa-arrow-trend-up" style="color: #11515E;"></i> Station</span>
                        </HeaderTemplate>
                    </GridColumn>

                    <GridColumn Field="@(nameof(Entities.Inspection.GeneralComments))" Title="Comments" Groupable="false" Sortable="true" Filterable="false">
                        <HeaderTemplate>
                            <span><i class="fa-regular fa-comments" style="color: #11515E;"></i>Comments</span>
                        </HeaderTemplate>
                    </GridColumn>

                    <GridCommandColumn Width="10%;">
                        <GridCommandButton OnClick="@((args)=> findInspectionsDetail(args.Item as Entities.Inspection))"><i class="fa-solid fa-chevron-right" style="color: #69A3AF;"></i></GridCommandButton>
                    </GridCommandColumn>
                </GridColumns>
            </TelerikGrid>
        </div>
    </div>
</div>

<div class="row">
    <div class="col-md-12">
        <div id="mySidebar" class="sidebar">
            <div class="form-group row inspection">
                <div class="col-md-7"> </div>
                <div class=" col-sm-5 right-scroll-column" style="border-left:unset!important;">

                    <div class="row">
                        <div class="col-sm-9 left-input">
                            <TelerikTextBox id="txtSerialSearch" Class="form-control col-sm-12" @bind-Value="SerialNumber" PlaceHolder="Search for a Serial NUmber"></TelerikTextBox>
                        </div>
                        <div class=" col-sm-3 b-btn">
                            <TelerikButton id="btnSearch" OnClick="(()=>btnFindOnClick(true))" ButtonType="@ButtonType.Submit"><i class="fa fa-search" aria-hidden="true"></i> Find</TelerikButton>
                        </div>
                    </div>

                    <div class="row class=">
                        <div class="col-sm-12">
                            <label class="col-sm-12 col-form-label">Desc :</label>
                            <label id="lblDescValue" class="col-sm-12 col-form-label right-value font-b" @onclick="(() => CloseAddEditInspectionWindow())">@(dataInspectionModel !=null ? dataInspectionModel.Description:string.Empty) <i class="fa-solid fa-circle-xmark" ></i></label>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-sm-12">
                            <label class="col-sm-12 col-form-label">Part Number :</label>
                            <label id="lblPartNumberValue" class="col-sm-12 col-form-label right-value n-font">@(dataInspectionModel !=null ? dataInspectionModel.PartNumber:string.Empty)</label>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-sm-12">
                            <label class="col-sm-12 col-form-label">Serial Number :</label>
                            <label id="lblSerialNumberValue" class="col-sm-12 col-form-label right-value n-font">@(dataInspectionModel !=null ? dataInspectionModel.SerialNumber:string.Empty)</label>
                        </div>

                    </div>

                    <div class="row">

                        <div class=" col-sm-12 alert-section">
                            <TelerikGrid Data=@GridAlertDeviationData Sortable="true" Pageable="false">
                                <GridColumns>
                                    <GridColumn Field=@nameof(AlertDeviationDetailModel.Title) Title="Alerts & Deviations" Filterable="false">
                                        <HeaderTemplate>
                                            <span><i class="fa-light fa-bell-exclamation" style="color: #11515E;"></i> Alerts & Deviations</span>
                                        </HeaderTemplate>
                                    </GridColumn>
                                    <!----<GridColumn Field=@nameof(AlertDeviationDetailModel.Title) Title="Alerts & Deviations" Filterable="false">
                                    </GridColumn>---->
                                    <GridCommandColumn Width="60px">
                                        <GridCommandButton Icon="eye" OnClick="@((args)=> SelectAlertDeviationRecord(args.Item as AlertDeviationDetailModel))"></GridCommandButton>
                                    </GridCommandColumn>
                                </GridColumns>
                                <NoDataTemplate>
                                    <text>No Records Available</text>
                                </NoDataTemplate>
                            </TelerikGrid>
                        </div>

                    </div>

                    @{
                        if (@IsWorkOrderInspection)
                        {
                            if (OriginalWorkOrderInspection != null)
                            {
                                <div class="row">
                                    <label class="col-sm-3 col-form-label">Status</label>
                                    <div class="col-sm-9">
                                        <ul class="switch-btn">
                                            <li class="@(OriginalWorkOrderInspection.Pass?"active":"")" @onclick="(() => OnDataStatusChangeHandler(true))"><i class="fa-regular fa-circle-check"></i> Passed</li>
                                            <li class="failed @(OriginalWorkOrderInspection.Pass?"":"active")" @onclick="(() => OnDataStatusChangeHandler(false))"><i class="fa-light fa-circle-xmark"></i> Failed</li>
                                        </ul>
                                    </div>
                                </div>

                                if (!OriginalWorkOrderInspection.Pass)
                                {
                                    <div class="row">
                                        <label class="col-sm-3 col-form-label">Failure Reason</label>
                                        <div class="col-sm-9">
                                            <TelerikDropDownList Data="@dataBuildStationFailureCodeDropdown" class="col-sm-11" TextField="DropText" ValueField="DropValue"
                                                     @bind-Value="@OriginalWorkOrderInspection.InspectionFailed.BuildStationFailureCodeId" DefaultText="Select Failure Reason">
                                            </TelerikDropDownList>
                                        </div>
                                    </div>
                                    <div class="row">
                                        <label class="col-sm-3 col-form-label">Comment</label>
                                        <div class="col-sm-9">
                                            <TelerikTextArea @bind-Value="@OriginalWorkOrderInspection.InspectionFailed.Comment"></TelerikTextArea>
                                        </div>
                                    </div>
                                }

                                <div class="row">
                                    <div class="col-sm-12 save-btn">
                                        <TelerikButton ButtonType="@ButtonType.Button" Enabled=@(!isSaveInspectionClick) OnClick="@btnSaveInspectionOnClick"><i class="fa-solid fa-floppy-disk"></i> Save</TelerikButton>
                                    </div>
                                </div>
                            }
                        }
                        else
                        {
                            <div class="row station-section">
                                <label class="col-sm-2 col-form-label">Station</label>

                                <div class="col-sm-10">
                                    <TelerikDropDownList Data="@dataStationDropdown" class="col-sm-11" TextField="DropText" ValueField="DropValue"
                                                     @bind-Value="@DdlStationValue" DefaultText="Select Status ">
                                    </TelerikDropDownList>
                                </div>

                            </div>

                            <div class="row">
                                <label class="col-sm-2 col-form-label">Status</label>
                                <div class="col-sm-10">
                                    <ul class="switch-btn">
                                        <li class="@AddActiveCssClass" @onclick="(() => OnDataStatusChangeHandler(1))"><i class="fa-regular fa-circle-check"></i> Passed</li>
                                        <li class="failed @AddInActiveCssClass" @onclick="(() => OnDataStatusChangeHandler(0))"><i class="fa-light fa-circle-xmark"></i> Failed</li>
                                    </ul>
                                </div>
                            </div>

                            if (@RdoStatusValue == 0)
                            {
                                <div class="row">
                                    <label class="col-sm-2 col-form-label">Primary</label>
                                    <div class="col-sm-10">
                                        <TelerikDropDownList Data="@dataFailurePrimaryDropdown" class="col-sm-11" TextField="DropText" ValueField="DropValue"
                                                     @bind-Value="@DdlFailurePrimaryValue" DefaultText="Select Failure Primary" OnChange="@MyOnChangeHandler">
                                        </TelerikDropDownList>
                                    </div>
                                </div>
                                <div class="row">
                                    <label class="col-sm-2 col-form-label">Secondary</label>
                                    <div class="col-sm-10">
                                        <TelerikDropDownList Data="@dataFailureDropdown" class="col-sm-11" TextField="DropText" ValueField="DropValue"
                                                     @bind-Value="@DdlFailureValue" DefaultText="Select Failure ">
                                        </TelerikDropDownList>
                                    </div>
                                </div>
                                <div class="row">
                                    <label class="col-sm-2 col-form-label">Comment</label>
                                    <div class="col-sm-10">
                                        <TelerikTextArea Class="form-control col-sm-11" @bind-Value="@FailureCommentValue"></TelerikTextArea>
                                    </div>
                                </div>
                                <div class="row">
                                    <div class="col-sm-12 add-reason-btn">
                                        <TelerikButton id="btnSearch" ButtonType="@ButtonType.Button" OnClick="@btnAddOnClick"><i class="fa-light fa-plus"></i> Add Reason</TelerikButton>
                                    </div>
                                </div>
                                <div class="reason-section">
                                    <h3>Reasons</h3>
                                    <TelerikGrid Data="@dataFailureGrid"
                                     Sortable="true"
                                     Resizable="true"
                                     EditMode="Telerik.Blazor.GridEditMode.Inline"
                                     OnDelete=@DeleteHandler>
                                        <GridColumns>
                                            <GridColumn Field="FailurePrimaryName" Title="Primary" Groupable="false" />
                                            <GridColumn Field="FailureName" Title="Secondary" Groupable="false" />
                                            <GridColumn Field="Comment" Title="Comments" Groupable="false" />
                                            <GridCommandColumn Width="10%">
                                                <GridCommandButton Command="Delete" Icon="delete"></GridCommandButton>
                                            </GridCommandColumn>
                                        </GridColumns>
                                    </TelerikGrid>
                                </div>
                            }

                            <div class="row">
                                <label class="col-sm-2 col-form-label">General Comments</label>

                                @{
                                    if (dataInspection == null)
                                        dataInspection = new Models.Inspection();
                                }
                                <div class="col-sm-10">
                                    <TelerikTextArea Id="txtGenerelComment" @bind-Value="@dataInspection.GeneralComments">
                                    </TelerikTextArea>
                                </div>
                            </div>

                            <div class="row">
                                <div class="col-sm-12 save-btn">
                                    <TelerikButton ButtonType="@ButtonType.Button" OnClick="@btnSaveOnClick"><i class="fa-solid fa-floppy-disk"></i> Save</TelerikButton>
                                </div>
                            </div>
                        }
                    }
                </div>



            </div>
        </div><!--my sidebar end--->

    </div>
</div>


@if(SelectedAlertDeviationRecord != null && IsDisplayPopUpWindow == true)
{
    <TelerikWindow Visible="@(SelectedAlertDeviationRecord != null && IsDisplayPopUpWindow == true)" Modal="true" Width="570px" Draggable="false" Left="1450px">
        <WindowTitle>
            @{

                <h5><!---<i aria-hidden="true"></i>--->
                    @if(SelectedAlertDeviationRecord.AlertId > 0)
                    {
                        <div class="row p-lr">
                            <div class="col-md-11">
                                <text><i class="fa-light fa-bell-exclamation"></i> Alert Detail </text>
                            </div>


                            <div class="col-md-1" @onclick="(()=>ClearAlertDeviationSelection())"><i class="fa-light fa-circle-xmark" ></i></div>
                        </div>
                    }
                    else if(SelectedAlertDeviationRecord.DeviationId > 0)
                    {
                        <div class="row p-lr">
                            <div class="col-md-11">
                                <text><i class="fa-light fa-arrows-turn-to-dots" b-kq6mrvu7il=""></i> Deviation Detail</text>
                            </div>
                            <div class="col-md-1" @onclick="(()=>ClearAlertDeviationSelection())"><i class="fa-light fa-circle-xmark"></i></div>
                        </div>
                    }
                </h5>

            }
        </WindowTitle>
        <WindowContent>
            @if (SelectedAlertDeviationRecord.AlertId > 0)
            {
                <div class="form-group row popup-frm">
                    <label for="Title" class="col-sm-12 col-form-label">Title</label>
                    <label for="Title" class="col-sm-12 col-form-label pop-value-title">@SelectedAlertDeviationRecord.Alert.Title</label>

                </div>

                <div class="form-group row popup-frm">
                    <label for="ReasonforManufacturingDeviation" class="col-sm-12 col-form-label">Reason for Manufacturing Deviation</label>

                    <label for="ReasonforManufacturingDeviation" class="col-sm-12 col-form-label pop-value">@SelectedAlertDeviationRecord.Alert.ReasonforManufacturingDeviation</label>

                </div>

                <div class="form-group row popup-frm">
                    <label for="DateCreated" class="col-sm-12 col-form-label">Date Created</label>

                    <label for="DateCreated" class="col-sm-12 col-form-label pop-value">
                        @if (SelectedAlertDeviationRecord.Alert != null && SelectedAlertDeviationRecord.Alert.DateCreated != null)
                        {
                            @SelectedAlertDeviationRecord.Alert.DateCreated.Value.ToString("dd-MM-yyyy")
                        }
                    </label>

                </div>

                <div class="form-group row popup-frm">
                    <label for="ExpirationDate" class="col-sm-12 col-form-label">Expiration Date</label>

                    <label for="ExpirationDate" class="col-sm-12 col-form-label pop-value">
                        @if (SelectedAlertDeviationRecord.Alert != null && SelectedAlertDeviationRecord.Alert.ExpirationDate != null)
                        {
                            @SelectedAlertDeviationRecord.Alert.ExpirationDate.Value.ToString("dd-MM-yyyy")
                        }
                    </label>

                </div>

                <div class="form-group row popup-frm">
                    <label for="MasterPartNumber" class="col-sm-12 col-form-label">Master Part Number</label>
                    <div class="col-sm-8">
                        <label for="MasterPartNumber" class="col-sm-12 col-form-label pop-value">@SelectedAlertDeviationRecord.MasterPartNumber</label>
                    </div>
                </div>

                <div class="form-group row popup-frm">
                    <label for="MasterPartDescription" class="col-sm-12 col-form-label">Master Part Description</label>
                    <div class="col-sm-8">
                        <label for="MasterPartDescription" class="col-sm-12 col-form-label pop-value">@SelectedAlertDeviationRecord.MasterPartDescription</label>
                    </div>
                </div>
            }
            else if (SelectedAlertDeviationRecord.DeviationId > 0)
            {
                <div class="form-group row popup-frm">
                    <label for="Title" class="col-sm-12 col-form-label">Title</label>

                    <label for="Title" class="col-sm-12 col-form-label pop-value-title">@SelectedAlertDeviationRecord.Deviation.Title</label>

                </div>

                <div class="form-group row popup-frm">
                    <label for="ReasonforManufacturingDeviation" class="col-sm-12 col-form-label">Reason for Manufacturing Deviation</label>

                    <label for="ReasonforManufacturingDeviation" class="col-sm-12 col-form-label pop-value">@SelectedAlertDeviationRecord.Deviation.ReasonforManufacturingDeviation</label>

                </div>

                <div class="form-group row popup-frm">

                    <div class="form-group row">
                        <div class="col-md-12">
                            <table class="dev-tab" width="100%">
                                <thead>
                                    <tr>
                                        <th width="25%">Location</th>
                                        <th width="15%">SVRART</th>
                                        <th width="15%">SEVE</th>
                                        <th width="15%">2</th>
                                        <th width="15%">WIP</th>
                                        <th width="15%">3(FGI)</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    <tr>
                                        <td>Vendor</td>
                                        <td>@SelectedAlertDeviationRecord.Deviation.VendorSVPART</td>
                                        <td>@SelectedAlertDeviationRecord.Deviation.VendorSEVE</td>
                                        <td>@SelectedAlertDeviationRecord.Deviation.Vendor2</td>
                                        <td>@SelectedAlertDeviationRecord.Deviation.VendorWIP</td>
                                        <td>@SelectedAlertDeviationRecord.Deviation.Vendor3FGI</td>
                                    </tr>
                                    <tr>
                                        <td>LSA</td>
                                        <td>@SelectedAlertDeviationRecord.Deviation.LSASVPART</td>
                                        <td>@SelectedAlertDeviationRecord.Deviation.LSASEVE</td>
                                        <td>@SelectedAlertDeviationRecord.Deviation.LSA2</td>
                                        <td>@SelectedAlertDeviationRecord.Deviation.LSAWIP</td>
                                        <td>@SelectedAlertDeviationRecord.Deviation.LSAFGI</td>
                                    </tr>
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>

                <div class="form-group row popup-frm">
                    <label for="Title" class="col-sm-12 col-form-label">ECO Required</label>

                    <label for="ECORequired" class="col-sm-12 col-form-label pop-value">
                        @if (SelectedAlertDeviationRecord.Deviation.ECORequired)
                        {
                            <text>Yes</text>
                        }
                        else
                        {
                            <text>No</text>
                        }
                    </label>

                </div>

                @if (SelectedAlertDeviationRecord.Deviation.ECORequired)
                {
                    <div class="form-group row popup-frm">
                        <label for="ECONumber" class="col-sm-12 col-form-label">ECO Number</label>

                        <label for="ECONumber" class="col-sm-12 col-form-label pop-value">@SelectedAlertDeviationRecord.Deviation.ECONumber</label>

                    </div>
                }

                <div class="form-group row popup-frm">
                    <label for="CommentCorrectiveAction" class="col-sm-12 col-form-label">Comment Corrective Action</label>

                    <label for="CommentCorrectiveAction" class="col-sm-12 col-form-label pop-value">@SelectedAlertDeviationRecord.Deviation.CommentCorrectiveAction</label>

                </div>

                <div class="form-group row popup-frm">
                    <label for="DateCreated" class="col-sm-12 col-form-label">Date Created</label>

                    <label for="DateCreated" class="col-sm-12 col-form-label pop-value">
                        @if (SelectedAlertDeviationRecord.Deviation != null && SelectedAlertDeviationRecord.Deviation.DateCreated != null)
                        {
                            @SelectedAlertDeviationRecord.Deviation.DateCreated.Value.ToString("dd-MM-yyyy")
                        }
                    </label>

                </div>

                <div class="form-group row popup-frm">
                    <label for="MasterPartNumber" class="col-sm-12 col-form-label">Master Part Number</label>
                    <label for="MasterPartNumber" class="col-sm-12 col-form-label pop-value">@SelectedAlertDeviationRecord.MasterPartNumber</label>

                </div>

                <div class="form-group row popup-frm">
                    <label for="MasterPartDescription" class="col-sm-12 col-form-label">Master Part Description</label>

                    <label for="MasterPartDescription" class="col-sm-12 col-form-label pop-value">@SelectedAlertDeviationRecord.MasterPartDescription</label>
                </div>

            }

            <div class="form-row popup-frm">
                <div class="col-md-12 m-0 p-0" style="text-align: right;">
                    <TelerikButton OnClick="(()=>ClearAlertDeviationSelection())">Cancel</TelerikButton>
                </div>
            </div>
        </WindowContent>
    </TelerikWindow>
}
@code {
    bool IsWorkOrderInspection { get; set; }
    public Models.Inspection OriginalWorkOrderInspection { get; set; }
    List<Models.DropDownBind> dataBuildStationFailureCodeDropdown { get; set; }
    bool isSaveInspectionClick { get; set; }

    List<Entities.Inspection> MyData { get; set; }
    List<Models.InspectionFailed> dataFailureGrid { get; set; }


    List<Models.DropDownBind> dataFailurePrimaryDropdown { get; set; }
    List<Models.DropDownBind> dataFailureDropdown { get; set; }
    List<Models.DropDownBind> dataStatusOptions { get; set; }
    List<Models.DropDownBind> dataStationDropdown { get; set; }
    Models.InspectionModel dataInspectionModel { get; set; }
    Models.Inspection dataInspection { get; set; }
    Models.Inspection SelectedDataInspection { get; set; }

    List<Models.AlertDeviationDetailModel> GridAlertDeviationData { get; set; }
    public Models.AlertDeviationDetailModel SelectedAlertDeviationRecord { get; set; }
    public bool IsDisplayPopUpWindow { get; set; } = false;

    int DdlFailurePrimaryValue { get; set; }
    int DdlFailureValue { get; set; }
    int RdoStatusValue { get; set; }
    int? DdlStationValue { get; set; }
    string SerialNumber { get; set; }
    string FailureCommentValue { get; set; }

    public string AddActiveCssClass { get; set; } = "active";
    public string AddInActiveCssClass { get; set; }

    public void OnDataStatusChangeHandler(bool value)
    {
        OriginalWorkOrderInspection.Pass = value;
    }

    async Task btnSaveInspectionOnClick()
    {
        try
        {
            if (isSaveInspectionClick)
                return;

            isSaveInspectionClick = true;

            if (!OriginalWorkOrderInspection.Pass)
            {
                if (!OriginalWorkOrderInspection.InspectionFailed.BuildStationFailureCodeId.HasValue)
                {
                    toastService.ShowError("Please Select Failure Reason.", "Error");
                    return;
                }

                if (string.IsNullOrWhiteSpace(OriginalWorkOrderInspection.InspectionFailed.Comment))
                {
                    toastService.ShowError("Please Enter Comment.", "Error");
                    return;
                }
            }

            var isSuccess = await InspectionService.SaveWorkOrderInspection(OriginalWorkOrderInspection);
            if (isSuccess)
            {
                toastService.ShowSuccess("Inspection Saved Successfully.", "Success");
                NavigationManager.NavigateTo("Inspection", true);
            }
            else
            {
                toastService.ShowError("Error while saving inspection.", "Error");
            }
        }
        finally
        {
            isSaveInspectionClick = false;
            StateHasChanged();
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await GetGridData();
        GetDropDownData();
        RdoStatusValue = 1;
    }

    async Task GetGridData()
    {
        MyData = await InspectionService.Read();
    }

    async Task GetGridAlertDeviationData()
    {
        if (dataInspectionModel != null && dataInspectionModel.MasterPartId > 0)
        {
            GridAlertDeviationData = await InspectionService.ReadAlertAndDeviationDataByMasterPart(dataInspectionModel.MasterPartId);
        }
        else
        {
            GridAlertDeviationData = new List<Models.AlertDeviationDetailModel>();
        }
        StateHasChanged();
    }

    void GetDropDownData()
    {
        dataFailurePrimaryDropdown = InspectionService.DropDownData(Models.Enum.DropDownType.FailureTypePrimary, null);
        dataStationDropdown = InspectionService.DropDownData(Models.Enum.DropDownType.Station, null);

        dataStatusOptions = new List<Models.DropDownBind>();
        dataStatusOptions.Add(new Models.DropDownBind { DropText = "Pass", DropValue = 1 });
        dataStatusOptions.Add(new Models.DropDownBind { DropText = "Fail", DropValue = 0 });


    }

    void MyOnChangeHandler()
    {
        dataFailureDropdown = InspectionService.DropDownData(Models.Enum.DropDownType.FailureType, DdlFailurePrimaryValue);

    }

    async Task btnAddOnClick()
    {
        if (dataFailureGrid == null)
        {
            dataFailureGrid = new List<Models.InspectionFailed>();
        }

        if (DdlFailurePrimaryValue <= 0)
        {
            toastService.ShowError("Please Select Failure Primary Type", "Error");
            return;
        }

        if (DdlFailureValue <= 0)
        {
            toastService.ShowError("Please Select Failure Type", "Error");
            return;
        }

        if (string.IsNullOrEmpty(FailureCommentValue))
        {
            toastService.ShowError("Please Enter Comment", "Error");
            return;
        }
        if (dataFailureGrid.Count > 0)
        {
            if (dataFailureGrid.Any(p => p.FailureTypeId == DdlFailureValue && p.FailurePrimaryTypeId == DdlFailurePrimaryValue))
            {
                toastService.ShowError("Record Already there !", "Error");
                return;
            }
        }
        dataFailureGrid.Add(new Models.InspectionFailed
            {
                Comment = FailureCommentValue,
                FailurePrimaryTypeId = DdlFailurePrimaryValue,
                FailureTypeId = DdlFailureValue,
                FailurePrimaryName = dataFailurePrimaryDropdown.FirstOrDefault(p => p.DropValue == DdlFailurePrimaryValue)?.DropText,
                FailureName = dataFailureDropdown.FirstOrDefault(p => p.DropValue == DdlFailureValue)?.DropText,
            });
        FailureCommentValue = string.Empty;
        DdlFailurePrimaryValue = 0;
        DdlFailureValue = 0;
        MyOnChangeHandler();
        dataFailureGrid = new List<Models.InspectionFailed>(dataFailureGrid);


    }
    async Task DeleteHandler(GridCommandEventArgs args)
    {
        Models.InspectionFailed item = (Models.InspectionFailed)args.Item;
        dataFailureGrid.Remove(item);

    }

    async Task findInspectionsDetail(Entities.Inspection inspection)
    {
        await JSRuntime.InvokeVoidAsync("openNav");
        if (inspection != null && inspection.Part != null)
        {
            SerialNumber = inspection.Part.SerialNumber;
            SelectedDataInspection = await InspectionService.GetInspectionsById(inspection.InspectionId);
            await btnFindOnClick(false);
        }
        else
        {
            await btnFindOnClick(false);
        }
    }

    async Task btnFindOnClick(bool isFindButton)
    {
        if (string.IsNullOrEmpty(SerialNumber))
        {
            toastService.ShowError("Please Enter Serial Number", "Error");
            return;
        }
        IsWorkOrderInspection = false;
        dataInspectionModel = await InspectionService.GetDataBySerialNumber(SerialNumber.Trim());
        await GetGridAlertDeviationData();
        if (dataInspectionModel == null)
        {
            toastService.ShowError("No Record Found ! Please Enter Valid Serial Number", "Error");
            return;
        }
        if (dataInspectionModel.Inspection != null)
        {
            if (SelectedDataInspection != null && SelectedDataInspection.WorkOrderId.HasValue && !isFindButton)
            {
                IsWorkOrderInspection = true;
                dataBuildStationFailureCodeDropdown = BuildStationFailureCodeService.DropDownDataByPartId(SelectedDataInspection.PartId);
                OriginalWorkOrderInspection = await InspectionService.GetInspectionByWorkOrderIdAndPartId(SelectedDataInspection.WorkOrderId.Value, SelectedDataInspection.PartId);
            }
            else
            {
                if (isFindButton)
                {
                    dataInspection = new Models.Inspection();
                }
                else
                {
                    if(SelectedDataInspection != null && SelectedDataInspection.InspectionId > 0)
                    {
                        dataInspection = SelectedDataInspection;
                    }
                    else
                    {
                        dataInspection = new Models.Inspection();
                    }
                }

                RdoStatusValue = dataInspection.Pass ? 1 : 0;
                DdlStationValue = dataInspection.StationId;

                if (SelectedDataInspection != null && SelectedDataInspection.InspectionFailedList != null && SelectedDataInspection.InspectionFailedList.Count > 0)
                {
                    dataFailureGrid = SelectedDataInspection.InspectionFailedList;
                }
                else
                {
                    dataFailureGrid = new List<Models.InspectionFailed>();
                }

                if (RdoStatusValue == 1)
                {
                    AddActiveCssClass = "active";
                    AddInActiveCssClass = string.Empty;
                }
                else if(RdoStatusValue == 0)
                {
                    AddActiveCssClass = string.Empty;
                    AddInActiveCssClass = "active";
                }
            }
        }
    }


    async Task btnSaveOnClick()
    {
        if (string.IsNullOrEmpty(SerialNumber))
        {
            toastService.ShowError("Please Enter Serial Number", "Error");
            return;
        }
        if (dataInspectionModel.PartId <= 0)
        {
            toastService.ShowError("Please Bind Serial Data", "Error");
            return;
        }
        if (!DdlStationValue.HasValue || DdlStationValue.Value <= 0)
        {
            toastService.ShowError("Please Select Station", "Error");
            return;
        }
        if (string.IsNullOrEmpty(dataInspection.GeneralComments))
        {
            toastService.ShowError("Please Enter General Comments", "Error");
            return;
        }
        dataInspection.Pass = (RdoStatusValue == 1 ? true : false);
        dataInspection.StationId = DdlStationValue;
        dataInspection.PartId = dataInspectionModel.PartId;
        dataInspectionModel.Inspection = dataInspection;
        dataInspectionModel.InspectionFailedList = dataFailureGrid;
        if (await InspectionService.Save(dataInspectionModel))
        {
            toastService.ShowInfo("Record Saved Successfully", "Info");
            NavigationManager.NavigateTo("Inspection", true);
        }
        else
        {
            toastService.ShowError("Record Not Saved ! Something Worng", "Error");
        }
    }

    public async Task SelectAlertDeviationRecord(Models.AlertDeviationDetailModel item)
    {
        if (item != null)
        {
            SelectedAlertDeviationRecord = new  Models.AlertDeviationDetailModel();
            SelectedAlertDeviationRecord = item;
            IsDisplayPopUpWindow = true;
        }
        StateHasChanged();
    }

    public async Task ClearAlertDeviationSelection()
    {
        IsDisplayPopUpWindow = false;
        SelectedAlertDeviationRecord  = new  Models.AlertDeviationDetailModel();
        StateHasChanged();
    }

    public async void OnDataStatusChangeHandler(int value)
    {
        RdoStatusValue = value;
        if (value == 1)
        {
            AddActiveCssClass = "active";
            AddInActiveCssClass = string.Empty;
        }
        else if(value == 0)
        {
            AddActiveCssClass = string.Empty;
            AddInActiveCssClass = "active";
        }
    }

    public async Task CloseAddEditInspectionWindow()
    {
        dataInspectionModel = null;
        SelectedDataInspection = null;
        dataInspection = new Models.Inspection();
        SerialNumber = string.Empty;
        RdoStatusValue = 1;
        DdlStationValue = dataInspection.StationId;
        OnDataStatusChangeHandler(RdoStatusValue);
        await JSRuntime.InvokeVoidAsync("closeNav");
        StateHasChanged();
    }
 }
