@page "/inspection"
@using QBD2.Models
@using QBD2.Services
@using QBD2.Entities
@inject InspectionService InspectionService
@inject IToastService toastService
@inject NavigationManager NavigationManager
<style>
    table, th, td {
        border: 2px solid;
    }
</style>


<div class="form-group row inspection">
    <div class="col-sm-6">

        <div class="row">

            <div class="col-sm-9 left-input">
                <TelerikTextBox id="txtSerialSearch" Class="form-control col-sm-12" @bind-Value="SerialNumber"></TelerikTextBox>
            </div>
            <div class=" col-sm-3 b-btn">
                <TelerikButton id="btnSearch" OnClick="@btnFindOnClick" ButtonType="@ButtonType.Submit"><i class="fa fa-search" aria-hidden="true"></i> Find</TelerikButton>
            </div>

            <div class="current-inspection">
            <h3>Current Inspections</h3>
            <TelerikGrid Data="@MyData"
                     Pageable="true" Sortable="true"
                     Resizable="true"
                     EditMode="Telerik.Blazor.GridEditMode.Inline">
            <GridColumns>
                <GridColumn Field="Part.SerialNumber" Title="Serial Number" Groupable="false" >
                <HeaderTemplate>
                <span><i class="fa-solid fa-barcode" style="color: #11515E;"></i> Serial Number</span>
                </HeaderTemplate>
                </GridColumn>
                <!---<GridColumn Field="Part.SerialNumber" Title="Serial Number" Groupable="false" />--> 

                <GridColumn Field="@(nameof(Entities.Inspection.UpdateDate))" Title="Update Date" Groupable="false">
                <HeaderTemplate>
                <span><i class="fa-solid fa-arrows-rotate" style="color: #11515E;"></i> Update Date</span>
                </HeaderTemplate>
                </GridColumn>

               <!---<i class="fa-solid fa-arrows-rotate"></i> <GridColumn Field="@(nameof(Entities.Inspection.UpdateDate))" Title="Update Date" Groupable="false" />---> 
                <GridCommandColumn Width="10%;">
                    
                    <i class="fa-solid fa-chevron-right" style="color: #69A3AF;"></i>
                </GridCommandColumn>
            </GridColumns>
        </TelerikGrid>
        </div>

            
        </div>
        
        
       
    </div>

    <div class=" col-sm-6 right-scroll-column">

    <div class="row">
            <div class="col-sm-12">
                <label class="col-sm-2 col-form-label">Desc :</label>
                <label id="lblDescValue" class="col-sm-7 col-form-label">@(dataInspectionModel !=null ? dataInspectionModel.Description:string.Empty)</label>
            </div>
        </div>
        <div class="row">
            <div class="col-sm-12">
                <label class="col-sm-3 col-form-label">Part Number :</label>
                <label id="lblPartNumberValue" class="col-sm-7 col-form-label">@(dataInspectionModel !=null ? dataInspectionModel.PartNumber:string.Empty)</label>
            </div>
        </div>
        <div class="row">
            <div class="col-sm-12">
                <label class="col-sm-3 col-form-label">Serial Number :</label>
                <label id="lblSerialNumberValue" class="col-sm-7 col-form-label">@(dataInspectionModel !=null ? dataInspectionModel.SerialNumber:string.Empty)</label>
            </div>

        </div>

        <div class="row">

             <div class=" col-sm-12">
                <TelerikGrid Data=@GridAlertDeviationData Sortable="true" Pageable="false">
                         <GridColumns>
                            <GridColumn Field=@nameof(AlertDeviationDetailModel.Title) Title="Alerts & Deviations" Filterable="false">
                <HeaderTemplate>
                <span><i class="fa-light fa-bell-exclamation" style="color: #11515E;"></i> Alerts & Deviations</span>
                </HeaderTemplate>
                </GridColumn>
                            <!----<GridColumn Field=@nameof(AlertDeviationDetailModel.Title) Title="Alerts & Deviations" Filterable="false">
                             </GridColumn>---->
                             <GridCommandColumn Width="60px">
                                <GridCommandButton Icon="eye" OnClick="@((args)=> SelectAlertDeviationRecord(args.Item as AlertDeviationDetailModel))"></GridCommandButton>
                             </GridCommandColumn>
                         </GridColumns>
                         <NoDataTemplate>
                             <text>No Records Available</text>
                         </NoDataTemplate>
                    </TelerikGrid>
             </div>

        </div>

       
        <div class="row station-section">
            <label class="col-sm-3 col-form-label">Station</label>

            <div class="col-sm-9">
                <TelerikDropDownList Data="@dataStationDropdown" class="col-sm-11" TextField="DropText" ValueField="DropValue"
                                     @bind-Value="@DdlStationValue" DefaultText="Select Status ">
                </TelerikDropDownList>
            </div>

        </div>

        <div class="row">
            <label class="col-sm-3 col-form-label">Status</label>
            <div class="col-sm-9">
                <!----<TelerikRadioGroup Data="@dataStatusOptions"
                                   @bind-Value="@RdoStatusValue"
                                   ValueField="@nameof(Models.DropDownBind.DropValue)"
                                   TextField="@nameof(Models.DropDownBind.DropText)">
                </TelerikRadioGroup>---->
                <ul class="switch-btn">
                   <li class="@AddActiveCssClass" @onclick="(() => OnDataStatusChangeHandler(1))"><i class="fa-regular fa-circle-check"></i> Passed</li>
                   <li class="failed @AddInActiveCssClass" @onclick="(() => OnDataStatusChangeHandler(0))"><i class="fa-light fa-circle-xmark"></i> Failed</li>
                </ul>
            </div>
        </div>

         @{
            if (@RdoStatusValue == 0)
            {

                <div class="row">
                    <label class="col-sm-3 col-form-label">Primary</label>
                    <div class="col-sm-9">
                        <TelerikDropDownList Data="@dataFailurePrimaryDropdown" class="col-sm-11" TextField="DropText" ValueField="DropValue"
                                         @bind-Value="@DdlFailurePrimaryValue" DefaultText="Select Failure Primary" OnChange="@MyOnChangeHandler">
                        </TelerikDropDownList>
                    </div>
                    </div>
                    <div class="row">
                    <label class="col-sm-3 col-form-label">Secondary</label>
                    <div class="col-sm-9">
                        <TelerikDropDownList Data="@dataFailureDropdown" class="col-sm-11" TextField="DropText" ValueField="DropValue"
                                         @bind-Value="@DdlFailureValue" DefaultText="Select Failure ">
                        </TelerikDropDownList>
                    </div>
                    </div>
                    <div class="row">
                     <label class="col-sm-3 col-form-label">Comment</label>
                    <div class="col-sm-9">
                        <TelerikTextBox Class="form-control col-sm-11" @bind-Value="@FailureCommentValue"></TelerikTextBox>
                    </div>
                    </div>
                    <div class="row">
                    <div class="col-sm-12 add-reason-btn">
                        <TelerikButton id="btnSearch" ButtonType="@ButtonType.Submit" OnClick="@btnAddOnClick"><i class="fa-light fa-plus"></i> Add Reason</TelerikButton>
                    </div>
                    </div>
                

                   <div class="reason-section">
                    <h3>Reasons</h3>
                    <TelerikGrid Data="@dataFailureGrid"
                     Sortable="true"
                     Resizable="true"
                     EditMode="Telerik.Blazor.GridEditMode.Inline"
                     OnDelete=@DeleteHandler>
                    <GridColumns>
                        <GridColumn Field="FailurePrimaryName" Title="Primary" Groupable="false" />
                        <GridColumn Field="FailureName" Title="Secondary" Groupable="false" />
                        <GridColumn Field="Comment" Title="Comments" Groupable="false" />
                        <GridCommandColumn Width="10%">
                            <GridCommandButton Command="Delete" Icon="delete"></GridCommandButton>
                        </GridCommandColumn>
                    </GridColumns>
                    </TelerikGrid>
                    </div>
               

            }
        }
        <div class="row">
            <label class="col-sm-3 col-form-label">General Comments</label>
           
            @{
                if (dataInspection == null)
                    dataInspection = new Models.Inspection();
            }
            <div class="col-sm-9 add-reason-btn">
            <TelerikTextArea Id="txtGenerelComment" @bind-Value="@dataInspection.GeneralComments">
            </TelerikTextArea>
            </div>
        </div>
        
        <div class="row">
            <div class="col-sm-12 save-btn">
                <TelerikButton ButtonType="@ButtonType.Submit" OnClick="@btnSaveOnClick"><i class="fa-solid fa-floppy-disk"></i> Save</TelerikButton>               
            </div>
        </div>
        
    </div>



</div>

@if(SelectedAlertDeviationRecord != null && IsDisplayPopUpWindow == true)
{
        <TelerikWindow Visible="@(SelectedAlertDeviationRecord != null && IsDisplayPopUpWindow == true)" Modal="true" Width="800px">
            <WindowTitle>
                @{
                    <h5><i aria-hidden="true"></i>
                    @if(SelectedAlertDeviationRecord.AlertId > 0)
                    {
                        <text>Alert Detail</text>
                    }
                    else if(SelectedAlertDeviationRecord.DeviationId > 0)
                    {
                        <text>Deviation Detail</text>
                    }
                    </h5>
                }
            </WindowTitle>
            <WindowContent>
            @if (SelectedAlertDeviationRecord.AlertId > 0)
            {
                 <div class="form-group row">
                    <label for="Title" class="col-sm-4 col-form-label" style="font-weight:bold">Title</label>
                    <div class="col-sm-8">
                     <label for="Title" class="col-sm-12 col-form-label">:&ensp;@SelectedAlertDeviationRecord.Alert.Title</label>
                    </div>
                 </div>

                  <div class="form-group row">
                    <label for="ReasonforManufacturingDeviation" class="col-sm-4 col-form-label" style="font-weight:bold">Reason for Manufacturing Deviation</label>
                    <div class="col-sm-8">
                     <label for="ReasonforManufacturingDeviation" class="col-sm-12 col-form-label">:&ensp;@SelectedAlertDeviationRecord.Alert.ReasonforManufacturingDeviation</label>
                    </div>
                 </div>

                 <div class="form-group row">
                    <label for="DateCreated" class="col-sm-4 col-form-label" style="font-weight:bold">Date Created</label>
                    <div class="col-sm-8">
                        <label for="DateCreated" class="col-sm-12 col-form-label">:&ensp;
                            @if (SelectedAlertDeviationRecord.Alert != null && SelectedAlertDeviationRecord.Alert.DateCreated != null)
                            {
                                @SelectedAlertDeviationRecord.Alert.DateCreated.Value.ToString("dd-MM-yyyy")
                            }
                     </label>
                    </div>
                 </div>

                <div class="form-group row">
                    <label for="ExpirationDate" class="col-sm-4 col-form-label" style="font-weight:bold">Expiration Date</label>
                    <div class="col-sm-8">
                        <label for="ExpirationDate" class="col-sm-12 col-form-label">:&ensp;
                            @if (SelectedAlertDeviationRecord.Alert != null && SelectedAlertDeviationRecord.Alert.ExpirationDate != null)
                            {
                                @SelectedAlertDeviationRecord.Alert.ExpirationDate.Value.ToString("dd-MM-yyyy")
                            }
                     </label>
                    </div>
                 </div>

                 <div class="form-group row">
                    <label for="MasterPartNumber" class="col-sm-4 col-form-label" style="font-weight:bold">Master Part Number</label>
                    <div class="col-sm-8">
                     <label for="MasterPartNumber" class="col-sm-12 col-form-label">:&ensp;@SelectedAlertDeviationRecord.MasterPartNumber</label>
                    </div>
                 </div>

                 <div class="form-group row">
                    <label for="MasterPartDescription" class="col-sm-4 col-form-label" style="font-weight:bold">Master Part Description</label>
                    <div class="col-sm-8">
                     <label for="MasterPartDescription" class="col-sm-12 col-form-label">:&ensp;@SelectedAlertDeviationRecord.MasterPartDescription</label>
                    </div>
                 </div>
            }
            else if (SelectedAlertDeviationRecord.DeviationId > 0)
            { 
                <div class="form-group row">
                    <label for="Title" class="col-sm-4 col-form-label" style="font-weight:bold">Title</label>
                    <div class="col-sm-8">
                     <label for="Title" class="col-sm-12 col-form-label">:&ensp;@SelectedAlertDeviationRecord.Deviation.Title</label>
                    </div>
                 </div>

                 <div class="form-group row">
                    <label for="ReasonforManufacturingDeviation" class="col-sm-4 col-form-label" style="font-weight:bold">Reason for Manufacturing Deviation</label>
                    <div class="col-sm-8">
                     <label for="ReasonforManufacturingDeviation" class="col-sm-12 col-form-label">:&ensp;@SelectedAlertDeviationRecord.Deviation.ReasonforManufacturingDeviation</label>
                    </div>
                 </div>

                 <div class="form-group row">
                        <div class="row">
                            <label class="col-md-6 col-form-label" style="font-weight:bold">Location</label>
                        </div>
                        <div class="form-group row">
                            <div class="col-md-12">
                                <table width="100%">
                                    <thead>
                                        <tr>
                                            <th width="25%"></th>
                                            <th width="15%">SVRART</th>
                                            <th width="15%">SEVE</th>
                                            <th width="15%">2</th>
                                            <th width="15%">WIP</th>
                                            <th width="15%">3(FGI)</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        <tr>
                                            <td>Vendor</td>
                                            <td>@SelectedAlertDeviationRecord.Deviation.VendorSVPART</td>
                                            <td>@SelectedAlertDeviationRecord.Deviation.VendorSEVE</td>
                                            <td>@SelectedAlertDeviationRecord.Deviation.Vendor2</td>
                                            <td>@SelectedAlertDeviationRecord.Deviation.VendorWIP</td>
                                            <td>@SelectedAlertDeviationRecord.Deviation.Vendor3FGI</td>
                                        </tr>
                                        <tr>
                                            <td>LSA</td>
                                            <td>@SelectedAlertDeviationRecord.Deviation.LSASVPART</td>
                                            <td>@SelectedAlertDeviationRecord.Deviation.LSASEVE</td>
                                            <td>@SelectedAlertDeviationRecord.Deviation.LSA2</td>
                                            <td>@SelectedAlertDeviationRecord.Deviation.LSAWIP</td>
                                            <td>@SelectedAlertDeviationRecord.Deviation.LSAFGI</td>
                                        </tr>
                                    </tbody>
                                </table>
                            </div>
                        </div>
                  </div>

                <div class="form-group row">
                    <label for="Title" class="col-sm-4 col-form-label" style="font-weight:bold">ECO Required</label>
                    <div class="col-sm-8">
                        <label for="ECORequired" class="col-sm-12 col-form-label">:&ensp;
                            @if (SelectedAlertDeviationRecord.Deviation.ECORequired)
                            {
                                <text>Yes</text>
                            }
                            else
                            {
                                 <text>No</text>
                            }
                     </label>
                    </div>
               </div>

                @if (SelectedAlertDeviationRecord.Deviation.ECORequired)
                {
                    <div class="form-group row">
                        <label for="ECONumber" class="col-sm-4 col-form-label" style="font-weight:bold">ECO Number</label>
                        <div class="col-sm-8">
                            <label for="ECONumber" class="col-sm-12 col-form-label">:&ensp;@SelectedAlertDeviationRecord.Deviation.ECONumber</label>
                        </div>
                    </div>
                }

                 <div class="form-group row">
                    <label for="CommentCorrectiveAction" class="col-sm-4 col-form-label" style="font-weight:bold">Comment Corrective Action</label>
                    <div class="col-sm-8">
                     <label for="CommentCorrectiveAction" class="col-sm-12 col-form-label">:&ensp;@SelectedAlertDeviationRecord.Deviation.CommentCorrectiveAction</label>
                    </div>
                 </div>

                 <div class="form-group row">
                    <label for="DateCreated" class="col-sm-4 col-form-label" style="font-weight:bold">Date Created</label>
                    <div class="col-sm-8">
                        <label for="DateCreated" class="col-sm-12 col-form-label">:&ensp;
                            @if (SelectedAlertDeviationRecord.Deviation != null && SelectedAlertDeviationRecord.Deviation.DateCreated != null)
                            {
                                @SelectedAlertDeviationRecord.Deviation.DateCreated.Value.ToString("dd-MM-yyyy")
                            }
                     </label>
                    </div>
                 </div>

                 <div class="form-group row">
                    <label for="MasterPartNumber" class="col-sm-4 col-form-label" style="font-weight:bold">Master Part Number</label>
                    <div class="col-sm-8">
                     <label for="MasterPartNumber" class="col-sm-12 col-form-label">:&ensp;@SelectedAlertDeviationRecord.MasterPartNumber</label>
                    </div>
                 </div>

                 <div class="form-group row">
                    <label for="MasterPartDescription" class="col-sm-4 col-form-label" style="font-weight:bold">Master Part Description</label>
                    <div class="col-sm-8">
                     <label for="MasterPartDescription" class="col-sm-12 col-form-label">:&ensp;@SelectedAlertDeviationRecord.MasterPartDescription</label>
                    </div>
                 </div>
            }

            @if (SelectedAlertDeviationRecord.PartList != null && SelectedAlertDeviationRecord.PartList.Count() > 0)
            {
               <div class="form-group row">
                <div class="row">
                    <label for="PartDeviations" class="col-sm-8 col-form-label" style="font-weight:bold">
                    @if(SelectedAlertDeviationRecord.AlertId > 0)
                    {
                        <text>Part Alerts</text>
                    }
                    else if(SelectedAlertDeviationRecord.DeviationId > 0)
                    {
                        <text>Part Deviations</text>
                    }
                    </label>
                </div>
                <div class="row">
                    <div class="col-md-12">
                        <TelerikGrid Data=@SelectedAlertDeviationRecord.PartList Sortable="true" Pageable="false">
                             <GridColumns>
                                 <GridColumn Field=@nameof(Part.SerialNumber) Title="Serial Number" Filterable="false">
                                 </GridColumn>
                             </GridColumns>
                             <NoDataTemplate>
                                 <text>No Records Available</text>
                             </NoDataTemplate>
                        </TelerikGrid>
                    </div>
                </div>
                </div>
               <br/>
            }
            <div class="form-row">
                <div class="col-md-12 m-0 p-0" style="text-align: right;">
                    <TelerikButton OnClick="(()=>ClearAlertDeviationSelection())">Close</TelerikButton>
                </div>
            </div>
            </WindowContent>
        </TelerikWindow>
}
@code {
    List<Entities.Inspection> MyData { get; set; }
    List<Models.InspectionFailed> dataFailureGrid { get; set; }

    List<Models.DropDownBind> dataFailurePrimaryDropdown { get; set; }
    List<Models.DropDownBind> dataFailureDropdown { get; set; }
    List<Models.DropDownBind> dataStatusOptions { get; set; }
    List<Models.DropDownBind> dataStationDropdown { get; set; }
    Models.InspectionModel dataInspectionModel { get; set; }
    Models.Inspection dataInspection { get; set; }

    List<Models.AlertDeviationDetailModel> GridAlertDeviationData { get; set; }
    public Models.AlertDeviationDetailModel SelectedAlertDeviationRecord { get; set; }
    public bool IsDisplayPopUpWindow { get; set; } = false;

    int DdlFailurePrimaryValue { get; set; }
    int DdlFailureValue { get; set; }
    int RdoStatusValue { get; set; }
    int DdlStationValue { get; set; }
    string SerialNumber { get; set; }
    string FailureCommentValue { get; set; }

    public string AddActiveCssClass { get; set; } = "active";
    public string AddInActiveCssClass { get; set; } 

    protected override async Task OnInitializedAsync()
    {
        await GetGridData();
        GetDropDownData();
        RdoStatusValue = 1;
    }

    async Task GetGridData()
    {
        MyData = await InspectionService.Read();
    }

    async Task GetGridAlertDeviationData()
    {
        if (dataInspectionModel != null && dataInspectionModel.MasterPartId > 0)
        {
            GridAlertDeviationData = await InspectionService.ReadAlertAndDeviationDataByMasterPart(dataInspectionModel.MasterPartId);
        }
        else
        {
            GridAlertDeviationData = new List<Models.AlertDeviationDetailModel>();    
        }
        StateHasChanged();
    }

    void GetDropDownData()
    {
        dataFailurePrimaryDropdown = InspectionService.DropDownData(Models.Enum.DropDownType.FailureTypePrimary, null);
        dataStationDropdown = InspectionService.DropDownData(Models.Enum.DropDownType.Station, null);

        dataStatusOptions = new List<Models.DropDownBind>();
        dataStatusOptions.Add(new Models.DropDownBind { DropText = "Pass", DropValue = 1 });
        dataStatusOptions.Add(new Models.DropDownBind { DropText = "Fail", DropValue = 0 });


    }
    void MyOnChangeHandler()
    {
        dataFailureDropdown = InspectionService.DropDownData(Models.Enum.DropDownType.FailureType, DdlFailurePrimaryValue);

    }
    async Task btnAddOnClick()
    {
        if (dataFailureGrid == null)
        {
            dataFailureGrid = new List<Models.InspectionFailed>();
        }
        if (DdlFailurePrimaryValue <= 0)
        {
            toastService.ShowError("Please Select Failure Primary Type", "Error");
            return;
        }
        if (DdlFailureValue <= 0)
        {
            toastService.ShowError("Please Select Failure Type", "Error");
            return;
        }
        if (string.IsNullOrEmpty(FailureCommentValue))
        {
            toastService.ShowError("Please Enter Comment", "Error");
            return;
        }
        if (dataFailureGrid.Count > 0)
        {
            if (dataFailureGrid.Any(p => p.FailureTypeId == DdlFailureValue && p.FailurePrimaryTypeId == DdlFailurePrimaryValue))
            {
                toastService.ShowError("Record Already there !", "Error");
                return;
            }

        }
        dataFailureGrid.Add(new Models.InspectionFailed
            {
                Comment = FailureCommentValue,
                FailurePrimaryTypeId = DdlFailurePrimaryValue,
                FailureTypeId = DdlFailureValue,
                FailurePrimaryName = dataFailurePrimaryDropdown.FirstOrDefault(p => p.DropValue == DdlFailurePrimaryValue).DropText,
                FailureName = dataFailureDropdown.FirstOrDefault(p => p.DropValue == DdlFailureValue).DropText,

            });
        FailureCommentValue = string.Empty;
        DdlFailurePrimaryValue = 0;
        DdlFailureValue = 0;
        MyOnChangeHandler();
        dataFailureGrid = new List<Models.InspectionFailed>(dataFailureGrid);


    }
    async Task DeleteHandler(GridCommandEventArgs args)
    {
        Models.InspectionFailed item = (Models.InspectionFailed)args.Item;
        dataFailureGrid.Remove(item);

    }
    async Task btnFindOnClick()
    {
        if (string.IsNullOrEmpty(SerialNumber))
        {
            toastService.ShowError("Please Enter Serial Number", "Error");
            return;
        }

        dataInspectionModel = await InspectionService.GetDataBySerialNumber(SerialNumber.Trim());
        await GetGridAlertDeviationData();
        if (dataInspectionModel == null)
        {
            toastService.ShowError("No Record Found ! Please Enter Valid Serial Number", "Error");
            return;
        }
        if (dataInspectionModel.Inspection != null)
        {
            dataInspection = dataInspectionModel.Inspection;
            RdoStatusValue = dataInspection.Pass ? 1 : 0;
            DdlStationValue = dataInspection.StationId;
            if (dataInspectionModel.InspectionFailedList.Count > 0)
            {
                dataFailureGrid = dataInspectionModel.InspectionFailedList;
            }
        }

    }


    async Task btnSaveOnClick()
    {
        if (string.IsNullOrEmpty(SerialNumber))
        {
            toastService.ShowError("Please Enter Serial Number", "Error");
            return;
        }
        if (dataInspectionModel.PartId <= 0)
        {
            toastService.ShowError("Please Bind Serial Data", "Error");
            return;
        }
        if (DdlStationValue <= 0)
        {
            toastService.ShowError("Please Select Station", "Error");
            return;
        }
        if (string.IsNullOrEmpty(dataInspection.GeneralComments))
        {
            toastService.ShowError("Please Enter General Comments", "Error");
            return;
        }
        dataInspection.Pass = (RdoStatusValue == 1 ? true : false);
        dataInspection.StationId = DdlStationValue;
        dataInspection.PartId = dataInspectionModel.PartId;
        dataInspectionModel.Inspection = dataInspection;
        dataInspectionModel.InspectionFailedList = dataFailureGrid;
        if (await InspectionService.Save(dataInspectionModel))
        {
            toastService.ShowInfo("Record Saved Successfully", "Info");
            NavigationManager.NavigateTo("Inspection", true);
        }
        else
        {
            toastService.ShowError("Record Not Saved ! Something Worng", "Error");
        }
    }

    public async Task SelectAlertDeviationRecord(Models.AlertDeviationDetailModel item)
    {
        if (item != null)
        {
            SelectedAlertDeviationRecord = new  Models.AlertDeviationDetailModel();
            SelectedAlertDeviationRecord = item;
            IsDisplayPopUpWindow = true;
        }
        StateHasChanged();
    }

    public async Task ClearAlertDeviationSelection()
    {
        IsDisplayPopUpWindow = false;
        SelectedAlertDeviationRecord  = new  Models.AlertDeviationDetailModel();
        StateHasChanged();
    }

    public async void OnDataStatusChangeHandler(int value)
    {
        RdoStatusValue = value;
        if (value == 1)
        {
            AddActiveCssClass = "active";
            AddInActiveCssClass = string.Empty;
        }
        else if(value == 0)
        { 
            AddActiveCssClass = string.Empty;
            AddInActiveCssClass = "active";
        }
    }
 }
