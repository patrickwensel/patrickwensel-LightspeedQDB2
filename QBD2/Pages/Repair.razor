@page "/repair"
@using QBD2.Models
@using QBD2.Services
@using QBD2.Entities
@inject IToastService toastService
@inject NavigationManager NavigationManager
@inject RepairService RepairService
@inject PartService PartService
@inject GLCodeService GLCodeService
@inject PartStatusService PartStatusService
@inject FailureCodeService FailureCodeService
@inject IJSRuntime JSRuntime
@inject MasterPartService MasterPartService
<style>
.autocompletehright40
{
   height: 40px !important;
}
</style>

<div class="row alerts-row">
    <div class="col-md-9">
           @if (AddParts != null && IsAddRecord == true)
           {
               <h3 class="alert-title"><label @onclick="(()=> btnCancelRepairOnClick())" style="cursor:pointer;"><i class="fas fa-chevron-left"></i>&nbsp;&nbsp;</label><i class="fa fa-plus" aria-hidden="true"></i>&nbsp;&nbsp;Add new Repair</h3>
           }
           else if(AddParts != null && IsAddRecord == false)
           {
               <h3 class="alert-title"><label @onclick="(()=> btnCancelRepairOnClick())" style="cursor:pointer;"><i class="fas fa-chevron-left"></i>&nbsp;&nbsp;</label><i class="fa fa-edit" aria-hidden="true"></i>&nbsp;&nbsp;Edit Repair</h3>
           }
           else
           {
                <h3 class="alert-title"><i class="fa-solid fa-hammer" aria-hidden="true"></i>&nbsp;&nbsp;Repair</h3>
           }
    </div>
    <div class="col-md-3 add-alrert-btn">
        @if (AddParts == null)
        {
            <TelerikButton Icon="add" OnClick="(() => SelectRecord(null))">Add new Repair</TelerikButton>
        }
   </div>
</div>

<hr />

@if (AddParts == null)
{
    <h3 class="alert-table-title">Listed Repairs</h3> 
     <div class="al-table">
    <TelerikGrid Data="@GridData"
             Pageable="true"
             Sortable="true"
             FilterMode="@GridFilterMode.FilterRow">
        
        <GridColumns>
            <GridColumn Field="@(nameof(Entities.Repair.UpdateDate))" Title="Update Date" DisplayFormat="{0:dd-MM-yyyy}"/>
            <GridColumn Field="@(nameof(Entities.Repair.Description))" Title="Description" Filterable="false"/>
            <GridColumn Field="@(nameof(Entities.Repair.PartSerialNumber))" Title="Serial Number" Filterable="false"/>
            <GridCommandColumn Width="100px">
                 <GridCommandButton Class="edit-btn bgb-none" Icon="" OnClick="@((args)=> SelectRecord(args.Item as Entities.Repair))"><i class="fal fa-edit"></i></GridCommandButton>
                 <GridCommandButton Class="del-btn bgb-none" Command="Delete" Icon="delete" OnClick="@((args)=> DeleteRecord(args.Item as Entities.Repair))"></GridCommandButton>
            </GridCommandColumn>
        </GridColumns>
    </TelerikGrid>
    </div>
}

@if (AddParts != null)
{
    
<div class="form-group row inspection">
      
    <div class=" col-sm-12">
          <div class="row">
            <div class="col-sm-9 left-input">
               <TelerikAutoComplete Data="@Parts" @bind-Value="@SerialNumber" Class="form-control col-sm-12 autocompletehright40"
                ValueField="@(nameof(Part.SerialNumber))" ItemHeight="35" ScrollMode="@DropDownScrollMode.Virtual"
                PageSize="10" Filterable="true" MinLength="3" ClearButton="true"
                Placeholder="Search for a Serial Number" OnChange="@MyOnChangeHandler"/>
            </div>
            <div class=" col-sm-3 b-btn">
                <TelerikButton id="btnSearch" OnClick="@btnFindOnClick" ButtonType="@ButtonType.Submit"><i class="fa fa-search" aria-hidden="true"></i> Find</TelerikButton>
            </div>
        </div>
    
         <div class="row">
            <div class="col-sm-12">
                <label class="col-sm-12 col-form-label">Family :</label>
                <label id="lblDescValue" class="col-sm-12 col-form-label right-value font-b">@(dataRepairModel !=null ? dataRepairModel.Family:string.Empty)</label>
            </div>
        </div>

        <div class="row">
            <div class="col-sm-6">
                <label class="col-sm-2 col-form-label">Desc :</label>
                <label id="lblDescValue" class="col-sm-7 col-form-label">@(dataRepairModel !=null ? dataRepairModel.Description:string.Empty)</label>
            </div>
        </div>
        <div class="row">
            <div class="col-sm-12">
                <label class="col-sm-12 col-form-label">Part Number :</label>
                <label id="lblPartNumberValue" class="col-sm-12 col-form-label right-value n-font">@(dataRepairModel !=null ? dataRepairModel.PartNumber:string.Empty)</label>
            </div>
        </div>
        <div class="row">
            <div class="col-sm-12">
                <label class="col-sm-12 col-form-label">Serial Number :</label>
                <label id="lblSerialNumberValue" class="col-sm-12 col-form-label right-value n-font">@(dataRepairModel !=null ? dataRepairModel.SerialNumber:string.Empty)</label>
            </div>
        </div>



        <EditForm EditContext="@ECAddPart">
        <DataAnnotationsValidator />

        

          <div class="row">
              <label for="PartNumber" class="col-sm-2 col-form-label">Part Number</label>
              <div class="col-md-10">
              <TelerikTextBox @bind-Value="@AddParts.PartNumber" Class="form-control"></TelerikTextBox>
              <ValidationMessage For="@(() => AddParts.PartNumber)"></ValidationMessage>
              </div>
          </div>
               
          <div class="row">
               <label for="SerialNumber" class="col-sm-2 col-form-label">Serial Number (optional)</label>
               <div class="col-md-10">
               <TelerikTextBox @bind-Value="@AddParts.SerialNumber" Class="form-control"></TelerikTextBox>
               <ValidationMessage For="@(() => AddParts.SerialNumber)"></ValidationMessage>
               </div>
           </div>
               
             <div class="row">
                   <label for="GLCodeId" class="col-sm-2 col-form-label">GL Code</label>
                    <div class="col-md-10">
                    <TelerikDropDownList Data="@dataGLCodeDropdown" class="col-sm-10" TextField="DropText" ValueField="DropValue"
                             @bind-Value="@AddParts.GLCodeId" DefaultText="GL Code">
                            </TelerikDropDownList>
                            <ValidationMessage For="@(() => AddParts.GLCodeId)"></ValidationMessage>
                        </div>
               </div>
               

             <div class="row">
                     <label for="RepairDescription" class="col-sm-2 col-form-label">Repair Description</label>
                      <div class="col-md-10">
                      <textarea @bind-value="AddParts.RepairDescription" class="form-control" rows="3" @bind-value:event="oninput"></textarea>
                      <ValidationMessage For="@(() => AddParts.RepairDescription)"></ValidationMessage>
                      </div>
              </div>
              

           
             <div class="row">
                  <label for="FailureCodeId" class="col-sm-2 col-form-label">Failure Code</label>
                  <div class="col-md-10">
                  <TelerikDropDownList Data="@dataFailureCodesDropdown"  TextField="DropText" ValueField="DropValue"
                             @bind-Value="@AddParts.FailureCodeId" DefaultText="Failure Code">
                            </TelerikDropDownList>
                            <ValidationMessage For="@(() => AddParts.FailureCodeId)"></ValidationMessage>
                  </div>
             </div>
               

             <div class="row">
                    <div class="col-md-12 add-reason-btn">
                            <TelerikButton Class="SaveButton" OnClick="(()=> btnAddPartOnClick())"><i class="fa-light fa-plus"></i> Add Reason</TelerikButton>
                     </div>
              </div>
               
         </EditForm>


    </div><!---right column end--->
</div><!----main row end-->


<div class="row repair-description">
    <div class="col-md-12">
        <TelerikGrid Data="@MyData"
         Pageable="true" Sortable="true"
         Resizable="true">
            <GridColumns>
                <GridColumn Field="@(nameof(Models.Parts.PartNumber))" Title="Part Number" Groupable="false" Width="80px"/>
                <GridColumn Field="@(nameof(Models.Parts.SerialNumber))" Title="Serial Number" Groupable="false" Width="100px"/>
                <GridColumn Field="@(nameof(Models.Parts.Description))" Title="Description" Groupable="false" Width="200px"/>
                <GridColumn Field="@(nameof(Models.Parts.GLCode))" Title="GL Code" Groupable="false" Width="150px"/>
                <GridColumn Field=@nameof(Models.Parts.PartStatus) Title="Status" Width="100px">
                    <Template>
                        @{
                            var partStatus = context as Models.Parts;
                            var oldPartStatusId = partStatus.PartStatusId;
                                <TelerikDropDownList @bind-Value="@partStatus.PartStatusId" Width="100%"
                                                 Data="@dataPartStatusDropdown"
                                                 ValueField="DropValue"
                                                 TextField="DropText"
                                                 Class="form-control"
                                                 OnChange="@(() => OnPartStatusesChangeHandler(partStatus,oldPartStatusId))">
                                </TelerikDropDownList>
                        }
                    </Template>
              </GridColumn>
            </GridColumns>
        </TelerikGrid>
    </div>
</div>

<div class="current-inspection">
        <h3>History</h3>
       <TelerikGrid Data="@MyData"
        Pageable="true" Sortable="true"
        Resizable="true">
        <GridColumns>
              <!---<GridColumn Field="@(nameof(Models.Parts.SerialNumber))" Title="Serial Number" Groupable="false"/>---->
                <GridColumn Field="@(nameof(Models.Parts.SerialNumber))" Title="Serial Number" Groupable="false">
                <HeaderTemplate>
                <span><i class="fa-solid fa-barcode" style="color: #11515E;"></i> Serial Number</span>
                </HeaderTemplate>
                </GridColumn>

                <GridColumn Field="@(nameof(Models.Parts.UpdateDate))" Title="Update Date" Groupable="false">
                <HeaderTemplate>
                <span><i class="fa-solid fa-arrows-rotate" style="color: #11515E;"></i> Update Date</span>
                </HeaderTemplate>
                </GridColumn>

              <!----<GridColumn Field="@(nameof(Models.Parts.UpdateDate))" Title="Date Updated" Groupable="false">
                    <Template>
                          @{
                              var parts = context as Models.Parts;
                              if (parts != null && !parts.UpdateDate.Equals(DateTime.MinValue))
                              {
                                      @parts.UpdateDate.ToString("dd/MM/yyyy @ h:mm")
                              }
                          }
                    </Template>
              </GridColumn>---->
              <GridCommandColumn Width="10%">
              <GridCommandButton Icon="" OnClick="@((args)=> btnHistoryGridEyeOnClick(args.Item as Models.Parts))"><i class="fa-solid fa-chevron-right" style="color: #69A3AF;"></i></GridCommandButton>
              </GridCommandColumn>
        </GridColumns>
      </TelerikGrid>
    </div>
    <br/> <br/>
}
@code {

    List<Entities.Repair> GridData { get; set; }

    List<Models.DropDownBind> dataGLCodeDropdown { get; set; }

    List<Models.DropDownBind> dataPartStatusDropdown { get; set; }

    List<Models.DropDownBind> dataFailureCodesDropdown { get; set; }

    AddPartModel AddParts { get; set; }

    EditContext ECAddPart { get; set; }

    List<Models.Parts> MyData { get; set; }

    Models.RepairModel dataRepairModel { get; set; }

    string SerialNumber { get; set; }

    public bool IsAddRecord { get; set; } = true;

    public IEnumerable<Part> Parts { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await GetRepairGridData();
        base.OnInitialized();
    }

    public async Task SelectRecord(Entities.Repair repair)
    {
        if (repair != null)
        {
            IsAddRecord = false;
            SerialNumber = repair.PartSerialNumber;
            await btnFindOnClick();
        }
        else
        {
            IsAddRecord = true;
            AddParts = new AddPartModel();
        }

        if (AddParts != null)
        {
            ECAddPart = new EditContext(AddParts);
        }
        await GetDropDownData();
        StateHasChanged();
    }

    async Task btnFindOnClick()
    {
        if (string.IsNullOrEmpty(SerialNumber))
        {
            toastService.ShowError("Please Enter Serial Number", "Error");
            return;
        }

        dataRepairModel = await RepairService.GetDataBySerialNumber(SerialNumber.Trim());

        if (dataRepairModel == null)
        {
            toastService.ShowError("No Record Found ! Please Enter Valid Serial Number", "Error");
            AddParts.SelectedPartId = 0;
        }

        if(dataRepairModel != null)
        {
            AddParts = new AddPartModel();
            ECAddPart = new EditContext(AddParts);
            AddParts.SelectedPartId = dataRepairModel.PartId;
            StateHasChanged();
        }

        await GetGridData();
    }

    async Task GetRepairGridData()
    {
        GridData = await RepairService.ReadRepairs();
        StateHasChanged();
    }

    async Task GetGridData()
    {
        if (dataRepairModel != null && dataRepairModel.PartId > 0)
        {
            MyData = await PartService.GetParentPartByPart(dataRepairModel.PartId);
        }
        else
        {
            MyData = null;
        }
        StateHasChanged();
    }

    async Task GetDropDownData()
    {
        Parts = PartService.GetAllParts();
        dataGLCodeDropdown =  GLCodeService.DropDownData();
        dataPartStatusDropdown = PartStatusService.DropDownData();
        dataFailureCodesDropdown = FailureCodeService.DropDownData();
    }

    async Task btnHistoryGridEyeOnClick(Models.Parts parts)
    {
        if (parts != null)
        {
            SerialNumber = parts.SerialNumber;
            await btnFindOnClick();
        }
    }

    async Task btnAddPartOnClick()
    {
        var IsValid = ECAddPart.Validate();
        if(!IsValid)
        {
            return;
        }

        if (string.IsNullOrEmpty(SerialNumber))
        {
            toastService.ShowError("Please Enter Serial Number", "Error");
            return;
        }

        if (dataRepairModel == null || dataRepairModel.PartId == 0)
        {
            toastService.ShowError("Please Select Part", "Error");
            return;
        }

        if (AddParts != null)
        {
            AddParts.SelectedPartId = dataRepairModel.PartId;
            if(string.IsNullOrWhiteSpace(AddParts.PartNumber))
            {
                toastService.ShowError("Please Enter Part Number", "Error");
                return;
            }

            if (await PartService.AddPart(AddParts))
            {
                toastService.ShowInfo("Record Saved Successfully", "Info");
                await btnFindOnClick();
            }
            else
            {
                toastService.ShowError("Record Not Saved ! Something Worng", "Error");
            }
        }
    }

    public async Task OnPartStatusesChangeHandler(Models.Parts parts,int oldPartStatusId)
    {
        if (parts != null && parts.PartId > 0 && parts.PartStatusId != oldPartStatusId)
        {
            if (await PartService.UpdatePartStatus(parts))
            {
                toastService.ShowInfo("Part Status Updated Successfully", "Info");
                await GetGridData();
            }
            else
            {
                toastService.ShowError("Record Not Updated ! Something Worng", "Error");
            }
        }
    }

    public async Task DeleteRecord(Entities.Repair item)
    {
        if (item != null)
        {
            var istrue = await JSRuntime.InvokeAsync<bool>("confirmMessage", new[] { "Are you sure you want to delete this record?" });
            if(istrue)
            {
                await RepairService.Delete(item);
                await GetRepairGridData();
            }
        }
    }

    public async Task btnCancelRepairOnClick()
    {
        IsAddRecord = true;
        AddParts = null;
        await this.OnInitializedAsync();
        StateHasChanged();
    }

    private async Task MyOnChangeHandler(object theUserChoice)
    {
        if(theUserChoice != null)
        {
            Part selectedMasterPart = Parts.Where(x => x.SerialNumber == (string)theUserChoice).FirstOrDefault();
            if (selectedMasterPart != null)
            {
                if (string.IsNullOrEmpty(selectedMasterPart.SerialNumber))
                {
                    toastService.ShowError("Please Enter Serial Number", "Error");
                    return;
                }

                dataRepairModel = await RepairService.GetDataBySerialNumber(selectedMasterPart.SerialNumber.Trim());

                if (dataRepairModel == null)
                {
                    toastService.ShowError("No Record Found ! Please Enter Valid Serial Number", "Error");
                    AddParts.SelectedPartId = 0;
                }

                if (dataRepairModel != null)
                {
                    AddParts = new AddPartModel();
                    ECAddPart = new EditContext(AddParts);
                    AddParts.SelectedPartId = dataRepairModel.PartId;
                    StateHasChanged();
                }
                await GetGridData();
            }
        }
        else
        {
            dataRepairModel = null;
            AddParts.SelectedPartId = 0;
            await GetGridData();
            StateHasChanged();
        }
    }
}
