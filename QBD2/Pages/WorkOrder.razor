@page "/workorder"
@using QBD2.Models
@using QBD2.Services
@using QBD2.Entities
@inject IToastService toastService
@inject NavigationManager NavigationManager
@inject WorkOrderPriorityService WorkOrderPriorityService
@inject WorkOrderService WorkOrderService
@inject WorkOrderStatusService WorkOrderStatusService
@inject WorkOrderTypeService WorkOrderTypeService
@inject MasterPartService MasterPartService
@inject IJSRuntime JSRuntime
@inject PartService PartService
@inject InspectionService InspectionService
@inject BuildStationFailureCodeService BuildStationFailureCodeService

<style>
    .SaveButton {
        float: right;
        width: 100px;
    }
    .k-dialog-wrapper {
        position: inherit;
    }
    .k-centered {
        transform: translate(5%, -200%);
        width: 320px;
    }
    .k-window-titlebar.k-dialog-titlebar.k-header {
        border-top-left-radius: 0;
        border-top-right-radius: 0;
        padding: 10px 10px 20px 10px;
    }
    .k-window-content.k-dialog-content {
        border-radius: 0;
    }
    label.k-form-label {
        margin-right: 15px;
    }
    .k-form .k-form-field, .k-form .k-form-field-wrap {
        display: inline-flex;
        width: 100%;
    }
    .k-actions-start {
        float: right;
    }
    .k-window-actions span {
        color: #fff;
    }

    label.col-form-label {
        text-align: right;
        font-weight: bold;
    }

    .no-headers-grid .k-grid-header {
        display:none;
    }
</style>

<div class="row alerts-row">
    <div class="col-md-9">
        @if (AddEditWorkOrderModel != null && AddEditWorkOrderModel.WorkOrderId == 0)
        {
            <h3 class="alert-title"><label @onclick="(()=> btnCancelEditWorkOrderOnClick())"><i class="fa fa-th-list" aria-hidden="true"></i></label>&nbsp;&nbsp;Work Order</h3>
        }
        else if(AddEditWorkOrderModel != null && AddEditWorkOrderModel.WorkOrderId > 0)
        {
            <h3 class="alert-title"><label @onclick="(()=> btnCancelEditWorkOrderOnClick())" style="cursor:pointer;"><i class="fas fa-chevron-left"></i>&nbsp;&nbsp;</label><i class="fa fa-edit" aria-hidden="true"></i>&nbsp;&nbsp;Edit Work Order</h3>
        }
        else
        {
            <h3 class="alert-title"><i class="fa fa-th-list" aria-hidden="true"></i>&nbsp;&nbsp;Work Order</h3>
        }
    </div>
    <div class="col-md-3 add-alrert-btn">
        @if (AddEditWorkOrderModel == null)
        {
            <TelerikButton Icon="add" OnClick="(() => SelectRecord(null))">Add New Work Order</TelerikButton>
        }
    </div>
</div>
<hr />

@if (IsDisplayPopUpWindow == true)
{
    <h3 class="alert-table-title">Listed Work Orders</h3>
    <div class="al-table">
        <TelerikGrid Data="@GridData"
                 Pageable="true"
                 Sortable="true"
                 FilterMode="@GridFilterMode.FilterRow">
            <DetailTemplate Context="context">
                @{
                    var workOrderModel = context as Models.WorkOrderModel;
                    <TelerikGrid Data="workOrderModel.PartsList" Pageable="true" PageSize="5">

                        <DetailTemplate Context="childPartContext">
                            @{
                                    <TelerikGrid Data="childPartContext.ChildParts" Pageable="true" PageSize="5">

                                        <GridColumns>
                                            <GridColumn Field="PartId" Title="Part">
                                                <Template Context="myContext">
                                                    @{
                                                    var part = myContext as Parts;
                                                    if (part != null)
                                                    {
                                                                <lable>@part.PartId</lable>
                                                    }
                                                    }
                                                </Template>
                                            </GridColumn>
                                            <GridColumn Field="SerialNumber" Title="Serial Number">
                                                <Template Context="myContext">
                                                    @{
                                                    var part = myContext as Parts;
                                                    if (part != null)
                                                    {
                                                                <lable>@part.SerialNumber</lable>
                                                    }
                                                    }
                                                </Template>
                                            </GridColumn>

                                            <GridColumn Field="PartNumber" Title="Part Number">
                                                <Template Context="myContext">
                                                    @{
                                                    var part = myContext as Parts;
                                                    if (part != null)
                                                    {
                                                                <lable>@part.PartNumber</lable>
                                                    }
                                                    }
                                                </Template>
                                            </GridColumn>

                                            <GridColumn Field="Parts.BuildStations>" Title="Build Station">
                                                <Template Context="myContext">
                                                    @{
                                                    var part = myContext as Parts;
                                                    if (part != null && part.BuildStations != null)
                                                    {
                                                                <lable>@part.BuildStations</lable>
                                                    }
                                                    }
                                                </Template>
                                            </GridColumn>
                                            <GridColumn Field="Parts.PartStatus>" Title="Part Status">
                                                <Template Context="myContext">
                                                    @{
                                                    var part = myContext as Parts;
                                                    if (part != null && part.PartStatus != null)
                                                    {
                                                                <lable>@part.PartStatus</lable>
                                                    }
                                                    }
                                                </Template>
                                            </GridColumn>
                                            <GridColumn Field="Parts.SerialNumberRequired>" Title="Serial Number Required">
                                                <Template Context="myContext">
                                                    @{
                                                    var part = myContext as Parts;
                                                    if (part != null)
                                                    {
                                                        if (part != null && part.SerialNumberRequired == true)
                                                        {
                                                                    <lable style="color:green">Yes</lable>
                                                        }
                                                        else
                                                        {
                                                                    <lable style="color:red;">No</lable>
                                                        }
                                                    }
                                                    }
                                                </Template>
                                            </GridColumn>
                                        </GridColumns>

                                    </TelerikGrid>
                            }
                        </DetailTemplate>

                        <GridColumns>
                            <GridColumn Field="PartId" Title="Part">
                                <Template Context="myContext">
                                    @{
                                        var part = myContext as Parts;
                                        if (part != null)
                                        {
                                                <lable>@part.PartId</lable>
                                        }
                                    }
                                </Template>
                            </GridColumn>
                            <GridColumn Field="SerialNumber" Title="Serial Number">
                                <Template Context="myContext">
                                    @{
                                        var part = myContext as Parts;
                                        if (part != null)
                                        {
                                                <lable>@part.SerialNumber</lable>
                                        }
                                    }
                                </Template>
                            </GridColumn>

                            <GridColumn Field="PartNumber" Title="Part Number">
                                <Template Context="myContext">
                                    @{
                                        var part = myContext as Parts;
                                        if (part != null)
                                        {
                                                <lable>@part.PartNumber</lable>
                                        }
                                    }
                                </Template>
                            </GridColumn>

                            <GridColumn Field="Parts.BuildStations>" Title="Build Station">
                                <Template Context="myContext">
                                    @{
                                        var part = myContext as Parts;
                                        if (part != null && part.BuildStations != null)
                                        {
                                                <lable>@part.BuildStations</lable>
                                        }
                                    }
                                </Template>
                            </GridColumn>
                            <GridColumn Field="Parts.PartStatus>" Title="Part Status">
                                <Template Context="myContext">
                                    @{
                                        var part = myContext as Parts;
                                        if (part != null && part.PartStatus != null)
                                        {
                                                <lable>@part.PartStatus</lable>
                                        }
                                    }
                                </Template>
                            </GridColumn>
                            <GridColumn Field="Parts.SerialNumberRequired>" Title="Serial Number Required">
                                <Template Context="myContext">
                                    @{
                                        var part = myContext as Parts;
                                        if (part != null)
                                        {
                                            if (part != null && part.SerialNumberRequired == true)
                                            {
                                                    <lable style="color:green">Yes</lable>
                                            }
                                            else
                                            {
                                                    <lable style="color:red;">No</lable>
                                            }
                                        }
                                    }
                                </Template>
                            </GridColumn>
                        </GridColumns>
                    </TelerikGrid>
            }
        </DetailTemplate>
        <GridColumns>
            <GridColumn Field="@(nameof(Models.WorkOrderModel.CreateDate))" Title="Date Created" DisplayFormat="{0:dd-MM-yyyy}"/>
            <GridColumn Field="WorkOrderType.Name" Title="Work Order Type" Filterable="true"/>
            <GridColumn Field="WorkOrderStatus.Name" Title="Work Order Status" Filterable="true"/>
            <GridColumn Field="WorkOrderPriority.Name" Title="Work Order Priority" Filterable="true"/>
            <GridColumn Field="BuildTemplateMasterPartName" Title="Build Template" Filterable="true"/>
            <GridColumn Field="Quantity" Title="Quantity" Filterable="true"/>
            <GridCommandColumn Width="100px">
                <GridCommandButton Class="edit-btn bgb-none" Icon="" OnClick="@((args)=> SelectRecord(args.Item as Models.WorkOrderModel))"><i class="fal fa-edit"></i></GridCommandButton>
                <GridCommandButton Class="del-btn bgb-none" Command="Delete" Icon="delete" OnClick="@((args)=> DeleteRecord(args.Item as Models.WorkOrderModel))" Enabled="false"></GridCommandButton>
            </GridCommandColumn>
        </GridColumns>
    </TelerikGrid>
</div>
}

@if (AddEditWorkOrderModel != null && IsDisplayPopUpWindow == false)
{
    <br />
    <div class="alert-edit-page">
        <EditForm EditContext="@ECAddEditWorkOrder">
            <DataAnnotationsValidator />
            <div class="form-group row">
                <label for="BuildTemplateMasterPartName" class="col-sm-2 col-form-label">Build Template: </label>
                <div class="col-md-4">
                    <label class="col-form-label">@OriginalRecord.BuildTemplateMasterPartName</label>
                </div>

                <label for="WorkOrderTypeId" class="col-md-2 col-form-label">Type </label>
                <div class="col-md-4">
                    <TelerikDropDownList @bind-Value="@AddEditWorkOrderModel.WorkOrderTypeId" Width="100%"
                                     DefaultText="-select-" Data="@dataWorkOrderTypesDropdown" TextField="DropText" ValueField="DropValue" Class="form-control" Enabled="true" OnChange="OnDropDopChangeHandler"></TelerikDropDownList>
                    <ValidationMessage For="@(() => AddEditWorkOrderModel.WorkOrderTypeId)" style="width:unset!important;"></ValidationMessage>
                </div>
            </div>

            <div class="form-group row">
                <label for="Quantity" class="col-sm-2 col-form-label">Quantity: </label>
                <div class="col-md-4">
                    <label class="col-form-label">@AddEditWorkOrderModel.Quantity</label>
                </div>

                <label for="WorkOrderStatusId" class="col-md-2 col-form-label">Status </label>
                <div class="col-md-4">
                    <TelerikDropDownList @bind-Value="@AddEditWorkOrderModel.WorkOrderStatusId" Width="100%"
                                     DefaultText="-select-" Data="@dataWorkOrderStatusesDropdown" TextField="DropText" ValueField="DropValue" Class="form-control" Enabled="true" OnChange="OnDropDopChangeHandler"></TelerikDropDownList>
                    <ValidationMessage For="@(() => AddEditWorkOrderModel.WorkOrderStatusId)" style="width:unset!important;"></ValidationMessage>
                </div>
            </div>

            <div class="form-group row">
                <div class="col-md-6">
                </div>

                <label for="WorkOrderPriorityID" class="col-md-2 col-form-label">Priority </label>
                <div class="col-md-4">
                    <TelerikDropDownList @bind-Value="@AddEditWorkOrderModel.WorkOrderPriorityID" Width="100%"
                                     DefaultText="-select-" Data="@dataWorkOrderPrioritiesDropdown" TextField="DropText" ValueField="DropValue" Class="form-control" Enabled="true" OnChange="OnDropDopChangeHandler"></TelerikDropDownList>
                    <ValidationMessage For="@(() => AddEditWorkOrderModel.WorkOrderPriorityID)" style="width:unset!important;"></ValidationMessage>
                </div>
            </div>
        </EditForm>
        <hr/>
        <div class="row">
            <div class="col-md-12">
                <TelerikTabStrip ActiveTabIndexChanged="@PartTabChangedHandler">
                    @{
                        foreach (Parts item in EditWorkOrderPartGridData)
                        {                        
                            var title = "Part " + @item.key;
                                <TabStripTab Title="@title" @key="@item.key">
                                    <div class="row">
                                        <div class="col-md-6">
                                                 <TelerikGrid Data="@EditWorkOrderPartGridData.Where(a=>a.key == item.key).ToList()" Pageable="false">
                                                        <DetailTemplate Context="childPartContext">
                                                                @{
                                                                    <TelerikGrid Data="childPartContext.ChildParts" Pageable="false" Class="no-headers-grid">
                                                                        <GridColumns>
                                                                            <GridColumn Field="PartNumber" Title="Part Number">
                                                                                <Template Context="myContext">
                                                                                    @{
                                                                                    var part = myContext as Parts;
                                                                                    if (part != null)
                                                                                    {
                                                                                                <lable style="cursor:pointer;" @onclick="(()=> SelectPart(part))">@part.PartNumber</lable>
                                                                                    }
                                                                                    }
                                                                                </Template>
                                                                            </GridColumn>
                                                                            <GridColumn Field="SerialNumber" Title="Serial Number">
                                                                                <Template Context="myContext">
                                                                                    @{
                                                                                    var part = myContext as Parts;
                                                                                    if (part != null)
                                                                                    {
                                                                                                <lable>@part.SerialNumber</lable>
                                                                                    }
                                                                                    }
                                                                                </Template>
                                                                            </GridColumn>
                                                                            <GridColumn Field="InspectionStatus" Title="Inspection Status">
                                                                                <Template Context="myContext">
                                                                                    @{
                                                                                    var part = myContext as Parts;
                                                                                    if (part != null)
                                                                                    {
                                                                                        if (part.InspectionStatus == "Passed")
                                                                                        {
                                                                                                    <lable style="color:green">@part.InspectionStatus</lable>
                                                                                        }
                                                                                        else if (part.InspectionStatus == "Failed")
                                                                                        {
                                                                                                    <lable style="color:red;">@part.InspectionStatus</lable>
                                                                                        }
                                                                                        else
                                                                                        {
                                                                                                    <lable>@part.InspectionStatus</lable>
                                                                                        }
                                                                                    }
                                                                                    }
                                                                                </Template>
                                                                            </GridColumn>
                                                                        </GridColumns>
                                                                    </TelerikGrid>
                                                            }
                                                        </DetailTemplate>
                                                        <GridColumns>
                                                            <GridColumn Field="PartNumber" Title="Part Number">
                                                                <Template Context="myContext">
                                                                    @{
                                                                        var part = myContext as Parts;
                                                                        if (part != null)
                                                                        {
                                                                                    <lable style="cursor:pointer;" @onclick="(()=> SelectPart(part))">@part.PartNumber</lable>
                                                                        }
                                                                    }
                                                                </Template>
                                                            </GridColumn>
                                                            <GridColumn Field="SerialNumber" Title="Serial Number">
                                                                <Template Context="myContext">
                                                                    @{
                                                                        var part = myContext as Parts;
                                                                        if (part != null)
                                                                        {
                                                                                <lable>@part.SerialNumber</lable>
                                                                        }
                                                                    }
                                                                </Template>
                                                            </GridColumn>
                                                            <GridColumn Field="InspectionStatus" Title="Inspection Status">
                                                                <Template Context="myContext">
                                                                    @{
                                                                        var part = myContext as Parts;
                                                                        if (part != null)
                                                                        {
                                                                            if (part.InspectionStatus == "Passed")
                                                                            {
                                                                                    <lable style="color:green">@part.InspectionStatus</lable>
                                                                            }
                                                                            else if (part.InspectionStatus == "Failed")
                                                                            {
                                                                                    <lable style="color:red;">@part.InspectionStatus</lable>
                                                                            }
                                                                            else
                                                                            {
                                                                                    <lable>@part.InspectionStatus</lable>
                                                                            }
                                                                        }
                                                                    }
                                                                </Template>
                                                            </GridColumn>
                                                        </GridColumns>
                                                    </TelerikGrid>
                                        </div>
                                        <div class="col-md-6">
                                                @if(EditPartModel != null)
                {
                        <EditForm EditContext="@ECEditPart">
                            <DataAnnotationsValidator />
                            <div class="form-group row">
                                <label for="PartNumber" class="col-sm-4 col-form-label">Part Number:</label>
                                <div class="col-md-8">
                                    <label class="col-form-label">@EditPartModel.PartNumber</label>
                                </div>
                            </div>

                            <div class="form-group row">
                                <label for="BuildStations" class="col-sm-4 col-form-label">Build Station:</label>
                                <div class="col-md-8">
                                    <label class="col-form-label">@EditPartModel.BuildStations</label>
                                </div>
                            </div>

                            <div class="form-group row">
                                <label for="SerialNumber" class="col-sm-4 col-form-label">Serial Number: </label>
                                <div class="col-md-8">
                                    <InputText type="text" class="form-control" @bind-Value="@EditPartModel.SerialNumber" @onblur="@EditSerialNumberOnBlur" />
                                </div>
                            </div>
                        </EditForm>

                    if (OriginalWorkOrderInspection != null)
                    {
                            <div class="form-group row" style="margin-top:10px">
                                <label for="PartNumber" class="col-sm-4 col-form-label">Status:</label>
                                <div class="col-md-8">
                                    <ul class="switch-btn">
                                        <li class="@(OriginalWorkOrderInspection.Pass?"active":"")" @onclick="(() => OnDataStatusChangeHandler(true))"><i class="fa-regular fa-circle-check"></i> Passed</li>
                                        <li class="failed @(OriginalWorkOrderInspection.Pass?"":"active")" @onclick="(() => OnDataStatusChangeHandler(false))"><i class="fa-light fa-circle-xmark"></i> Failed</li>
                                    </ul>
                                </div>
                            </div>

                        if (!OriginalWorkOrderInspection.Pass)
                        {
                                <div class="form-group row" style="margin-top:10px">
                                    <label class="col-sm-4 col-form-label">Failure Reason:</label>
                                    <div class="col-md-8">
                                        <TelerikDropDownList Data="@dataBuildStationFailureCodeDropdown" class="form-control" TextField="DropText" ValueField="DropValue"
                                             @bind-Value="@OriginalWorkOrderInspection.InspectionFailed.BuildStationFailureCodeId" DefaultText="Select Failure Reason">
                                        </TelerikDropDownList>
                                    </div>
                                </div>
                                <div class="form-group row" style="margin-top:10px">
                                    <label class="col-sm-4 col-form-label">Comment:</label>
                                    <div class="col-md-8">
                                        <TelerikTextArea @bind-Value="@OriginalWorkOrderInspection.InspectionFailed.Comment"></TelerikTextArea>
                                    </div>
                                </div>
                        }

                            <div class="form-group row m-tb" style="padding-bottom: 20px;">
                                <label class="col-sm-4 col-form-label"></label>
                                <div class="col-md-8 bg-w save-btn">
                                    <TelerikButton ButtonType="@ButtonType.Button" Enabled=@(!isSaveInspectionClick) OnClick="@btnSaveInspectionOnClick"><i class="fa-solid fa-floppy-disk"></i> Save Inspection</TelerikButton>
                                </div>
                            </div>
                    }
                }
                                        </div>
                                    </div>

                                     
                                </TabStripTab>
                        }
                    }
                </TelerikTabStrip>
            </div>
        </div>
    </div>
}

<TelerikWindow Visible="@(AddEditWorkOrderModel != null && IsDisplayPopUpWindow == true)" Modal="true" Width="600px" Draggable="false">
    <WindowTitle>
        @{
            if (AddEditWorkOrderModel.WorkOrderId == 0)
            {
                    <strong>Add new Work Order</strong>
            }
            else
            {
                    <strong>Edit Work Order</strong>
            }
        }
    </WindowTitle>
    <WindowContent>
        <EditForm Model="@AddEditWorkOrderModel" OnValidSubmit="@HandleValidSubmit">
            <DataAnnotationsValidator />

            <div class="row">
                <div class="col-md-12">
                    <div class="form-group row">
                        <label for="WorkOrderTypeId" class="col-sm-4 col-form-label">Work Order Type </label>
                        <div class="col-sm-8">
                            <TelerikDropDownList @bind-Value="@AddEditWorkOrderModel.WorkOrderTypeId" Width="100%"
                                                 DefaultText="-select-" Data="@dataWorkOrderTypesDropdown" TextField="DropText" ValueField="DropValue" Class="form-control" Enabled="true">
                            </TelerikDropDownList>
                            <ValidationMessage For="@(() => AddEditWorkOrderModel.WorkOrderTypeId)" style="width:unset!important;"></ValidationMessage>
                        </div>
                    </div>
                </div>
            </div>

            <div class="row">
                <div class="col-md-12">
                    <div class="form-group row">
                        <label for="WorkOrderStatusId" class="col-sm-4 col-form-label">Work Order Status </label>
                        <div class="col-sm-8">
                            <TelerikDropDownList @bind-Value="@AddEditWorkOrderModel.WorkOrderStatusId" Width="100%"
                                                 DefaultText="-select-" Data="@dataWorkOrderStatusesDropdown" TextField="DropText" ValueField="DropValue" Class="form-control" Enabled="true">
                            </TelerikDropDownList>
                            <ValidationMessage For="@(() => AddEditWorkOrderModel.WorkOrderStatusId)" style="width:unset!important;"></ValidationMessage>
                        </div>
                    </div>
                </div>
            </div>

            <div class="row">
                <div class="col-md-12">
                    <div class="form-group row">
                        <label for="WorkOrderPriorityID" class="col-sm-4 col-form-label">Work Order Priority </label>
                        <div class="col-sm-8">
                            <TelerikDropDownList @bind-Value="@AddEditWorkOrderModel.WorkOrderPriorityID" Width="100%"
                                                 DefaultText="-select-" Data="@dataWorkOrderPrioritiesDropdown" TextField="DropText" ValueField="DropValue" Class="form-control" Enabled="true">
                            </TelerikDropDownList>
                            <ValidationMessage For="@(() => AddEditWorkOrderModel.WorkOrderPriorityID)" style="width:unset!important;"></ValidationMessage>
                        </div>
                    </div>
                </div>
            </div>

            <div class="row">
                <div class="col-md-12">
                    <div class="form-group row">
                        <label for="MasterPartId" class="col-sm-4 col-form-label">Part </label>
                        <div class="col-sm-8">
                            <TelerikComboBox Data="@dataMasterPartsDropdown" Class="form-control" Placeholder="-select-" TextField="DropText" ValueField="DropValue" @bind-Value="AddEditWorkOrderModel.BuildTemplateId" Filterable="true">
                            </TelerikComboBox>
                            <ValidationMessage For="@(() => AddEditWorkOrderModel.BuildTemplateId)" style="width:unset!important;"></ValidationMessage>
                        </div>
                    </div>
                </div>
            </div>


            <div class="row">
                <div class="col-md-12">
                    <div class="form-group row">
                        <label for="Quantity" class="col-sm-4 col-form-label">Quantity </label>
                        <div class="col-sm-8">
                            <TelerikNumericTextBox @bind-Value="@AddEditWorkOrderModel.Quantity" Class="form-control"></TelerikNumericTextBox>
                            <ValidationMessage For="@(() => AddEditWorkOrderModel.Quantity)" style="width:unset!important;"></ValidationMessage>
                        </div>
                    </div>
                </div>
            </div>

            <br/>
            <div class="form-row">
                @{
                    if (AddEditWorkOrderModel.WorkOrderId == 0)
                    {
                            <TelerikButton Icon="save" ButtonType="@ButtonType.Submit">Save</TelerikButton>
                    }
                    else
                    {
                            <TelerikButton Icon="save" ButtonType="@ButtonType.Submit">Update</TelerikButton>
                    }
                }
                &nbsp;
                <TelerikButton Icon="cancel" OnClick="(() => btnCancelScarCarOnClick())" ButtonType="@ButtonType.Button">Cancel</TelerikButton>
            </div>
        </EditForm>
    </WindowContent>
</TelerikWindow>

@code {
    List<Models.DropDownBind> dataBuildStationFailureCodeDropdown { get; set; }
    public Models.Inspection OriginalWorkOrderInspection { get; set; }
    bool isSaveInspectionClick { get; set; }
    public void OnDataStatusChangeHandler(bool value)
    {
        OriginalWorkOrderInspection.Pass = value;
    }

    async Task btnSaveInspectionOnClick()
    {
        try
        {
            if (isSaveInspectionClick)
                return;

            isSaveInspectionClick = true;

            if (string.IsNullOrEmpty(EditPartModel.SerialNumber))
            {
                toastService.ShowError("Please enter serial number.", "Error");
                return;
            }

            if (!OriginalWorkOrderInspection.Pass)
            {
                if (!OriginalWorkOrderInspection.InspectionFailed.BuildStationFailureCodeId.HasValue)
                {
                    toastService.ShowError("Please Select Failure Reason.", "Error");
                    return;
                }

                if (string.IsNullOrWhiteSpace(OriginalWorkOrderInspection.InspectionFailed.Comment))
                {
                    toastService.ShowError("Please Enter Comment.", "Error");
                    return;
                }
            }

            var isSuccess = await InspectionService.SaveWorkOrderInspection(OriginalWorkOrderInspection);
            if (isSuccess)
            {
                await GetWorkOrderPartDataByWorkOrder(OriginalRecord.WorkOrderId);
                toastService.ShowSuccess("Inspection Saved Successfully.", "Success");
            }
            else
            {
                toastService.ShowError("Error while saving inspection.", "Error");
            }
        }
        finally
        {
            isSaveInspectionClick = false;
            StateHasChanged();
        }
    }

    List<Models.WorkOrderModel> GridData { get; set; }

    List<Models.Parts> EditWorkOrderPartGridData { get; set; }

    List<Models.DropDownBind> dataWorkOrderTypesDropdown { get; set; }

    List<Models.DropDownBind> dataWorkOrderPrioritiesDropdown { get; set; }

    List<Models.DropDownBind> dataWorkOrderStatusesDropdown { get; set; }

    List<Models.DropDownBind> dataMasterPartsDropdown { get; set; }

    AddEditWorkOrderModel AddEditWorkOrderModel { get; set; }

    Models.WorkOrderModel OriginalRecord { get; set; }

    EditContext ECAddEditWorkOrder { get; set; }

    EditPartModel EditPartModel { get; set; }

    EditContext ECEditPart { get; set; }

    bool IsDisplayPopUpWindow { get; set; } = true;

    Models.Parts OriginalPartRecord { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await GetWorkOrderGridData();
        base.OnInitialized();
    }

    async Task GetWorkOrderGridData()
    {
        GridData = await WorkOrderService.ReadWorkOrder();
        StateHasChanged();
    }

    async Task GetWorkOrderPartDataByWorkOrder(int workOrderId)
    {
        var result = await WorkOrderService.GetWorkOrderByWorkOrderId(workOrderId);
        if (result != null)
        {
            AddEditWorkOrderModel = new AddEditWorkOrderModel()
                {
                    WorkOrderId = result.WorkOrderId,
                    WorkOrderTypeId = result.WorkOrderTypeId,
                    WorkOrderStatusId = result.WorkOrderStatusId,
                    WorkOrderPriorityID = result.WorkOrderPriorityID,
                    CreateDate = result.CreateDate,
                    Quantity = result.Quantity,
                    BuildTemplateId = result.BuildTemplateId
                };
        }

        if (result != null && result.PartsList != null && result.PartsList.Count() > 0)
        {
            EditWorkOrderPartGridData = result.PartsList;
            int key = 1;
            foreach(Parts partitem in EditWorkOrderPartGridData)
            {
                partitem.key = key;
                key = key + 1;
            }
        }
        else
        {
            EditWorkOrderPartGridData = null;
        }

        if (AddEditWorkOrderModel != null)
        {
            ECAddEditWorkOrder = new EditContext(AddEditWorkOrderModel);
        }

        if(EditPartModel == null && EditWorkOrderPartGridData != null)
        {
            await SelectPart(EditWorkOrderPartGridData.FirstOrDefault());
        }

        StateHasChanged();
    }

    async Task GetDropDownData()
    {
        dataWorkOrderTypesDropdown =  WorkOrderTypeService.DropDownData();
        dataWorkOrderPrioritiesDropdown = WorkOrderPriorityService.DropDownData();
        dataWorkOrderStatusesDropdown = WorkOrderStatusService.DropDownData();
        dataMasterPartsDropdown = MasterPartService.GetBuildTemplateMasterPartDropDownData();
    }

    public async Task SelectRecord(Models.WorkOrderModel workOrder)
    {
        await GetDropDownData();
        OriginalRecord = null;
        if (workOrder != null)
        {
            OriginalRecord = workOrder;
            IsDisplayPopUpWindow = false;
            await GetWorkOrderPartDataByWorkOrder(OriginalRecord.WorkOrderId);
        }
        else
        {
            await JSRuntime.InvokeVoidAsync("ModelBodyOverflowShown");
            AddEditWorkOrderModel = new AddEditWorkOrderModel();
            AddEditWorkOrderModel.WorkOrderId = 0;
            IsDisplayPopUpWindow = true;

            if (AddEditWorkOrderModel != null)
            {
                ECAddEditWorkOrder = new EditContext(AddEditWorkOrderModel);
            }
            StateHasChanged();
        }
    }

    public async Task HandleValidSubmit()
    {
        if (AddEditWorkOrderModel != null)
        {
            var result = await WorkOrderService.Save(AddEditWorkOrderModel);
            if (result != null)
            {
                if (result != null && result.Success)
                {
                    toastService.ShowInfo(result.Message, "Info");
                    await btnCancelScarCarOnClick();
                    await GetWorkOrderGridData();
                    StateHasChanged();
                }
                else
                {
                    toastService.ShowError(result.Message, "Error");
                }
            }
        }
    }

    public async Task DeleteRecord(Models.WorkOrderModel item)
    {
        if (item != null)
        {
            await WorkOrderService.Delete(item);
            await GetWorkOrderGridData();
        }
    }

    public async Task btnCancelScarCarOnClick()
    {
        AddEditWorkOrderModel = null;
        await JSRuntime.InvokeVoidAsync("ModelBodyOverflowHidden");
        await GetWorkOrderGridData();
        StateHasChanged();
    }

    public async Task OnDropDopChangeHandler()
    {
        var isValid = ECAddEditWorkOrder.Validate();
        if (isValid && AddEditWorkOrderModel != null)
        {
            var result = await WorkOrderService.Save(AddEditWorkOrderModel);
            if (result != null)
            {
                if (result != null && result.Success)
                {
                    if(OriginalRecord != null && OriginalRecord.WorkOrderId > 0)
                    {
                        await GetWorkOrderPartDataByWorkOrder(OriginalRecord.WorkOrderId);
                    }
                    StateHasChanged();
                }
                else
                {
                    toastService.ShowError(result.Message, "Error");
                }
            }
        }
    }

    public async Task SelectPart(Parts part)
    {
        OriginalWorkOrderInspection = null;
        if(part != null)
        {
            OriginalPartRecord = part;
            EditPartModel = new EditPartModel()
                {
                    PartId = OriginalPartRecord.PartId,
                    PartNumber = OriginalPartRecord.PartNumber,
                    SerialNumber = OriginalPartRecord.SerialNumber,
                    BuildStationId = OriginalPartRecord.BuildStationId,
                    BuildStations = OriginalPartRecord.BuildStations,
                    MasterPartId = OriginalPartRecord.MasterPartId
                };

            dataBuildStationFailureCodeDropdown = BuildStationFailureCodeService.DropDownData(OriginalPartRecord.BuildStationId);

            if (OriginalRecord != null && OriginalRecord.WorkOrderId > 0)
            {
                OriginalWorkOrderInspection = await InspectionService.GetInspectionByWorkOrderIdAndPartId(OriginalRecord.WorkOrderId, OriginalPartRecord.PartId);
                if (OriginalWorkOrderInspection.InspectionId <= 0)
                {
                    OriginalWorkOrderInspection.Pass = true;
                    OriginalWorkOrderInspection.GeneralComments = string.Empty;
                    OriginalWorkOrderInspection.PartId = OriginalPartRecord.PartId;
                    OriginalWorkOrderInspection.StationId = null;
                    OriginalWorkOrderInspection.WorkOrderId = OriginalRecord.WorkOrderId;

                    OriginalWorkOrderInspection.InspectionFailed = new Models.InspectionFailed();
                }
            }
        }
        else
        {
            OriginalPartRecord = null;
            EditPartModel = null;
        }

        if(EditPartModel != null)
        {
            ECEditPart = new EditContext(EditPartModel);
        }
        StateHasChanged();
    }

    public async Task EditSerialNumberOnBlur()
    {
        var isValid = ECEditPart.Validate();
        if (string.IsNullOrEmpty(EditPartModel.SerialNumber))
        {
            toastService.ShowError("Please enter serial number.", "Error");
            return;
        }

        try
        {
            isSaveInspectionClick = true;
            if (isValid == true && !string.IsNullOrWhiteSpace(EditPartModel.SerialNumber) && EditPartModel.PartId >= 0)
            {
                var result = await PartService.UpdatePartSerialNumber(EditPartModel);
                if (result != null)
                {
                    if (result.Success)
                    {
                        if(OriginalRecord != null && OriginalRecord.WorkOrderId > 0)
                        {
                            await GetWorkOrderPartDataByWorkOrder(OriginalRecord.WorkOrderId);
                        }
                    }
                    else
                    {
                        toastService.ShowError(result.Message, "Error");
                    }
                }
            }
        }
        catch(Exception ex)
        {
            toastService.ShowError("Error while saving serial number.", "Error");
            return;
        }
        finally
        {
            isSaveInspectionClick=false;
        }
    }

    public async Task btnCancelEditWorkOrderOnClick()
    {
        AddEditWorkOrderModel = null;
        EditPartModel = null;
        OriginalRecord = null;
        OriginalPartRecord = null;
        await GetWorkOrderGridData();
        IsDisplayPopUpWindow = true;
        await JSRuntime.InvokeVoidAsync("ModelBodyOverflowHidden");
        StateHasChanged();
    }

    public async Task PartTabChangedHandler(int seletedIndex)
    {
        seletedIndex = seletedIndex + 1;
        var part = EditWorkOrderPartGridData.Where(x=>x.key == seletedIndex).FirstOrDefault();
        if(part != null)
        {
            await SelectPart(part);
        }
        StateHasChanged();
    }
}