@page "/workorder"
@using QBD2.Models
@using QBD2.Services
@using QBD2.Entities
@using static QBD2.Models.Enum
@attribute [Authorize(Roles = "User")]
@inject IToastService toastService
@inject WorkOrderService WorkOrderService
@inject PartService PartService
@inject InspectionService InspectionService
@inject BuildStationInspectionService BuildStationInspectionService
@inject PONumberService PONumberService
<style>
    .autocompletehright40 {
        height: 40px !important;
    }

    .SaveButton {
        float: right;
        width: 100px;
    }

    .k-dialog-wrapper {
        position: inherit;
    }

    .k-centered {
        transform: translate(5%, -200%);
        width: 320px;
    }

    .k-window-titlebar.k-dialog-titlebar.k-header {
        border-top-left-radius: 0;
        border-top-right-radius: 0;
        padding: 10px 10px 20px 10px;
    }

    .k-window-content.k-dialog-content {
        border-radius: 0;
    }

    label.k-form-label {
        margin-right: 15px;
    }

    .k-form .k-form-field, .k-form .k-form-field-wrap {
        display: inline-flex;
        width: 100%;
    }

    .k-actions-start {
        float: right;
    }

    .k-window-actions span {
        color: #fff;
    }

    label.col-form-label {
        text-align: right;
        font-weight: bold;
    }

    .no-headers-grid .k-grid-header {
        display: none;
    }

    .contests-wrapper {
        border: solid;
        padding: 15px;
        border-color: rgba(0, 0, 0, 0.08);
        border-width: 1px;
    }

    .alert-edit-page .k-tabstrip-items-wrapper.k-hstack {
        border-color: rgba(0, 0, 0, 0.08);
        border-style: solid;
        border-width: 1px;
    }

    .alert-edit-page .k-tabstrip-content.k-state-active, .k-tabstrip > .k-content.k-state-active {
        border: solid;
        padding: 15px;
        border-color: rgba(0, 0, 0, 0.08);
        border-width: 1px;
        margin-top: 0px;
    }
</style>
<div class="row alerts-row">
    <div class="col-md-12">
        <h3 class="alert-title">Work Order</h3>
    </div>
</div>
<hr />

<div class="form-group row inspection">
    <div class=" col-sm-5">
        <div class="row">
            <label class="col-sm-3 col-form-label">Serial</label>
            <div class="col-sm-6">
                <TelerikAutoComplete Data="@SerialNumberDropDownData" Value="@SerialNumber" Class="form-control col-sm-12 autocompletehright40"
                                     ValueField="@(nameof(DropDownBindString.DropText))" ItemHeight="35" ScrollMode="@DropDownScrollMode.Virtual"
                                     PageSize="10" Filterable="true" MinLength="0" ValueChanged="@((string w) => OnSearchSerialNumberChange(w))"
                                     ClearButton="true"
                                     Placeholder="Search for a Serial Number" />
            </div>
            <div class=" col-sm-3 b-btn">
                <TelerikButton id="btnSearch" OnClick="(()=>btnSearchSerialClick())" ButtonType="@ButtonType.Button"><i class="fa fa-search" aria-hidden="true"></i> Find</TelerikButton>
            </div>
        </div>

        @if (UserWorkOrder != null)
        {
            <div class="row">
                <label class="col-sm-3 col-form-label">PO Number</label>
                <div class="col-sm-6 col-form-label">
                    <strong>@UserWorkOrder.PONumber</strong>
                </div>
            </div>

            if (WorkOrderDropDownData != null)
            {
                <div class="row">
                    <label class="col-sm-3 col-form-label">Work Order#</label>
                    <div class="col-sm-6">
                        <TelerikComboBox Data="@WorkOrderDropDownData" ValueExpression="@(() => WorkOrderNumber)"
                                 ValueChanged="@((int? w) => OnWorkOrderChanged(w))" TextField="DisplayName" ValueField="WorkOrderId"
                                 ItemHeight="30" PageSize="10" Filterable="true" ScrollMode="@DropDownScrollMode.Virtual"
                                 Value="WorkOrderNumber">
                            <ItemTemplate>
                                @if (string.IsNullOrWhiteSpace(context.PONumber))
                                {
                                    <span style="color:red">@context.DisplayName</span>
                                }
                                else
                                {
                                    <span>@context.DisplayName</span>
                                }
                            </ItemTemplate>
                            <ComboBoxSettings>
                                <DropDownListPopupSettings Height="Auto" MaxHeight="150px" />
                            </ComboBoxSettings>
                        </TelerikComboBox>
                    </div>
                </div>
            }

            if (UserWorkOrder.UserWorkOrderDetail != null)
            {
                <div class="row">
                    <label class="col-sm-3 col-form-label">Type</label>
                    <div class="col-sm-6 col-form-label">
                        <strong>@UserWorkOrder.UserWorkOrderDetail.Type</strong>
                    </div>
                </div>

                <div class="row">
                    <label class="col-sm-3 col-form-label">Status</label>
                    <div class="col-sm-6 col-form-label">
                        <strong>@UserWorkOrder.UserWorkOrderDetail.Status</strong>
                    </div>
                </div>

                <div class="row">
                    <label class="col-sm-3 col-form-label">Priority</label>
                    <div class="col-sm-6 col-form-label">
                        <strong>@UserWorkOrder.UserWorkOrderDetail.Priority</strong>
                    </div>
                </div>

                <div class="row">
                    <label class="col-sm-3 col-form-label">Station</label>
                    <div class="col-sm-6 col-form-label">
                        <strong>@UserWorkOrder.UserWorkOrderDetail.StationName</strong>
                    </div>
                </div>

                <div class="row">
                    <div class="col-sm-12">
                        <TelerikGrid Data="@UserWorkOrder.UserWorkOrderDetail.Parts" Pageable="false">
                            <GridColumns>
                                <GridColumn Field="PartNumber" Title="Part Number" />
                                <GridColumn Field="SerialNumber" Title="Serial Number" />
                                <GridCommandColumn Width="100px" Title="Action">
                                    <GridCommandButton Class="edit-btn bgb-none" Icon="" OnClick="@((args)=> EditSerialNumber(args.Item as Models.EditPartModel))"><i class="fal fa-edit"></i></GridCommandButton>
                                </GridCommandColumn>
                            </GridColumns>
                        </TelerikGrid>
                    </div>
                </div>

                <div class="row">
                    <div class="col-sm-12">
                        @if (UserWorkOrder.UserWorkOrderDetail.BuildStationInspectionModel != null)
                        {
                            <div class="form-group row">
                                <label for="PartNumber" class="col-sm-3 col-form-label">Status</label>
                                <div class="col-md-6">
                                    <ul class="switch-btn">
                                        <li class="@(UserWorkOrder.UserWorkOrderDetail.BuildStationInspectionModel.Pass?"active":"")" @onclick="(() => OnDataStatusChangeHandler(true))"><i class="fa-regular fa-circle-check"></i> Passed</li>
                                        <li class="failed @(UserWorkOrder.UserWorkOrderDetail.BuildStationInspectionModel.Pass?"":"active")" @onclick="(() => OnDataStatusChangeHandler(false))"><i class="fa-light fa-circle-xmark"></i> Failed</li>
                                    </ul>
                                </div>

                                @if (UserWorkOrder.UserWorkOrderDetail.BuildStationInspectionModel.IsCompleteBuildStation)
                                {
                                    <lable class="col-sm-3 col-form-label" style="color:green">Complete</lable>
                                }
                                else
                                {
                                    <lable class="col-sm-3 col-form-label" style="color:red;">InComplete</lable>
                                }
                            </div>

                            @if (!UserWorkOrder.UserWorkOrderDetail.BuildStationInspectionModel.Pass)
                            {
                                <div class="form-group row">
                                    <label class="col-sm-3 col-form-label">Primary</label>
                                    <div class="col-md-6">
                                        <TelerikDropDownList Data="@dataFailurePrimaryDropdown" class="col-sm-11" TextField="DropText" ValueField="DropValue"
                                             @bind-Value="@UserWorkOrder.UserWorkOrderDetail.BuildStationInspectionModel.BuildStationInspectionFailed.FailurePrimaryTypeId" DefaultText="Select Failure Primary" OnChange="@PrimaryDDOnChangeHandler">
                                        </TelerikDropDownList>
                                    </div>
                                </div>
                                <div class="form-group row">
                                    <label class="col-sm-3 col-form-label">Secondary</label>
                                    <div class="col-md-6">
                                        <TelerikDropDownList Data="@dataFailureDropdown" class="col-sm-11" TextField="DropText" ValueField="DropValue"
                                             @bind-Value="@UserWorkOrder.UserWorkOrderDetail.BuildStationInspectionModel.BuildStationInspectionFailed.FailureTypeId" DefaultText="Select Failure">
                                        </TelerikDropDownList>
                                    </div>
                                </div>
                                <div class="form-group row">
                                    <label class="col-sm-3 col-form-label">Comment</label>
                                    <div class="col-md-6">
                                        <TelerikTextArea @bind-Value="@UserWorkOrder.UserWorkOrderDetail.BuildStationInspectionModel.BuildStationInspectionFailed.Comment"></TelerikTextArea>
                                    </div>
                                </div>
                                <div class="form-group row">
                                    <label class="col-sm-3 col-form-label"></label>
                                    <div class="col-sm-6 add-reason-btn">
                                        <TelerikButton id="btnSearch" ButtonType="@ButtonType.Button" Enabled=@(!UserWorkOrder.UserWorkOrderDetail.BuildStationInspectionModel.IsCompleteBuildStation) OnClick="@btnAddOnClick"><i class="fa-light fa-plus"></i> Add Reason</TelerikButton>
                                    </div>
                                </div>
                                <div class="reason-section">
                                    <h3>Reasons</h3>
                                    <TelerikGrid Data="@UserWorkOrder.UserWorkOrderDetail.BuildStationInspectionModel.BuildStationInspectionFailedList"
                                 Sortable="true"
                                 Resizable="true"
                                 EditMode="Telerik.Blazor.GridEditMode.Inline"
                                 OnDelete=@DeleteHandler>
                                        <GridColumns>
                                            <GridColumn Field="FailurePrimaryName" Title="Primary" Groupable="false" />
                                            <GridColumn Field="FailureName" Title="Secondary" Groupable="false" />
                                            <GridColumn Field="Comment" Title="Comments" Groupable="false" />

                                            <AuthorizeView Context="myContext">
                                                <Authorized>
                                                    @if (myContext.User.IsInRole(RoleType.CanDeleteFailureCodes.ToString()))
                                                    {
                                                        <GridCommandColumn Width="10%">
                                                            <GridCommandButton Command="Delete" Icon="delete"></GridCommandButton>
                                                        </GridCommandColumn>
                                                    }
                                                </Authorized>
                                            </AuthorizeView>
                                        </GridColumns>
                                    </TelerikGrid>
                                </div>
                            }

                            <div class="form-group row m-tb" style="padding-bottom: 20px;">
                                <label class="col-sm-3 col-form-label"></label>
                                <div class="col-md-9 bg-w save-btn">
                                    <TelerikButton ButtonType="@ButtonType.Button" Enabled=@(!isSaveInspectionClick && UserWorkOrder.UserWorkOrderDetail.IsAllowSave) OnClick="@btnSaveInspectionOnClick"><i class="fa-solid fa-floppy-disk"></i> Save Inspection</TelerikButton>
                                </div>
                            </div>
                        }
                    </div>
                </div>
            }
        }
    </div>
</div>

<TelerikWindow Visible="@(EditPartModel != null)" Modal="true" Width="600px" Draggable="false">
    <WindowTitle>
        <strong>Edit Serial Number</strong>
    </WindowTitle>
    <WindowActions>
        <WindowAction Name="Close" OnClick="@OnEditSerialNumberCancel"></WindowAction>
    </WindowActions>
    <WindowContent>
        <EditForm Model="@EditPartModel" OnValidSubmit="@OnEditSerialNumberSave">
            <DataAnnotationsValidator />
            <div class="form-group">
                <label for="SerialNumber" class="col-sm-4 col-form-label">Serial Number: </label>
                <div class="col-md-8">
                    <InputText type="text" class="form-control" @bind-Value="@EditPartModel.SerialNumber" />
                </div>
            </div>
            <hr />
            <div class="form-row" style="float:right;">
                <TelerikButton Icon="save" ButtonType="@ButtonType.Submit">Save</TelerikButton>
                &nbsp;
                <TelerikButton Icon="cancel" OnClick="@OnEditSerialNumberCancel" ButtonType="@ButtonType.Button">Cancel</TelerikButton>
            </div>
        </EditForm>
    </WindowContent>
</TelerikWindow>

@code {
    public string SerialNumber { get; set; }
    public int? WorkOrderNumber { get; set; }
    public List<DropDownBindString> SerialNumberDropDownData { get; set; }
    public List<WorkOrderDropDown>? WorkOrderDropDownData { get; set; }
    List<DropDownBind> dataFailurePrimaryDropdown { get; set; }
    List<DropDownBind> dataFailureDropdown { get; set; }
    public UserWorkOrder? UserWorkOrder { get; set; }
    public EditPartModel EditPartModel { get; set; }
    public EditPartModel OriganlEditPartModel { get; set; }
    bool IsWorking = false;
    bool isSaveInspectionClick = false;

    protected override async Task OnInitializedAsync()
    {
        SerialNumberDropDownData = await PONumberService.GetSerialNumberList();
    }

    protected void OnSearchSerialNumberChange(string newValue)
    {
        SerialNumber = newValue;
        UserWorkOrder = null;
        WorkOrderNumber = null;
    }

    protected async Task btnSearchSerialClick()
    {
        if (string.IsNullOrWhiteSpace(SerialNumber))
        {
            toastService.ShowError("Please Enter Serial Number.", "Error");
            return;
        }
        UserWorkOrder = null;
        WorkOrderDropDownData = null;
        var poNumber = await PONumberService.GetPONumberBySerialNumber(SerialNumber);
        if (string.IsNullOrWhiteSpace(poNumber))
        {
            toastService.ShowError("PO number not found.", "Error");
            return;
        }

        UserWorkOrder = new UserWorkOrder();
        UserWorkOrder.SerialNumber = SerialNumber;
        UserWorkOrder.PONumber = poNumber.Trim();

        WorkOrderDropDownData = await WorkOrderService.GetWorkOrderListByPoNumber(UserWorkOrder.PONumber);
        if (!WorkOrderDropDownData.Any())
        {
            toastService.ShowError("Work Order not found.", "Error");
            return;
        }

        dataFailurePrimaryDropdown = InspectionService.DropDownData(Models.Enum.DropDownType.FailureTypePrimary, null);

        var workoders = WorkOrderDropDownData?.Where(x => x.PONumber == UserWorkOrder.PONumber).ToList();
        if (workoders?.Count() == 1)
        {
            UserWorkOrder.WorkOrderId = workoders[0].WorkOrderId;
            WorkOrderNumber = UserWorkOrder.WorkOrderId;
            await FindStation(UserWorkOrder.WorkOrderId);
        }
    }

    protected async void OnWorkOrderChanged(int? newValue)
    {
        WorkOrderNumber = newValue;
        if (UserWorkOrder != null && WorkOrderNumber.HasValue)
        {
            UserWorkOrder.WorkOrderId = WorkOrderNumber.Value;
            await FindStation(UserWorkOrder.WorkOrderId);
        }
        else
        {
            UserWorkOrder.UserWorkOrderDetail = null;
            StateHasChanged();
        }
    }

    private async Task FindStation(int workOrderId)
    {
        if (!IsWorking)
        {
            IsWorking = true;
            try
            {
                UserWorkOrder.UserWorkOrderDetail = null;
                var data = await WorkOrderService.GetUserWorkOrderDetail(workOrderId);
                if (data.IsFoundStation)
                {
                    UserWorkOrder.UserWorkOrderDetail = data;
                }
                else
                {
                    toastService.ShowError(data.ErrorMessage, "Error");
                    return;
                }
            }
            finally
            {
                IsWorking = false;
                StateHasChanged();
            }
        }
    }

    protected void EditSerialNumber(Models.EditPartModel editPartModel)
    {
        OriganlEditPartModel = editPartModel;
        EditPartModel = new EditPartModel()
            {
                PartId = editPartModel.PartId,
                PartNumber = editPartModel.PartNumber,
                SerialNumber = editPartModel.SerialNumber,
                BuildStationId = editPartModel.BuildStationId,
                BuildStations = editPartModel.BuildStations,
                MasterPartId = editPartModel.MasterPartId
            };
    }

    protected async Task OnEditSerialNumberSave()
    {
        if (string.IsNullOrEmpty(EditPartModel.SerialNumber))
        {
            toastService.ShowError("Please enter serial number.", "Error");
            return;
        }

        try
        {
            if (!string.IsNullOrWhiteSpace(EditPartModel.SerialNumber) && EditPartModel.PartId >= 0)
            {
                var result = await PartService.UpdatePartSerialNumber(EditPartModel);
                if (result != null)
                {
                    if (result.Success)
                    {
                        OriganlEditPartModel.SerialNumber = EditPartModel.SerialNumber;
                        EditPartModel = null;
                        toastService.ShowInfo("Record Saved Successfully", "Info");
                    }
                    else
                    {
                        toastService.ShowError(result.Message, "Error");
                    }
                    if (!result.Success)
                    {
                        toastService.ShowError(result.Message, "Error");
                    }
                }
            }
        }
        catch (Exception ex)
        {
            toastService.ShowError("Error while saving serial number.", "Error");
            return;
        }
    }

    protected void OnEditSerialNumberCancel()
    {
        EditPartModel = null;
    }

    protected void PrimaryDDOnChangeHandler()
    {
        dataFailureDropdown = InspectionService.DropDownData(Models.Enum.DropDownType.FailureType, UserWorkOrder?.UserWorkOrderDetail.BuildStationInspectionModel.BuildStationInspectionFailed.FailurePrimaryTypeId);
    }

    protected void OnDataStatusChangeHandler(bool value)
    {
        UserWorkOrder!.UserWorkOrderDetail.BuildStationInspectionModel.Pass = value;
    }

    protected void btnAddOnClick()
    {
        var dataFailureGrid = new List<Models.BuildStationInspectionFailed>();
        if (UserWorkOrder!.UserWorkOrderDetail.BuildStationInspectionModel.BuildStationInspectionFailedList != null)
        {
            dataFailureGrid = UserWorkOrder!.UserWorkOrderDetail.BuildStationInspectionModel.BuildStationInspectionFailedList;
        }

        if (!UserWorkOrder!.UserWorkOrderDetail.BuildStationInspectionModel.BuildStationInspectionFailed.FailurePrimaryTypeId.HasValue)
        {
            toastService.ShowError("Please Select Failure Primary Type", "Error");
            return;
        }

        if (!UserWorkOrder!.UserWorkOrderDetail.BuildStationInspectionModel.BuildStationInspectionFailed.FailureTypeId.HasValue)
        {
            toastService.ShowError("Please Select Failure Type", "Error");
            return;
        }

        if (string.IsNullOrEmpty(UserWorkOrder!.UserWorkOrderDetail.BuildStationInspectionModel.BuildStationInspectionFailed.Comment))
        {
            toastService.ShowError("Please Enter Comment", "Error");
            return;
        }

        if (dataFailureGrid.Count > 0)
        {
            if (dataFailureGrid
                .Any(p => p.FailureTypeId == UserWorkOrder!.UserWorkOrderDetail.BuildStationInspectionModel.BuildStationInspectionFailed.FailureTypeId
                    && p.FailurePrimaryTypeId == UserWorkOrder!.UserWorkOrderDetail.BuildStationInspectionModel.BuildStationInspectionFailed.FailurePrimaryTypeId))
            {
                toastService.ShowError("Record Already there !", "Error");
                return;
            }
        }
        dataFailureGrid.Add(new Models.BuildStationInspectionFailed
            {
                Comment = UserWorkOrder!.UserWorkOrderDetail.BuildStationInspectionModel.BuildStationInspectionFailed.Comment,
                FailurePrimaryTypeId = UserWorkOrder!.UserWorkOrderDetail.BuildStationInspectionModel.BuildStationInspectionFailed.FailurePrimaryTypeId,
                FailureTypeId = UserWorkOrder!.UserWorkOrderDetail.BuildStationInspectionModel.BuildStationInspectionFailed.FailureTypeId,
                FailurePrimaryName = dataFailurePrimaryDropdown.FirstOrDefault(p => p.DropValue == UserWorkOrder!.UserWorkOrderDetail.BuildStationInspectionModel.BuildStationInspectionFailed.FailurePrimaryTypeId)?.DropText,
                FailureName = dataFailureDropdown.FirstOrDefault(p => p.DropValue == UserWorkOrder!.UserWorkOrderDetail.BuildStationInspectionModel.BuildStationInspectionFailed.FailureTypeId)?.DropText,
            });

        UserWorkOrder!.UserWorkOrderDetail.BuildStationInspectionModel.BuildStationInspectionFailed = new Models.BuildStationInspectionFailed();

        PrimaryDDOnChangeHandler();
        UserWorkOrder!.UserWorkOrderDetail.BuildStationInspectionModel.BuildStationInspectionFailedList = new List<Models.BuildStationInspectionFailed>(dataFailureGrid);
    }

    protected void DeleteHandler(GridCommandEventArgs args)
    {
        Models.BuildStationInspectionFailed item = (Models.BuildStationInspectionFailed)args.Item;
        UserWorkOrder!.UserWorkOrderDetail.BuildStationInspectionModel.BuildStationInspectionFailedList.Remove(item);
    }

    protected async Task btnSaveInspectionOnClick()
    {
        try
        {
            if (isSaveInspectionClick)
                return;

            isSaveInspectionClick = true;
            await WorkOrderService.UpdateWorkOrderPONumber(UserWorkOrder!.WorkOrderId, UserWorkOrder!.PONumber);

            if (UserWorkOrder!.UserWorkOrderDetail.BuildStationInspectionModel.Pass == true)
            {
                UserWorkOrder!.UserWorkOrderDetail.BuildStationInspectionModel.IsCompleteBuildStation = true;
            }
            var isSuccess = await BuildStationInspectionService.SaveBuildStationInspection(UserWorkOrder!.UserWorkOrderDetail.BuildStationInspectionModel);
            if (isSuccess)
            {
                if (UserWorkOrder!.UserWorkOrderDetail.BuildStationInspectionModel.Pass == true)
                {
                    var isCompleted = await WorkOrderService.CheckAllBuildStationInspectionComplete(UserWorkOrder!.WorkOrderId, UserWorkOrder!.UserWorkOrderDetail.BuildStationInspectionModel.PartId);
                    if (isCompleted)
                    {
                        var isUpdated = await WorkOrderService.CompleteBuildInspection(UserWorkOrder!.WorkOrderId, UserWorkOrder!.UserWorkOrderDetail.BuildStationInspectionModel.PartId);
                        if (isUpdated)
                        {
                            await WorkOrderService.SetWorkOrderToCompletedIfAllStationCompleted(UserWorkOrder!.WorkOrderId);
                            await FindStation(UserWorkOrder!.WorkOrderId);
                            toastService.ShowSuccess("Build Station Inspection Saved Successfully.", "Success");
                        }
                        else
                        {
                            toastService.ShowError("Error while updating build station status.", "Error");
                        }
                    }
                    else
                    {
                        await FindStation(UserWorkOrder!.WorkOrderId);
                        toastService.ShowSuccess("Build Station Inspection Saved Successfully.", "Success");
                    }
                }
                else
                {
                    await FindStation(UserWorkOrder!.WorkOrderId);
                    toastService.ShowSuccess("Build Station Inspection Saved Successfully.", "Success");
                }
            }
            else
            {
                toastService.ShowError("Error while saving build station inspection.", "Error");
            }
        }
        finally
        {
            isSaveInspectionClick = false;
            StateHasChanged();
        }
    }
}